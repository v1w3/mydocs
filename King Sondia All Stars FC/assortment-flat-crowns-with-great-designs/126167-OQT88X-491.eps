%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Flat Crown Collection-2 up-01.eps
%%Creator: Adobe Illustrator(R) 20.1
%%For: Ayib
%%CreationDate: 31/05/17
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 20.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 20.1.0 x174 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c132 79.159284, 2016/04/19-13:13:40        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Flat Crown Collection-2 up-01</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-05-31T16:20:57+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-05-31T16:20:57+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-05-31T16:20:57+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015.3 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBIAEgAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABIAAAAAEA&#xA;AQEgAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Q4UOxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:55527e14-cdbc-4a25-95e2-1d5895f97e2e</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:55527e14-cdbc-4a25-95e2-1d5895f97e2e</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:d884a4a3-240a-274c-be7f-345d3a109e5b</stRef:instanceID>
            <stRef:documentID>xmp.did:45fa940d-c057-4718-a6e2-49e38e2f0b95</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:55527e14-cdbc-4a25-95e2-1d5895f97e2e</stEvt:instanceID>
                  <stEvt:when>2017-05-31T16:20:57+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>499.999987</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0153506 .005066 .00347906 0 cmyk
f
97.2152 156.168 mo
70.9828 156.168 54.8749 160.781 54.8749 164.088 cv
54.8749 167.392 70.9828 171.998 97.2152 171.998 cv
123.448 171.998 139.555 167.392 139.555 164.088 cv
139.555 160.781 123.448 156.168 97.2152 156.168 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
147.373 130.415 mo
147.109 131.29 146.761 132.292 146.349 133.347 cv
145.942 134.404 145.476 135.517 144.967 136.611 cv
144.46 137.705 143.913 138.781 143.367 139.774 cv
142.828 140.77 142.286 141.681 141.788 142.447 cv
140.81 143.988 139.997 144.94 139.997 144.94 cv
139.997 144.94 140.2 143.704 140.746 141.964 cv
141.01 141.089 141.357 140.087 141.77 139.032 cv
142.176 137.974 142.646 136.862 143.154 135.769 cv
143.661 134.675 144.211 133.601 144.756 132.607 cv
145.297 131.612 145.838 130.7 146.336 129.933 cv
147.313 128.393 148.124 127.44 148.124 127.44 cv
148.124 127.44 147.919 128.675 147.373 130.415 cv
cp
140.242 151.134 mo
139.912 150.56 139.155 149.928 138.08 149.342 cv
135.922 148.146 132.463 147.241 128.297 146.461 cv
124.117 145.701 119.182 145.12 113.876 144.735 cv
111.224 144.533 108.476 144.42 105.685 144.306 cv
102.884 144.203 100.07 144.159 97.2098 144.168 cv
94.3813 144.157 91.5347 144.202 88.745 144.305 cv
85.9535 144.415 83.2058 144.531 80.5533 144.733 cv
75.2473 145.117 70.3124 145.697 66.1327 146.458 cv
61.9663 147.237 58.5074 148.145 56.3493 149.341 cv
55.2745 149.928 54.5175 150.56 54.188 151.134 cv
53.8616 151.701 53.8994 152.101 53.875 152.088 cv
53.9035 152.091 53.8145 151.722 54.0925 151.083 cv
54.3758 150.46 55.0797 149.69 56.1504 149.009 cv
58.2877 147.625 61.7075 146.354 65.8937 145.34 cv
70.0828 144.314 75.0531 143.513 80.4025 142.983 cv
83.0781 142.726 85.8471 142.497 88.666 142.377 cv
91.4867 142.25 94.3444 142.181 97.2202 142.169 cv
100.064 142.179 102.954 142.25 105.764 142.376 cv
108.583 142.492 111.352 142.725 114.028 142.981 cv
119.377 143.509 124.348 144.311 128.537 145.338 cv
132.723 146.351 136.143 147.624 138.28 149.008 cv
139.351 149.69 140.055 150.459 140.338 151.083 cv
140.614 151.716 140.527 152.096 140.555 152.088 cv
140.53 152.097 140.57 151.707 140.242 151.134 cv
cp
138.39 155.303 mo
137.771 156.218 136.688 156.578 135.777 156.187 cv
134.869 155.779 134.351 154.659 134.71 153.615 cv
135.068 152.571 136.275 152.029 137.413 152.537 cv
138.564 153.035 139.012 154.387 138.39 155.303 cv
cp
127.611 151.73 mo
127.385 152.817 126.343 153.507 125.266 153.321 cv
124.191 153.123 123.447 152.111 123.617 151.015 cv
123.786 149.929 124.84 149.175 125.97 149.384 cv
127.101 149.579 127.835 150.655 127.611 151.73 cv
cp
114.131 151.882 mo
113.03 151.787 112.204 150.825 112.285 149.723 cv
112.367 148.623 113.351 147.8 114.483 147.897 cv
115.616 148.001 116.441 148.979 116.327 150.081 cv
116.213 151.176 115.231 151.983 114.131 151.882 cv
cp
102.864 151.247 mo
101.757 151.214 100.873 150.306 100.89 149.203 cv
100.908 148.097 101.84 147.215 102.973 147.248 cv
104.106 147.273 104.989 148.212 104.946 149.313 cv
104.903 150.419 103.972 151.271 102.864 151.247 cv
cp
91.5655 151.247 mo
90.458 151.271 89.5269 150.419 89.4838 149.313 cv
89.4409 148.212 90.3242 147.273 91.4574 147.248 cv
92.5904 147.215 93.5225 148.097 93.5396 149.203 cv
93.5568 150.306 92.6728 151.214 91.5655 151.247 cv
cp
80.2989 151.882 mo
79.1994 151.983 78.2166 151.176 78.1032 150.081 cv
77.989 148.979 78.8145 148.001 79.9467 147.897 cv
81.079 147.8 82.063 148.623 82.1446 149.723 cv
82.2264 150.825 81.3995 151.787 80.2989 151.882 cv
cp
69.1644 153.321 mo
68.0868 153.507 67.045 152.817 66.8191 151.73 cv
66.5952 150.655 67.3288 149.579 68.46 149.384 cv
69.5898 149.175 70.6438 149.929 70.8126 151.015 cv
70.9832 152.111 70.2387 153.123 69.1644 153.321 cv
cp
58.6531 156.187 mo
57.742 156.578 56.6593 156.218 56.0395 155.303 cv
55.4176 154.387 55.8658 153.035 57.0164 152.537 cv
58.1551 152.029 59.3617 152.571 59.7199 153.615 cv
60.079 154.659 59.5606 155.779 58.6531 156.187 cv
cp
52.6421 142.447 mo
52.1439 141.681 51.6021 140.77 51.0626 139.774 cv
50.5166 138.781 49.9702 137.705 49.4626 136.611 cv
48.9541 135.517 48.4883 134.404 48.0807 133.347 cv
47.669 132.292 47.3214 131.29 47.0573 130.415 cv
46.5105 128.675 46.3059 127.44 46.3059 127.44 cv
46.3059 127.44 47.1172 128.393 48.0941 129.933 cv
48.5919 130.7 49.1331 131.612 49.6739 132.607 cv
50.2186 133.601 50.7686 134.675 51.276 135.769 cv
51.7843 136.862 52.2537 137.974 52.66 139.032 cv
53.0729 140.087 53.4199 141.089 53.6836 141.964 cv
54.2299 143.704 54.4327 144.94 54.4327 144.94 cv
54.4327 144.94 53.6196 143.988 52.6421 142.447 cv
cp
69.5568 113.753 mo
69.9546 114.412 70.5022 115.359 71.0797 116.522 cv
72.278 118.835 73.5985 122.011 74.6975 125.262 cv
75.79 128.515 76.6605 131.843 77.1016 134.41 cv
77.3448 135.686 77.4796 136.772 77.5597 137.537 cv
77.6403 138.302 77.653 138.75 77.653 138.75 cv
77.653 138.75 77.3921 138.386 76.994 137.727 cv
76.5955 137.069 76.0464 136.123 75.4689 134.959 cv
74.2686 132.648 72.9508 129.47 71.8549 126.218 cv
70.7655 122.964 69.8975 119.636 69.4545 117.069 cv
69.2115 115.793 69.0752 114.707 68.9942 113.943 cv
68.9129 113.178 68.8994 112.73 68.8994 112.73 cv
68.8994 112.73 69.1594 113.095 69.5568 113.753 cv
cp
96.3576 109.027 mo
96.5341 107.473 96.7511 106.178 96.9182 105.271 cv
97.085 104.365 97.215 103.847 97.215 103.847 cv
97.215 103.847 97.3451 104.365 97.5117 105.271 cv
97.679 106.178 97.896 107.473 98.0724 109.027 cv
98.4708 112.135 98.7096 116.279 98.7146 120.423 cv
98.7128 124.567 98.4768 128.712 98.0763 131.82 cv
97.9 133.374 97.6814 134.669 97.5134 135.575 cv
97.346 136.482 97.215 137 97.215 137 cv
97.215 137 97.084 136.482 96.9166 135.575 cv
96.7486 134.669 96.53 133.374 96.3537 131.82 cv
95.9531 128.712 95.7172 124.567 95.7155 120.423 cv
95.7205 116.279 95.9592 112.135 96.3576 109.027 cv
cp
116.87 137.537 mo
116.95 136.772 117.085 135.686 117.328 134.41 cv
117.769 131.843 118.64 128.515 119.733 125.262 cv
120.831 122.011 122.152 118.835 123.35 116.522 cv
123.928 115.359 124.475 114.412 124.873 113.753 cv
125.271 113.095 125.531 112.73 125.531 112.73 cv
125.531 112.73 125.517 113.178 125.436 113.943 cv
125.355 114.707 125.219 115.793 124.975 117.069 cv
124.532 119.636 123.665 122.964 122.575 126.218 cv
121.479 129.47 120.161 132.648 118.961 134.959 cv
118.384 136.123 117.835 137.069 117.436 137.727 cv
117.038 138.386 116.777 138.75 116.777 138.75 cv
116.777 138.75 116.79 138.302 116.87 137.537 cv
cp
154.595 107.729 mo
151.436 107.729 148.876 110.29 148.876 113.448 cv
148.876 114.953 149.461 116.318 150.411 117.339 cv
130.945 135.438 li
131.461 95.5041 li
131.486 95.5044 131.51 95.5078 131.535 95.5078 cv
134.694 95.5078 137.254 92.9471 137.254 89.7885 cv
137.254 86.6298 134.694 84.0692 131.535 84.0692 cv
128.376 84.0692 125.816 86.6298 125.816 89.7885 cv
125.816 91.8484 126.908 93.6487 128.542 94.6556 cv
108.735 126.868 li
98.5147 83.1038 li
101.046 82.5145 102.934 80.2493 102.934 77.5385 cv
102.934 74.3798 100.374 71.8192 97.215 71.8192 cv
94.0563 71.8192 91.4957 74.3798 91.4957 77.5385 cv
91.4957 80.2493 93.3839 82.5145 95.9153 83.1038 cv
85.695 126.868 li
65.8877 94.6556 li
67.5216 93.6487 68.6143 91.8484 68.6143 89.7885 cv
68.6143 86.6298 66.0537 84.0692 62.895 84.0692 cv
59.7363 84.0692 57.1757 86.6298 57.1757 89.7885 cv
57.1757 92.9471 59.7363 95.5078 62.895 95.5078 cv
62.9199 95.5078 62.944 95.5044 62.9688 95.5041 cv
63.485 135.438 li
44.019 117.339 li
44.9689 116.318 45.5543 114.953 45.5543 113.448 cv
45.5543 110.29 42.9937 107.729 39.835 107.729 cv
36.6763 107.729 34.1157 110.29 34.1157 113.448 cv
34.1157 116.607 36.6763 119.168 39.835 119.168 cv
40.3646 119.168 40.875 119.09 41.3618 118.955 cv
53.4042 162.39 li
54.8317 160.157 59.1699 158.281 66.3656 156.8 cv
74.6137 155.103 85.5697 154.168 97.2152 154.168 cv
108.861 154.168 119.816 155.103 128.064 156.8 cv
135.26 158.281 139.598 160.157 141.026 162.39 cv
153.068 118.955 li
153.555 119.09 154.065 119.168 154.595 119.168 cv
157.754 119.168 160.314 116.607 160.314 113.448 cv
160.314 110.29 157.754 107.729 154.595 107.729 cv
cp
f
405.073 130.75 mo
402.775 128.452 li
400.477 130.75 li
402.775 133.048 li
405.073 130.75 li
cp
f
402.775 125.623 mo
407.901 130.75 li
402.775 135.876 li
397.649 130.75 li
402.775 125.623 li
cp
410.031 130.75 mo
402.775 123.494 li
395.519 130.75 li
402.775 138.006 li
410.031 130.75 li
cp
f
440.376 139.212 mo
441.747 142.159 li
444.694 140.788 li
443.323 137.841 li
440.376 139.212 li
cp
f
362.227 137.841 mo
360.856 140.788 li
363.803 142.159 li
365.174 139.212 li
362.227 137.841 li
cp
f
402.775 156.168 mo
376.536 156.168 360.425 160.781 360.425 164.088 cv
360.425 167.392 376.536 171.998 402.775 171.998 cv
429.007 171.998 445.115 167.392 445.115 164.088 cv
445.115 160.781 429.007 156.168 402.775 156.168 cv
cp
f
440.777 144.816 mo
437.719 138.242 li
444.292 135.184 li
447.351 141.758 li
440.777 144.816 li
cp
445.786 151.134 mo
445.456 150.56 444.7 149.928 443.625 149.342 cv
441.467 148.146 438.007 147.241 433.841 146.461 cv
429.662 145.701 424.727 145.12 419.421 144.735 cv
416.769 144.533 414.021 144.42 411.23 144.306 cv
408.429 144.203 405.614 144.159 402.754 144.168 cv
399.926 144.157 397.079 144.202 394.289 144.305 cv
391.498 144.415 388.75 144.531 386.098 144.733 cv
380.792 145.117 375.857 145.697 371.677 146.458 cv
367.511 147.237 364.052 148.145 361.894 149.341 cv
360.819 149.928 360.062 150.56 359.732 151.134 cv
359.406 151.701 359.444 152.101 359.42 152.088 cv
359.448 152.091 359.359 151.722 359.637 151.083 cv
359.92 150.46 360.624 149.69 361.695 149.009 cv
363.832 147.625 367.252 146.354 371.438 145.34 cv
375.627 144.314 380.598 143.513 385.947 142.983 cv
388.623 142.726 391.392 142.497 394.211 142.377 cv
397.031 142.25 399.889 142.181 402.765 142.169 cv
405.609 142.179 408.499 142.25 411.309 142.376 cv
414.128 142.492 416.897 142.725 419.572 142.981 cv
424.922 143.509 429.892 144.311 434.081 145.338 cv
438.268 146.351 441.687 147.624 443.825 149.008 cv
444.895 149.69 445.599 150.459 445.882 151.083 cv
446.159 151.716 446.072 152.096 446.1 152.088 cv
446.074 152.097 446.114 151.707 445.786 151.134 cv
cp
443.935 155.303 mo
443.315 156.218 442.233 156.578 441.321 156.187 cv
440.414 155.779 439.895 154.659 440.255 153.615 cv
440.613 152.571 441.819 152.029 442.958 152.537 cv
444.109 153.035 444.557 154.387 443.935 155.303 cv
cp
433.155 151.73 mo
432.929 152.817 431.888 153.507 430.81 153.321 cv
429.736 153.123 428.991 152.111 429.162 151.015 cv
429.331 149.929 430.385 149.175 431.515 149.384 cv
432.646 149.579 433.379 150.655 433.155 151.73 cv
cp
419.676 151.882 mo
418.575 151.787 417.748 150.825 417.83 149.723 cv
417.911 148.623 418.896 147.8 420.028 147.897 cv
421.16 148.001 421.985 148.979 421.871 150.081 cv
421.758 151.176 420.775 151.983 419.676 151.882 cv
cp
408.409 151.247 mo
407.302 151.214 406.418 150.306 406.435 149.203 cv
406.452 148.097 407.384 147.215 408.517 147.248 cv
409.65 147.273 410.534 148.212 410.491 149.313 cv
410.448 150.419 409.517 151.271 408.409 151.247 cv
cp
397.11 151.247 mo
396.002 151.271 395.071 150.419 395.028 149.313 cv
394.985 148.212 395.869 147.273 397.002 147.248 cv
398.135 147.215 399.067 148.097 399.084 149.203 cv
399.101 150.306 398.217 151.214 397.11 151.247 cv
cp
385.843 151.882 mo
384.744 151.983 383.761 151.176 383.648 150.081 cv
383.534 148.979 384.359 148.001 385.491 147.897 cv
386.624 147.8 387.608 148.623 387.689 149.723 cv
387.771 150.825 386.944 151.787 385.843 151.882 cv
cp
374.709 153.321 mo
373.631 153.507 372.59 152.817 372.364 151.73 cv
372.14 150.655 372.873 149.579 374.004 149.384 cv
375.134 149.175 376.188 149.929 376.357 151.015 cv
376.528 152.111 375.783 153.123 374.709 153.321 cv
cp
364.198 156.187 mo
363.286 156.578 362.204 156.218 361.584 155.303 cv
360.962 154.387 361.41 153.035 362.561 152.537 cv
363.7 152.029 364.906 152.571 365.264 153.615 cv
365.624 154.659 365.105 155.779 364.198 156.187 cv
cp
358.199 141.758 mo
361.257 135.184 li
367.831 138.242 li
364.773 144.816 li
358.199 141.758 li
cp
402.775 122.08 mo
411.445 130.75 li
402.775 139.42 li
394.105 130.75 li
402.775 122.08 li
cp
460.165 107.729 mo
457.006 107.729 454.446 110.29 454.446 113.448 cv
454.446 115.006 455.07 116.416 456.08 117.447 cv
446.357 126.422 435.518 132.428 423.215 134.538 cv
413.805 124.257 406.755 112.779 403.725 98.0625 cv
406.431 97.6091 408.494 95.2627 408.494 92.4285 cv
408.494 89.2698 405.934 86.7091 402.775 86.7091 cv
399.616 86.7091 397.056 89.2698 397.056 92.4285 cv
397.056 95.2626 399.119 97.6088 401.824 98.0624 cv
398.793 112.779 391.736 124.257 382.335 134.538 cv
370.033 132.428 359.196 126.424 349.467 117.451 cv
350.479 116.419 351.104 115.008 351.104 113.448 cv
351.104 110.29 348.544 107.729 345.385 107.729 cv
342.226 107.729 339.666 110.29 339.666 113.448 cv
339.666 116.607 342.226 119.168 345.385 119.168 cv
346.272 119.168 347.109 118.96 347.858 118.599 cv
353.699 131.519 357.486 145.994 359.208 162.038 cv
360.854 159.959 365.105 158.203 371.921 156.8 cv
380.171 155.103 391.129 154.168 402.775 154.168 cv
414.416 154.168 425.371 155.103 433.62 156.8 cv
440.437 158.203 444.688 159.96 446.333 162.039 cv
448.062 145.993 451.851 131.517 457.686 118.597 cv
458.437 118.959 459.276 119.168 460.165 119.168 cv
463.324 119.168 465.884 116.607 465.884 113.448 cv
465.884 110.29 463.324 107.729 460.165 107.729 cv
cp
f
53.8719 291.052 mo
140.558 291.052 li
140.558 285.301 li
53.8719 285.301 li
53.8719 291.052 li
cp
f
97.215 251.456 mo
100.274 251.456 102.754 253.936 102.754 256.995 cv
102.754 260.054 100.274 262.534 97.215 262.534 cv
94.156 262.534 91.6762 260.054 91.6762 256.995 cv
91.6762 253.936 94.156 251.456 97.215 251.456 cv
cp
97.2147 264.995 mo
101.626 264.995 105.215 261.406 105.215 256.995 cv
105.215 252.583 101.626 248.995 97.2147 248.995 cv
92.8036 248.995 89.2147 252.583 89.2147 256.995 cv
89.2147 261.406 92.8036 264.995 97.2147 264.995 cv
cp
f
61.9383 272.584 mo
63.0933 272.584 64.0293 273.479 64.0293 274.584 cv
64.0293 275.688 63.0933 276.584 61.9383 276.584 cv
60.7833 276.584 59.8473 275.688 59.8473 274.584 cv
59.8473 273.479 60.7833 272.584 61.9383 272.584 cv
cp
73.6972 272.584 mo
74.8522 272.584 75.7882 273.479 75.7882 274.584 cv
75.7882 275.688 74.8522 276.584 73.6972 276.584 cv
72.5422 276.584 71.6062 275.688 71.6062 274.584 cv
71.6062 273.479 72.5422 272.584 73.6972 272.584 cv
cp
81.646 256.52 mo
83.3067 256.52 84.653 257.866 84.653 259.527 cv
84.653 261.187 83.3067 262.534 81.646 262.534 cv
79.9852 262.534 78.6389 261.187 78.6389 259.527 cv
78.6389 257.866 79.9852 256.52 81.646 256.52 cv
cp
87.5471 274.584 mo
87.5471 275.688 86.6111 276.584 85.4561 276.584 cv
84.3011 276.584 83.3651 275.688 83.3651 274.584 cv
83.3651 273.479 84.3011 272.584 85.4561 272.584 cv
86.6111 272.584 87.5471 273.479 87.5471 274.584 cv
cp
97.2147 247.995 mo
102.177 247.995 106.215 252.032 106.215 256.995 cv
106.215 261.958 102.177 265.995 97.2147 265.995 cv
92.2523 265.995 88.2147 261.958 88.2147 256.995 cv
88.2147 252.032 92.2523 247.995 97.2147 247.995 cv
cp
97.215 226.132 mo
98.8733 226.132 100.217 227.476 100.217 229.134 cv
100.217 230.792 98.8733 232.137 97.215 232.137 cv
95.5567 232.137 94.2124 230.792 94.2124 229.134 cv
94.2124 227.476 95.5567 226.132 97.215 226.132 cv
cp
108.974 272.584 mo
110.129 272.584 111.065 273.479 111.065 274.584 cv
111.065 275.688 110.129 276.584 108.974 276.584 cv
107.819 276.584 106.883 275.688 106.883 274.584 cv
106.883 273.479 107.819 272.584 108.974 272.584 cv
cp
112.784 256.52 mo
114.445 256.52 115.791 257.866 115.791 259.527 cv
115.791 261.187 114.445 262.534 112.784 262.534 cv
111.123 262.534 109.777 261.187 109.777 259.527 cv
109.777 257.866 111.123 256.52 112.784 256.52 cv
cp
97.215 276.584 mo
96.06 276.584 95.124 275.688 95.124 274.584 cv
95.124 273.479 96.06 272.584 97.215 272.584 cv
98.37 272.584 99.306 273.479 99.306 274.584 cv
99.306 275.688 98.37 276.584 97.215 276.584 cv
cp
120.733 272.584 mo
121.888 272.584 122.824 273.479 122.824 274.584 cv
122.824 275.688 121.888 276.584 120.733 276.584 cv
119.578 276.584 118.642 275.688 118.642 274.584 cv
118.642 273.479 119.578 272.584 120.733 272.584 cv
cp
132.492 272.584 mo
133.647 272.584 134.583 273.479 134.583 274.584 cv
134.583 275.688 133.647 276.584 132.492 276.584 cv
131.337 276.584 130.401 275.688 130.401 274.584 cv
130.401 273.479 131.337 272.584 132.492 272.584 cv
cp
46.2379 245.67 mo
53.8719 280.175 li
140.558 280.175 li
148.192 245.67 li
137.008 251.495 li
140.558 254.291 li
134.372 257.971 li
128.364 261.545 120.589 258.675 118.345 252.054 cv
116.744 247.332 112.517 243.993 107.552 243.529 cv
101.395 242.953 li
106.451 228.923 li
97.215 215.398 li
87.9792 228.923 li
93.035 242.953 li
86.8775 243.529 li
81.9133 243.993 77.686 247.332 76.0854 252.054 cv
73.8408 258.675 66.0662 261.545 60.0577 257.971 cv
53.8719 254.291 li
57.4223 251.495 li
46.2379 245.67 li
cp
f
53.872 281.556 mo
53.872 283.556 li
140.558 283.556 li
140.558 281.556 li
53.872 281.556 li
cp
f
293.336 283.09 mo
206.65 283.09 li
206.65 291.052 li
293.336 291.052 li
293.336 283.09 li
cp
f
243.99 251.74 mo
241.655 250.529 li
239.222 251.864 li
241.524 255.297 li
243.99 251.74 li
cp
f
291.738 268.14 mo
291.738 270.14 li
208.239 270.14 li
208.239 268.14 li
222.181 268.14 li
222.181 261.733 li
216.477 258.688 li
222.681 249.592 li
228.885 258.688 li
223.181 261.733 li
223.181 268.14 li
276.805 268.14 li
276.805 261.733 li
271.101 258.688 li
277.305 249.592 li
283.509 258.688 li
277.805 261.733 li
277.805 268.14 li
291.738 268.14 li
cp
287.318 277.382 mo
286.172 277.382 285.244 276.473 285.244 275.353 cv
285.244 274.232 286.172 273.323 287.318 273.323 cv
288.463 273.323 289.392 274.232 289.392 275.353 cv
289.392 276.473 288.463 277.382 287.318 277.382 cv
cp
281.096 277.382 mo
279.951 277.382 279.022 276.473 279.022 275.353 cv
279.022 274.232 279.951 273.323 281.096 273.323 cv
282.242 273.323 283.17 274.232 283.17 275.353 cv
283.17 276.473 282.242 277.382 281.096 277.382 cv
cp
274.875 277.382 mo
273.729 277.382 272.801 276.473 272.801 275.353 cv
272.801 274.232 273.729 273.323 274.875 273.323 cv
276.02 273.323 276.949 274.232 276.949 275.353 cv
276.949 276.473 276.02 277.382 274.875 277.382 cv
cp
268.653 277.382 mo
267.508 277.382 266.579 276.473 266.579 275.353 cv
266.579 274.232 267.508 273.323 268.653 273.323 cv
269.799 273.323 270.727 274.232 270.727 275.353 cv
270.727 276.473 269.799 277.382 268.653 277.382 cv
cp
262.432 277.382 mo
261.286 277.382 260.358 276.473 260.358 275.353 cv
260.358 274.232 261.286 273.323 262.432 273.323 cv
263.577 273.323 264.506 274.232 264.506 275.353 cv
264.506 276.473 263.577 277.382 262.432 277.382 cv
cp
256.21 277.382 mo
255.065 277.382 254.136 276.473 254.136 275.353 cv
254.136 274.232 255.065 273.323 256.21 273.323 cv
257.356 273.323 258.284 274.232 258.284 275.353 cv
258.284 276.473 257.356 277.382 256.21 277.382 cv
cp
249.989 277.382 mo
248.843 277.382 247.915 276.473 247.915 275.353 cv
247.915 274.232 248.843 273.323 249.989 273.323 cv
251.134 273.323 252.063 274.232 252.063 275.353 cv
252.063 276.473 251.134 277.382 249.989 277.382 cv
cp
243.767 277.382 mo
242.622 277.382 241.693 276.473 241.693 275.353 cv
241.693 274.232 242.622 273.323 243.767 273.323 cv
244.913 273.323 245.841 274.232 245.841 275.353 cv
245.841 276.473 244.913 277.382 243.767 277.382 cv
cp
237.546 277.382 mo
236.4 277.382 235.472 276.473 235.472 275.353 cv
235.472 274.232 236.4 273.323 237.546 273.323 cv
238.691 273.323 239.62 274.232 239.62 275.353 cv
239.62 276.473 238.691 277.382 237.546 277.382 cv
cp
231.324 277.382 mo
230.179 277.382 229.25 276.473 229.25 275.353 cv
229.25 274.232 230.179 273.323 231.324 273.323 cv
232.47 273.323 233.398 274.232 233.398 275.353 cv
233.398 276.473 232.47 277.382 231.324 277.382 cv
cp
225.103 277.382 mo
223.957 277.382 223.029 276.473 223.029 275.353 cv
223.029 274.232 223.957 273.323 225.103 273.323 cv
226.248 273.323 227.177 274.232 227.177 275.353 cv
227.177 276.473 226.248 277.382 225.103 277.382 cv
cp
218.881 277.382 mo
217.736 277.382 216.807 276.473 216.807 275.353 cv
216.807 274.232 217.736 273.323 218.881 273.323 cv
220.027 273.323 220.955 274.232 220.955 275.353 cv
220.955 276.473 220.027 277.382 218.881 277.382 cv
cp
212.66 277.382 mo
211.514 277.382 210.586 276.473 210.586 275.353 cv
210.586 274.232 211.514 273.323 212.66 273.323 cv
213.805 273.323 214.734 274.232 214.734 275.353 cv
214.734 276.473 213.805 277.382 212.66 277.382 cv
cp
241.642 249.395 mo
245.459 251.376 li
241.51 257.072 li
237.782 251.514 li
241.642 249.395 li
cp
262.205 251.376 mo
258.255 257.072 li
254.527 251.514 li
258.386 249.395 li
262.205 251.376 li
cp
249.993 230.441 mo
258.447 245.227 li
250.406 250.731 li
256.839 260.324 li
249.709 264.236 li
242.693 260.598 li
249.548 250.709 li
241.539 245.227 li
249.993 230.441 li
cp
288.082 251.498 mo
285.966 241.701 272.961 239.528 267.776 248.106 cv
267.341 248.826 li
249.993 219.163 li
232.646 248.826 li
232.21 248.106 li
227.025 239.528 214.021 241.701 211.905 251.498 cv
211.905 251.498 li
197.624 244.713 li
203.63 253.729 206.65 266.051 206.65 280.175 cv
293.336 280.175 li
293.336 266.051 296.357 253.729 302.362 244.713 cv
288.082 251.498 li
288.082 251.498 li
cp
f
258.269 255.297 mo
260.735 251.74 li
258.4 250.529 li
255.967 251.864 li
258.269 255.297 li
cp
f
244.163 260.232 mo
249.696 263.103 li
255.4 259.973 li
249.963 251.866 li
244.163 260.232 li
cp
f
442.083 285.498 mo
440.969 285.498 440.067 284.589 440.067 283.468 cv
440.067 282.348 440.969 281.439 442.083 281.439 cv
443.196 281.439 444.099 282.348 444.099 283.468 cv
444.099 284.589 443.196 285.498 442.083 285.498 cv
cp
443.104 288.831 mo
362.439 288.831 li
362.439 287.831 li
443.104 287.831 li
443.104 288.831 li
cp
361.444 283.468 mo
361.444 282.348 362.347 281.439 363.46 281.439 cv
364.574 281.439 365.476 282.348 365.476 283.468 cv
365.476 284.589 364.574 285.498 363.46 285.498 cv
362.347 285.498 361.444 284.589 361.444 283.468 cv
cp
369.508 281.439 mo
370.622 281.439 371.524 282.348 371.524 283.468 cv
371.524 284.589 370.622 285.498 369.508 285.498 cv
368.395 285.498 367.492 284.589 367.492 283.468 cv
367.492 282.348 368.395 281.439 369.508 281.439 cv
cp
375.556 281.439 mo
376.669 281.439 377.572 282.348 377.572 283.468 cv
377.572 284.589 376.669 285.498 375.556 285.498 cv
374.443 285.498 373.54 284.589 373.54 283.468 cv
373.54 282.348 374.443 281.439 375.556 281.439 cv
cp
381.604 281.439 mo
382.717 281.439 383.62 282.348 383.62 283.468 cv
383.62 284.589 382.717 285.498 381.604 285.498 cv
380.491 285.498 379.588 284.589 379.588 283.468 cv
379.588 282.348 380.491 281.439 381.604 281.439 cv
cp
387.652 281.439 mo
388.765 281.439 389.668 282.348 389.668 283.468 cv
389.668 284.589 388.765 285.498 387.652 285.498 cv
386.538 285.498 385.636 284.589 385.636 283.468 cv
385.636 282.348 386.538 281.439 387.652 281.439 cv
cp
393.7 281.439 mo
394.813 281.439 395.716 282.348 395.716 283.468 cv
395.716 284.589 394.813 285.498 393.7 285.498 cv
392.586 285.498 391.684 284.589 391.684 283.468 cv
391.684 282.348 392.586 281.439 393.7 281.439 cv
cp
399.748 281.439 mo
400.861 281.439 401.764 282.348 401.764 283.468 cv
401.764 284.589 400.861 285.498 399.748 285.498 cv
398.634 285.498 397.732 284.589 397.732 283.468 cv
397.732 282.348 398.634 281.439 399.748 281.439 cv
cp
405.795 281.439 mo
406.909 281.439 407.811 282.348 407.811 283.468 cv
407.811 284.589 406.909 285.498 405.795 285.498 cv
404.682 285.498 403.779 284.589 403.779 283.468 cv
403.779 282.348 404.682 281.439 405.795 281.439 cv
cp
411.843 281.439 mo
412.957 281.439 413.859 282.348 413.859 283.468 cv
413.859 284.589 412.957 285.498 411.843 285.498 cv
410.73 285.498 409.827 284.589 409.827 283.468 cv
409.827 282.348 410.73 281.439 411.843 281.439 cv
cp
417.891 281.439 mo
419.005 281.439 419.907 282.348 419.907 283.468 cv
419.907 284.589 419.005 285.498 417.891 285.498 cv
416.778 285.498 415.875 284.589 415.875 283.468 cv
415.875 282.348 416.778 281.439 417.891 281.439 cv
cp
423.939 281.439 mo
425.052 281.439 425.955 282.348 425.955 283.468 cv
425.955 284.589 425.052 285.498 423.939 285.498 cv
422.826 285.498 421.923 284.589 421.923 283.468 cv
421.923 282.348 422.826 281.439 423.939 281.439 cv
cp
429.987 281.439 mo
431.1 281.439 432.003 282.348 432.003 283.468 cv
432.003 284.589 431.1 285.498 429.987 285.498 cv
428.874 285.498 427.971 284.589 427.971 283.468 cv
427.971 282.348 428.874 281.439 429.987 281.439 cv
cp
436.035 281.439 mo
437.148 281.439 438.051 282.348 438.051 283.468 cv
438.051 284.589 437.148 285.498 436.035 285.498 cv
434.921 285.498 434.019 284.589 434.019 283.468 cv
434.019 282.348 434.921 281.439 436.035 281.439 cv
cp
446.115 279.114 mo
359.428 279.114 li
359.428 291.052 li
446.115 291.052 li
446.115 279.114 li
cp
f
389.928 255.831 mo
389.928 254.659 388.974 253.706 387.803 253.706 cv
386.631 253.706 385.678 254.659 385.678 255.831 cv
385.678 257.003 386.631 257.956 387.803 257.956 cv
388.974 257.956 389.928 257.003 389.928 255.831 cv
cp
f
443.948 261.623 mo
443.948 260.704 443.2 259.956 442.28 259.956 cv
441.361 259.956 440.613 260.704 440.613 261.623 cv
440.613 262.543 441.361 263.291 442.28 263.291 cv
443.2 263.291 443.948 262.543 443.948 261.623 cv
cp
f
364.931 261.623 mo
364.931 260.704 364.182 259.956 363.263 259.956 cv
362.344 259.956 361.596 260.704 361.596 261.623 cv
361.596 262.543 362.344 263.291 363.263 263.291 cv
364.182 263.291 364.931 262.543 364.931 261.623 cv
cp
f
419.866 255.831 mo
419.866 254.659 418.912 253.706 417.741 253.706 cv
416.569 253.706 415.616 254.659 415.616 255.831 cv
415.616 257.003 416.569 257.956 417.741 257.956 cv
418.912 257.956 419.866 257.003 419.866 255.831 cv
cp
f
402.771 241.365 mo
403.237 241.365 403.615 240.986 403.615 240.521 cv
403.615 240.056 403.237 239.677 402.771 239.677 cv
402.306 239.677 401.928 240.056 401.928 240.521 cv
401.928 240.986 402.306 241.365 402.771 241.365 cv
cp
f
402.271 237.728 mo
402.271 236.008 li
402.271 229.285 li
402.098 229.255 401.932 229.206 401.771 229.145 cv
400.697 228.738 399.928 227.707 399.928 226.492 cv
399.928 225.277 400.697 224.246 401.771 223.839 cv
402.084 223.721 402.418 223.648 402.771 223.648 cv
403.124 223.648 403.459 223.721 403.771 223.839 cv
404.846 224.246 405.615 225.277 405.615 226.492 cv
405.615 227.707 404.846 228.738 403.771 229.145 cv
403.611 229.206 403.444 229.255 403.271 229.285 cv
403.271 236.008 li
403.271 237.728 li
404.601 237.966 405.615 239.124 405.615 240.521 cv
405.615 242.089 404.339 243.365 402.771 243.365 cv
401.203 243.365 399.928 242.089 399.928 240.521 cv
399.928 239.124 400.942 237.966 402.271 237.728 cv
cp
402.771 247.992 mo
410.592 240.172 li
406.766 236.346 406.766 230.143 410.592 226.317 cv
403.771 219.496 li
403.771 214.52 li
406.452 214.046 408.491 211.71 408.491 208.893 cv
408.491 208.25 408.38 207.635 408.184 207.058 cv
407.419 209.315 405.287 210.942 402.772 210.942 cv
400.256 210.942 398.124 209.315 397.359 207.058 cv
397.163 207.635 397.052 208.25 397.052 208.893 cv
397.052 211.71 399.09 214.046 401.771 214.52 cv
401.771 219.497 li
394.951 226.317 li
398.777 230.143 398.777 236.346 394.951 240.172 cv
402.771 247.992 li
cp
f
445.691 270.873 mo
445.691 271.873 li
359.852 271.873 li
359.852 270.873 li
362.263 270.873 li
362.263 265.135 li
360.729 264.696 359.596 263.296 359.596 261.623 cv
359.596 259.601 361.241 257.956 363.263 257.956 cv
365.285 257.956 366.931 259.601 366.931 261.623 cv
366.931 263.296 365.797 264.696 364.263 265.135 cv
364.263 270.873 li
386.803 270.873 li
386.803 259.819 li
385.012 259.369 383.678 257.759 383.678 255.831 cv
383.678 253.557 385.528 251.706 387.803 251.706 cv
390.077 251.706 391.928 253.557 391.928 255.831 cv
391.928 257.759 390.593 259.369 388.803 259.819 cv
388.803 270.873 li
416.741 270.873 li
416.741 259.819 li
414.95 259.369 413.616 257.759 413.616 255.831 cv
413.616 253.557 415.466 251.706 417.741 251.706 cv
420.015 251.706 421.866 253.557 421.866 255.831 cv
421.866 257.759 420.531 259.369 418.741 259.819 cv
418.741 270.873 li
441.28 270.873 li
441.28 265.135 li
439.746 264.696 438.613 263.296 438.613 261.623 cv
438.613 259.601 440.258 257.956 442.28 257.956 cv
444.303 257.956 445.948 259.601 445.948 261.623 cv
445.948 263.296 444.815 264.696 443.28 265.135 cv
443.28 270.873 li
445.691 270.873 li
cp
452.282 240.72 mo
449.124 240.72 446.563 243.281 446.563 246.44 cv
446.563 247.818 447.051 249.083 447.864 250.07 cv
444.625 252.478 440.231 255.195 436.887 255.195 cv
417.25 238.805 li
402.771 253.398 li
388.293 238.805 li
368.656 255.195 li
365.312 255.195 360.918 252.478 357.679 250.07 cv
358.492 249.083 358.98 247.818 358.98 246.44 cv
358.98 243.281 356.419 240.72 353.261 240.72 cv
350.102 240.72 347.541 243.281 347.541 246.44 cv
347.541 249.598 350.102 252.159 353.261 252.159 cv
353.372 252.159 353.481 252.148 353.591 252.142 cv
354.866 264.11 359.428 276.945 359.428 276.945 cv
359.428 276.945 381.1 276.945 402.771 276.945 cv
424.443 276.945 446.115 276.945 446.115 276.945 cv
446.115 276.945 450.676 264.11 451.952 252.142 cv
452.062 252.148 452.171 252.159 452.282 252.159 cv
455.441 252.159 458.002 249.598 458.002 246.44 cv
458.002 243.281 455.441 240.72 452.282 240.72 cv
cp
f
403.615 226.492 mo
403.615 226.027 403.237 225.648 402.771 225.648 cv
402.306 225.648 401.928 226.027 401.928 226.492 cv
401.928 226.958 402.306 227.336 402.771 227.336 cv
403.237 227.336 403.615 226.958 403.615 226.492 cv
cp
f
53.8719 408.181 mo
140.558 408.181 li
140.558 402.368 li
53.8719 402.368 li
53.8719 408.181 li
cp
f
139.461 387.755 mo
54.9691 387.755 li
54.9691 386.755 li
96.7147 386.755 li
96.7147 366.904 li
92.7243 366.645 89.5546 363.324 89.5546 359.269 cv
89.5546 355.046 92.9911 351.609 97.2147 351.609 cv
101.439 351.609 104.875 355.046 104.875 359.269 cv
104.875 363.324 101.706 366.645 97.7147 366.904 cv
97.7147 386.755 li
139.461 386.755 li
139.461 387.755 li
cp
135.494 392.689 mo
135.494 391.474 136.718 390.488 136.718 390.488 cv
136.718 390.488 137.941 391.474 137.941 392.689 cv
137.941 393.905 136.718 394.891 136.718 394.891 cv
136.718 394.891 135.494 393.905 135.494 392.689 cv
cp
136.718 397.742 mo
133.974 394.891 li
134.717 394.119 li
135.822 395.268 137.613 395.268 138.718 394.119 cv
139.461 394.891 li
136.718 397.742 li
cp
128.91 392.689 mo
128.91 391.474 130.134 390.488 130.134 390.488 cv
130.134 390.488 131.357 391.474 131.357 392.689 cv
131.357 393.905 130.134 394.891 130.134 394.891 cv
130.134 394.891 128.91 393.905 128.91 392.689 cv
cp
130.134 397.742 mo
127.39 394.891 li
128.133 394.119 li
129.238 395.268 131.03 395.268 132.134 394.119 cv
132.877 394.891 li
130.134 397.742 li
cp
122.326 392.689 mo
122.326 391.474 123.55 390.488 123.55 390.488 cv
123.55 390.488 124.774 391.474 124.774 392.689 cv
124.774 393.905 123.55 394.891 123.55 394.891 cv
123.55 394.891 122.326 393.905 122.326 392.689 cv
cp
123.55 397.742 mo
120.807 394.891 li
121.549 394.119 li
122.654 395.268 124.446 395.268 125.551 394.119 cv
126.293 394.891 li
123.55 397.742 li
cp
115.743 392.689 mo
115.743 391.474 116.966 390.488 116.966 390.488 cv
116.966 390.488 118.19 391.474 118.19 392.689 cv
118.19 393.905 116.966 394.891 116.966 394.891 cv
116.966 394.891 115.743 393.905 115.743 392.689 cv
cp
116.966 397.742 mo
114.223 394.891 li
114.965 394.119 li
116.07 395.268 117.862 395.268 118.967 394.119 cv
119.709 394.891 li
116.966 397.742 li
cp
109.159 392.689 mo
109.159 391.474 110.382 390.488 110.382 390.488 cv
110.382 390.488 111.606 391.474 111.606 392.689 cv
111.606 393.905 110.382 394.891 110.382 394.891 cv
110.382 394.891 109.159 393.905 109.159 392.689 cv
cp
110.382 397.742 mo
107.639 394.891 li
108.382 394.119 li
109.487 395.268 111.278 395.268 112.383 394.119 cv
113.126 394.891 li
110.382 397.742 li
cp
102.575 392.689 mo
102.575 391.474 103.799 390.488 103.799 390.488 cv
103.799 390.488 105.022 391.474 105.022 392.689 cv
105.022 393.905 103.799 394.891 103.799 394.891 cv
103.799 394.891 102.575 393.905 102.575 392.689 cv
cp
103.799 397.742 mo
101.055 394.891 li
101.798 394.119 li
102.903 395.268 104.694 395.268 105.799 394.119 cv
106.542 394.891 li
103.799 397.742 li
cp
95.9913 392.689 mo
95.9913 391.474 97.215 390.488 97.215 390.488 cv
97.215 390.488 98.4387 391.474 98.4387 392.689 cv
98.4387 393.905 97.215 394.891 97.215 394.891 cv
97.215 394.891 95.9913 393.905 95.9913 392.689 cv
cp
97.215 397.742 mo
94.4718 394.891 li
95.2143 394.119 li
96.3192 395.268 98.1107 395.268 99.2157 394.119 cv
99.9582 394.891 li
97.215 397.742 li
cp
89.4075 392.689 mo
89.4075 391.474 90.6313 390.488 90.6313 390.488 cv
90.6313 390.488 91.8549 391.474 91.8549 392.689 cv
91.8549 393.905 90.6313 394.891 90.6313 394.891 cv
90.6313 394.891 89.4075 393.905 89.4075 392.689 cv
cp
90.6313 397.742 mo
87.888 394.891 li
88.6305 394.119 li
89.7354 395.268 91.527 395.268 92.632 394.119 cv
93.3745 394.891 li
90.6313 397.742 li
cp
82.8238 392.689 mo
82.8238 391.474 84.0474 390.488 84.0474 390.488 cv
84.0474 390.488 85.2712 391.474 85.2712 392.689 cv
85.2712 393.905 84.0474 394.891 84.0474 394.891 cv
84.0474 394.891 82.8238 393.905 82.8238 392.689 cv
cp
84.0474 397.742 mo
81.3042 394.891 li
82.0467 394.119 li
83.1517 395.268 84.9432 395.268 86.0482 394.119 cv
86.7907 394.891 li
84.0474 397.742 li
cp
76.24 392.689 mo
76.24 391.474 77.4637 390.488 77.4637 390.488 cv
77.4637 390.488 78.6874 391.474 78.6874 392.689 cv
78.6874 393.905 77.4637 394.891 77.4637 394.891 cv
77.4637 394.891 76.24 393.905 76.24 392.689 cv
cp
77.4637 397.742 mo
74.7205 394.891 li
75.463 394.119 li
76.568 395.268 78.3595 395.268 79.4644 394.119 cv
80.2069 394.891 li
77.4637 397.742 li
cp
69.6562 392.689 mo
69.6562 391.474 70.88 390.488 70.88 390.488 cv
70.88 390.488 72.1037 391.474 72.1037 392.689 cv
72.1037 393.905 70.88 394.891 70.88 394.891 cv
70.88 394.891 69.6562 393.905 69.6562 392.689 cv
cp
70.88 397.742 mo
68.1367 394.891 li
68.8792 394.119 li
69.9842 395.268 71.7757 395.268 72.8807 394.119 cv
73.6232 394.891 li
70.88 397.742 li
cp
63.0725 392.689 mo
63.0725 391.474 64.2962 390.488 64.2962 390.488 cv
64.2962 390.488 65.5199 391.474 65.5199 392.689 cv
65.5199 393.905 64.2962 394.891 64.2962 394.891 cv
64.2962 394.891 63.0725 393.905 63.0725 392.689 cv
cp
64.2962 397.742 mo
61.5529 394.891 li
62.2954 394.119 li
63.4004 395.268 65.1919 395.268 66.2969 394.119 cv
67.0394 394.891 li
64.2962 397.742 li
cp
56.4887 392.689 mo
56.4887 391.474 57.7124 390.488 57.7124 390.488 cv
57.7124 390.488 58.9361 391.474 58.9361 392.689 cv
58.9361 393.905 57.7124 394.891 57.7124 394.891 cv
57.7124 394.891 56.4887 393.905 56.4887 392.689 cv
cp
57.7124 397.742 mo
54.9692 394.891 li
55.7117 394.119 li
56.8167 395.268 58.6082 395.268 59.7132 394.119 cv
60.4557 394.891 li
57.7124 397.742 li
cp
58.6988 362.011 mo
57.1848 362.011 55.9574 360.783 55.9574 359.269 cv
55.9574 357.755 57.1848 356.528 58.6988 356.528 cv
60.2127 356.528 61.44 357.755 61.44 359.269 cv
61.44 360.783 60.2127 362.011 58.6988 362.011 cv
cp
135.731 356.528 mo
137.245 356.528 138.472 357.755 138.472 359.269 cv
138.472 360.783 137.245 362.011 135.731 362.011 cv
134.217 362.011 132.99 360.783 132.99 359.269 cv
132.99 357.755 134.217 356.528 135.731 356.528 cv
cp
130.729 377.212 mo
130.729 377.212 131.427 371.341 133.696 364.457 cv
134.329 364.698 135.013 364.836 135.731 364.836 cv
138.89 364.836 141.45 362.276 141.45 359.117 cv
141.45 355.958 138.89 353.397 135.731 353.397 cv
132.572 353.397 130.012 355.958 130.012 359.117 cv
130.012 360.624 130.599 361.991 131.552 363.013 cv
126.2 367.713 116.378 375.398 106.075 378.714 cv
106.075 378.714 103.663 365.179 111.606 358.825 cv
111.606 358.825 97.215 347.705 97.215 331.555 cv
97.215 347.705 82.8242 358.825 82.8242 358.825 cv
90.7668 365.179 88.3554 378.714 88.3554 378.714 cv
78.0518 375.398 68.2299 367.713 62.8779 363.013 cv
63.8307 361.991 64.4181 360.624 64.4181 359.117 cv
64.4181 355.958 61.8574 353.397 58.6988 353.397 cv
55.5401 353.397 52.9794 355.958 52.9794 359.117 cv
52.9794 362.276 55.5401 364.836 58.6988 364.836 cv
59.4165 364.836 60.1006 364.698 60.7336 364.457 cv
63.0027 371.341 63.7008 377.211 63.7008 377.211 cv
53.262 373.483 42.9881 364.258 42.9881 364.258 cv
55.4928 379.433 53.8719 400.182 53.8719 400.182 cv
140.558 400.182 li
140.558 400.182 138.937 379.433 151.442 364.258 cv
151.442 364.258 141.168 373.483 130.729 377.212 cv
cp
f
92.3305 359.269 mo
92.3305 356.572 94.5174 354.385 97.215 354.385 cv
99.9126 354.385 102.099 356.572 102.099 359.269 cv
102.099 361.967 99.9126 364.154 97.215 364.154 cv
94.5174 364.154 92.3305 361.967 92.3305 359.269 cv
cp
103.875 359.269 mo
103.875 355.597 100.888 352.609 97.2147 352.609 cv
93.5424 352.609 90.5546 355.597 90.5546 359.269 cv
90.5546 362.942 93.5424 365.93 97.2147 365.93 cv
100.888 365.93 103.875 362.942 103.875 359.269 cv
cp
f
209.993 402.868 mo
210.993 402.868 li
210.993 406.016 li
209.993 406.016 li
209.993 402.868 li
cp
218.771 402.868 mo
219.771 402.868 li
219.771 406.016 li
218.771 406.016 li
218.771 402.868 li
cp
227.549 402.868 mo
228.549 402.868 li
228.549 406.016 li
227.549 406.016 li
227.549 402.868 li
cp
236.327 402.868 mo
237.327 402.868 li
237.327 406.016 li
236.327 406.016 li
236.327 402.868 li
cp
245.104 402.868 mo
246.104 402.868 li
246.104 406.016 li
245.104 406.016 li
245.104 402.868 li
cp
253.882 402.868 mo
254.882 402.868 li
254.882 406.016 li
253.882 406.016 li
253.882 402.868 li
cp
262.66 402.868 mo
263.66 402.868 li
263.66 406.016 li
262.66 406.016 li
262.66 402.868 li
cp
271.437 402.868 mo
272.437 402.868 li
272.437 406.016 li
271.437 406.016 li
271.437 402.868 li
cp
280.215 402.868 mo
281.215 402.868 li
281.215 406.016 li
280.215 406.016 li
280.215 402.868 li
cp
288.993 402.868 mo
289.993 402.868 li
289.993 406.016 li
288.993 406.016 li
288.993 402.868 li
cp
206.65 408.181 mo
293.336 408.181 li
293.336 400.703 li
206.65 400.703 li
206.65 408.181 li
cp
f
291.738 386.647 mo
208.239 386.647 li
208.239 385.647 li
209.993 385.647 li
209.993 383 li
210.993 383 li
210.993 385.647 li
223.16 385.647 li
223.16 383 li
224.16 383 li
224.16 385.647 li
236.327 385.647 li
236.327 383 li
237.327 383 li
237.327 385.647 li
249.493 385.647 li
249.493 383 li
250.493 383 li
250.493 385.647 li
262.66 385.647 li
262.66 383 li
263.66 383 li
263.66 385.647 li
275.827 385.647 li
275.827 383 li
276.827 383 li
276.827 385.647 li
288.993 385.647 li
288.993 383 li
289.993 383 li
289.993 385.647 li
291.738 385.647 li
291.738 386.647 li
cp
285.901 394.049 mo
284.725 394.049 283.773 393.154 283.773 392.049 cv
283.773 390.945 284.725 390.049 285.901 390.049 cv
287.077 390.049 288.029 390.945 288.029 392.049 cv
288.029 393.154 287.077 394.049 285.901 394.049 cv
cp
273.932 394.049 mo
272.756 394.049 271.803 393.154 271.803 392.049 cv
271.803 390.945 272.756 390.049 273.932 390.049 cv
275.107 390.049 276.06 390.945 276.06 392.049 cv
276.06 393.154 275.107 394.049 273.932 394.049 cv
cp
261.962 394.049 mo
260.787 394.049 259.834 393.154 259.834 392.049 cv
259.834 390.945 260.787 390.049 261.962 390.049 cv
263.138 390.049 264.091 390.945 264.091 392.049 cv
264.091 393.154 263.138 394.049 261.962 394.049 cv
cp
249.993 394.049 mo
248.818 394.049 247.865 393.154 247.865 392.049 cv
247.865 390.945 248.818 390.049 249.993 390.049 cv
251.169 390.049 252.122 390.945 252.122 392.049 cv
252.122 393.154 251.169 394.049 249.993 394.049 cv
cp
238.024 394.049 mo
236.848 394.049 235.896 393.154 235.896 392.049 cv
235.896 390.945 236.848 390.049 238.024 390.049 cv
239.2 390.049 240.152 390.945 240.152 392.049 cv
240.152 393.154 239.2 394.049 238.024 394.049 cv
cp
226.055 394.049 mo
224.879 394.049 223.926 393.154 223.926 392.049 cv
223.926 390.945 224.879 390.049 226.055 390.049 cv
227.23 390.049 228.183 390.945 228.183 392.049 cv
228.183 393.154 227.23 394.049 226.055 394.049 cv
cp
214.085 394.049 mo
212.91 394.049 211.957 393.154 211.957 392.049 cv
211.957 390.945 212.91 390.049 214.085 390.049 cv
215.261 390.049 216.214 390.945 216.214 392.049 cv
216.214 393.154 215.261 394.049 214.085 394.049 cv
cp
239.306 371.247 mo
243.727 375.668 li
239.306 380.09 li
234.884 375.668 li
239.306 371.247 li
cp
260.681 371.247 mo
265.102 375.668 li
260.681 380.09 li
256.259 375.668 li
260.681 371.247 li
cp
263.274 360.326 mo
261.918 357.536 li
250.291 368.974 li
250.291 368.974 250.142 369.121 249.993 369.268 cv
249.844 369.121 249.695 368.974 249.695 368.974 cv
238.069 357.536 li
236.712 360.326 li
230.577 372.944 214.626 377.108 203.106 369.099 cv
197.682 365.327 li
206.65 397.304 li
206.65 397.304 228.322 397.304 249.993 397.304 cv
271.665 397.304 293.336 397.304 293.336 397.304 cv
302.305 365.327 li
296.88 369.099 li
285.36 377.108 269.41 372.944 263.274 360.326 cv
cp
f
250.014 334.838 mo
262.792 347.616 li
250.014 360.394 li
237.236 347.616 li
250.014 334.838 li
cp
249.993 363.788 mo
266.186 347.595 li
249.993 331.403 li
233.801 347.595 li
249.993 363.788 li
cp
f
258.095 347.595 mo
249.993 355.697 li
241.892 347.595 li
249.993 339.494 li
258.095 347.595 li
cp
250.014 358.98 mo
261.378 347.616 li
250.014 336.252 li
238.65 347.616 li
250.014 358.98 li
cp
f
272.983 135.419 mo
273.283 135.315 273.646 135.159 273.981 134.873 cv
274.32 134.599 274.638 134.211 274.843 133.739 cv
275.047 133.28 275.127 132.685 275.05 132.213 cv
274.986 131.619 274.754 131.156 274.437 130.749 cv
274.115 130.353 273.714 130.059 273.295 129.865 cv
273.082 129.773 272.867 129.705 272.651 129.652 cv
272.397 129.614 272.378 129.596 271.977 129.583 cv
271.969 129.584 li
271.948 129.584 li
271.907 129.586 li
271.823 129.587 li
271.767 129.584 271.712 129.593 271.657 129.601 cv
271.546 129.609 271.44 129.636 271.328 129.649 cv
271.113 129.703 270.895 129.766 270.682 129.86 cv
270.259 130.052 269.858 130.348 269.535 130.746 cv
269.387 130.936 269.225 131.19 269.137 131.388 cv
269.078 131.466 269.042 131.664 268.999 131.816 cv
268.967 131.891 268.941 132.063 268.92 132.184 cv
268.85 132.716 268.927 133.269 269.135 133.741 cv
269.34 134.213 269.659 134.6 269.998 134.875 cv
270.334 135.16 270.697 135.315 270.998 135.42 cv
271.301 135.524 271.555 135.549 271.726 135.565 cv
271.898 135.577 271.99 135.583 271.99 135.583 cv
271.99 135.583 272.082 135.577 272.254 135.565 cv
272.424 135.549 272.679 135.524 272.983 135.419 cv
cp
f
228.983 135.419 mo
229.283 135.315 229.646 135.159 229.981 134.873 cv
230.32 134.599 230.638 134.211 230.843 133.739 cv
231.047 133.28 231.127 132.685 231.05 132.213 cv
230.986 131.619 230.754 131.156 230.437 130.749 cv
230.115 130.353 229.714 130.059 229.295 129.865 cv
229.082 129.773 228.867 129.705 228.651 129.652 cv
228.539 129.64 228.424 129.608 228.364 129.607 cv
228.377 129.59 228.001 129.588 227.99 129.583 cv
227.541 129.579 227.111 129.677 226.682 129.86 cv
226.259 130.052 225.858 130.348 225.535 130.746 cv
225.387 130.936 225.225 131.19 225.137 131.388 cv
225.078 131.466 225.042 131.664 224.999 131.816 cv
224.967 131.891 224.941 132.063 224.92 132.184 cv
224.85 132.716 224.927 133.269 225.135 133.741 cv
225.34 134.213 225.659 134.6 225.998 134.875 cv
226.334 135.16 226.697 135.315 226.998 135.42 cv
227.301 135.524 227.555 135.549 227.726 135.565 cv
227.898 135.577 227.99 135.583 227.99 135.583 cv
227.99 135.583 228.082 135.577 228.254 135.565 cv
228.424 135.549 228.679 135.524 228.983 135.419 cv
cp
f
250.983 133.086 mo
251.283 132.982 251.646 132.826 251.981 132.54 cv
252.32 132.265 252.638 131.878 252.843 131.406 cv
253.047 130.947 253.127 130.351 253.05 129.88 cv
252.986 129.286 252.754 128.823 252.437 128.416 cv
252.115 128.02 251.714 127.726 251.295 127.531 cv
251.082 127.439 250.867 127.371 250.651 127.319 cv
250.539 127.307 250.424 127.275 250.364 127.274 cv
250.377 127.256 250.001 127.255 249.99 127.249 cv
249.541 127.245 249.111 127.344 248.682 127.526 cv
248.259 127.718 247.858 128.015 247.535 128.413 cv
247.387 128.603 247.225 128.857 247.137 129.054 cv
247.078 129.133 247.042 129.33 246.999 129.483 cv
246.967 129.558 246.941 129.73 246.92 129.851 cv
246.85 130.383 246.927 130.936 247.135 131.408 cv
247.34 131.88 247.659 132.267 247.998 132.541 cv
248.334 132.827 248.697 132.982 248.998 133.086 cv
249.301 133.191 249.555 133.215 249.726 133.231 cv
249.898 133.243 249.99 133.25 249.99 133.25 cv
249.99 133.25 250.082 133.243 250.254 133.231 cv
250.424 133.215 250.679 133.191 250.983 133.086 cv
cp
f
249.993 156.168 mo
223.754 156.168 207.643 160.781 207.643 164.088 cv
207.643 167.392 223.754 171.998 249.993 171.998 cv
276.226 171.998 292.333 167.392 292.333 164.088 cv
292.333 160.781 276.226 156.168 249.993 156.168 cv
cp
f
292.803 148.707 mo
292.422 149.18 291.798 149.408 291.326 149.557 cv
290.835 149.72 290.458 149.782 290.458 149.782 cv
290.458 149.782 290.326 149.417 290.223 148.919 cv
290.129 148.414 290.059 147.775 290.316 147.227 cv
290.799 146.089 292.644 145.933 292.678 145.979 cv
292.678 145.979 292.924 146.413 293.052 146.966 cv
293.197 147.557 293.185 148.234 292.803 148.707 cv
cp
292.325 151.39 mo
291.148 151.315 290.091 151.783 289.021 152.244 cv
288.907 151.083 288.483 149.833 287.956 148.614 cv
288.959 148.186 li
289.273 148.944 289.804 149.504 290.413 149.859 cv
291.038 150.212 291.698 150.363 292.521 150.38 cv
292.506 150.749 292.462 151.092 292.325 151.39 cv
cp
283.445 150.165 mo
282.825 149.016 282.139 147.871 281.412 146.741 cv
282.34 146.158 li
283.225 147.531 284.953 147.993 286.405 147.257 cv
286.899 148.229 li
285.699 148.829 284.559 149.478 283.445 150.165 cv
cp
285.326 143.159 mo
285.326 143.159 286.391 144.482 286.031 145.645 cv
285.857 146.228 285.386 146.665 284.971 146.959 cv
284.555 147.25 284.184 147.412 284.184 147.412 cv
284.184 147.412 283.199 146.133 283.475 144.958 cv
283.753 143.765 285.326 143.159 285.326 143.159 cv
cp
277 148.789 mo
276.243 147.701 275.458 146.611 274.645 145.537 cv
275.528 144.886 li
276.511 146.192 278.321 146.495 279.68 145.596 cv
280.294 146.503 li
279.17 147.245 278.073 148.011 277 148.789 cv
cp
270.339 147.86 mo
269.512 146.817 268.666 145.766 267.799 144.735 cv
268.649 144.039 li
269.696 145.296 271.536 145.499 272.835 144.512 cv
273.508 145.379 li
272.434 146.191 271.377 147.025 270.339 147.86 cv
cp
272.196 142.992 mo
272.045 144.198 270.658 145.027 270.658 145.027 cv
270.658 145.027 269.489 143.912 269.611 142.701 cv
269.732 141.492 271.15 140.651 271.15 140.651 cv
271.15 140.651 272.348 141.785 272.196 142.992 cv
cp
267.486 131.74 mo
267.464 131.569 267.425 131.436 267.431 131.188 cv
267.422 130.725 267.473 130.326 267.591 129.883 cv
267.826 129.016 268.369 128.175 269.152 127.559 cv
269.544 127.253 269.995 127.011 270.478 126.841 cv
270.721 126.762 270.969 126.687 271.224 126.655 cv
271.351 126.634 271.478 126.613 271.606 126.607 cv
271.798 126.595 li
271.894 126.589 li
271.942 126.586 li
271.966 126.585 li
272.066 126.586 li
272.325 126.59 273.069 126.667 273.503 126.837 cv
273.986 127.009 274.439 127.247 274.832 127.554 cv
275.618 128.168 276.161 129.012 276.397 129.879 cv
276.638 130.736 276.584 131.642 276.379 132.303 cv
276.152 133.089 275.779 133.634 275.373 134.094 cv
274.541 134.987 273.622 135.33 272.997 135.47 cv
272.68 135.54 272.427 135.571 272.255 135.575 cv
272.082 135.58 271.99 135.583 271.99 135.583 cv
271.99 135.583 271.898 135.58 271.726 135.575 cv
271.554 135.571 271.3 135.54 270.984 135.469 cv
270.358 135.33 269.441 134.985 268.61 134.092 cv
268.207 133.644 267.832 133.057 267.611 132.332 cv
267.563 132.139 267.516 131.989 267.486 131.74 cv
cp
278.218 141.638 mo
278.218 141.638 279.363 142.843 279.136 144.037 cv
278.909 145.232 277.479 145.978 277.479 145.978 cv
277.479 145.978 276.376 144.801 276.56 143.598 cv
276.744 142.397 278.218 141.638 278.218 141.638 cv
cp
263.59 147.255 mo
262.715 146.236 261.823 145.238 260.917 144.232 cv
261.739 143.507 li
262.835 144.717 264.688 144.843 265.941 143.798 cv
266.654 144.631 li
265.617 145.5 264.597 146.367 263.59 147.255 cv
cp
264.092 140.018 mo
264.092 140.018 265.332 141.09 265.235 142.307 cv
265.139 143.514 263.787 144.41 263.787 144.41 cv
263.787 144.41 262.572 143.337 262.644 142.127 cv
262.716 140.91 264.092 140.018 264.092 140.018 cv
cp
256.799 146.908 mo
254.017 143.984 li
254.813 143.229 li
255.951 144.402 257.811 144.463 259.024 143.368 cv
259.768 144.176 li
258.765 145.075 257.775 145.993 256.799 146.908 cv
cp
250.997 133.136 mo
250.68 133.206 250.427 133.238 250.255 133.242 cv
250.082 133.247 249.99 133.25 249.99 133.25 cv
249.99 133.25 249.898 133.247 249.726 133.242 cv
249.554 133.238 249.3 133.206 248.984 133.136 cv
248.358 132.996 247.441 132.651 246.61 131.759 cv
246.207 131.311 245.832 130.724 245.611 129.998 cv
245.563 129.805 245.516 129.656 245.486 129.407 cv
245.464 129.236 245.425 129.103 245.431 128.855 cv
245.422 128.392 245.473 127.993 245.591 127.55 cv
245.826 126.683 246.369 125.842 247.152 125.226 cv
247.932 124.604 248.964 124.262 249.99 124.251 cv
250.346 124.27 250.34 124.26 250.715 124.315 cv
251.022 124.355 251.26 124.424 251.503 124.504 cv
251.986 124.675 252.439 124.913 252.832 125.221 cv
253.618 125.835 254.161 126.678 254.397 127.546 cv
254.638 128.402 254.584 129.309 254.379 129.969 cv
254.152 130.756 253.779 131.3 253.373 131.761 cv
252.541 132.653 251.622 132.996 250.997 133.136 cv
cp
248.691 141.749 mo
248.681 140.534 249.988 139.541 249.988 139.541 cv
249.988 139.541 251.295 140.534 251.285 141.749 cv
251.275 142.965 249.988 143.944 249.988 143.944 cv
249.988 143.944 248.701 142.965 248.691 141.749 cv
cp
249.988 146.796 mo
247.111 143.966 li
247.882 143.183 li
249.057 144.32 250.919 144.32 252.095 143.183 cv
252.866 143.966 li
249.988 146.796 li
cp
243.178 146.908 mo
242.201 145.993 241.212 145.075 240.209 144.176 cv
240.953 143.368 li
242.166 144.463 244.026 144.402 245.163 143.229 cv
245.96 143.984 li
243.178 146.908 li
cp
242.938 139.658 mo
242.938 139.658 244.278 140.605 244.307 141.821 cv
244.337 143.036 243.083 144.059 243.083 144.059 cv
243.083 144.059 241.765 143.121 241.714 141.906 cv
241.663 140.691 242.938 139.658 242.938 139.658 cv
cp
257.039 139.658 mo
257.039 139.658 258.314 140.691 258.263 141.906 cv
258.211 143.121 256.893 144.059 256.893 144.059 cv
256.893 144.059 255.64 143.036 255.669 141.821 cv
255.699 140.605 257.039 139.658 257.039 139.658 cv
cp
236.386 147.255 mo
235.379 146.367 234.359 145.5 233.322 144.631 cv
234.035 143.798 li
235.288 144.843 237.141 144.717 238.238 143.507 cv
239.06 144.232 li
238.154 145.238 237.261 146.236 236.386 147.255 cv
cp
235.884 140.018 mo
235.884 140.018 237.26 140.91 237.332 142.127 cv
237.404 143.337 236.189 144.41 236.189 144.41 cv
236.189 144.41 234.837 143.514 234.741 142.307 cv
234.645 141.09 235.884 140.018 235.884 140.018 cv
cp
232.379 132.303 mo
232.152 133.089 231.779 133.634 231.373 134.094 cv
230.541 134.987 229.622 135.33 228.997 135.47 cv
228.68 135.54 228.427 135.571 228.255 135.575 cv
228.082 135.58 227.99 135.583 227.99 135.583 cv
227.99 135.583 227.898 135.58 227.726 135.575 cv
227.554 135.571 227.3 135.54 226.984 135.469 cv
226.358 135.33 225.441 134.985 224.61 134.092 cv
224.207 133.644 223.832 133.057 223.611 132.332 cv
223.563 132.139 223.516 131.989 223.486 131.74 cv
223.464 131.569 223.425 131.436 223.431 131.188 cv
223.422 130.725 223.473 130.326 223.591 129.883 cv
223.826 129.016 224.369 128.175 225.152 127.559 cv
225.932 126.938 226.964 126.596 227.99 126.584 cv
228.346 126.604 228.34 126.594 228.715 126.649 cv
229.022 126.688 229.26 126.758 229.503 126.837 cv
229.986 127.009 230.439 127.247 230.832 127.554 cv
231.618 128.168 232.161 129.012 232.397 129.879 cv
232.638 130.736 232.584 131.642 232.379 132.303 cv
cp
227.78 142.992 mo
227.629 141.785 228.827 140.651 228.827 140.651 cv
228.827 140.651 230.245 141.492 230.366 142.701 cv
230.487 143.912 229.319 145.027 229.319 145.027 cv
229.319 145.027 227.931 144.198 227.78 142.992 cv
cp
229.637 147.86 mo
228.599 147.025 227.543 146.191 226.469 145.379 cv
227.141 144.512 li
228.441 145.499 230.28 145.296 231.327 144.039 cv
232.177 144.735 li
231.311 145.766 230.465 146.817 229.637 147.86 cv
cp
222.977 148.789 mo
221.903 148.011 220.807 147.245 219.683 146.503 cv
220.296 145.596 li
221.655 146.495 223.465 146.192 224.448 144.886 cv
225.332 145.537 li
224.519 146.611 223.734 147.701 222.977 148.789 cv
cp
221.758 141.638 mo
221.758 141.638 223.233 142.397 223.417 143.598 cv
223.601 144.801 222.498 145.978 222.498 145.978 cv
222.498 145.978 221.067 145.232 220.841 144.037 cv
220.614 142.843 221.758 141.638 221.758 141.638 cv
cp
216.532 150.165 mo
215.418 149.478 214.278 148.829 213.078 148.229 cv
213.571 147.257 li
215.024 147.993 216.751 147.531 217.636 146.158 cv
218.564 146.741 li
217.837 147.871 217.152 149.016 216.532 150.165 cv
cp
210.955 152.244 mo
209.886 151.783 208.828 151.315 207.651 151.39 cv
207.514 151.092 207.471 150.749 207.456 150.38 cv
208.279 150.363 208.938 150.212 209.563 149.859 cv
210.172 149.504 210.703 148.944 211.017 148.186 cv
212.02 148.614 li
211.493 149.833 211.07 151.083 210.955 152.244 cv
cp
206.924 146.966 mo
207.053 146.413 207.299 145.979 207.299 145.979 cv
207.332 145.933 209.178 146.089 209.661 147.227 cv
209.918 147.775 209.847 148.414 209.753 148.919 cv
209.65 149.417 209.518 149.782 209.518 149.782 cv
209.518 149.782 209.141 149.72 208.65 149.557 cv
208.178 149.408 207.555 149.18 207.173 148.707 cv
206.791 148.234 206.78 147.557 206.924 146.966 cv
cp
214.651 143.159 mo
214.651 143.159 216.223 143.765 216.501 144.958 cv
216.777 146.133 215.793 147.412 215.793 147.412 cv
215.793 147.412 215.421 147.25 215.006 146.959 cv
214.59 146.665 214.12 146.228 213.945 145.645 cv
213.586 144.482 214.651 143.159 214.651 143.159 cv
cp
307.383 107.729 mo
304.225 107.729 301.664 110.29 301.664 113.448 cv
301.664 114.951 302.248 116.314 303.196 117.335 cv
291.603 128.118 li
288.633 130.868 283.813 128.729 283.863 124.678 cv
284.24 95.5036 li
284.268 95.504 284.295 95.5078 284.323 95.5078 cv
287.482 95.5078 290.043 92.9471 290.043 89.7885 cv
290.043 86.6298 287.482 84.0692 284.323 84.0692 cv
281.165 84.0692 278.604 86.6298 278.604 89.7885 cv
278.604 91.8454 279.693 93.6434 281.323 94.6511 cv
267.373 117.338 li
265.223 120.838 259.903 119.979 258.963 115.968 cv
251.292 83.1039 li
253.824 82.5149 255.713 80.2496 255.713 77.5385 cv
255.713 74.3798 253.152 71.8192 249.993 71.8192 cv
246.835 71.8192 244.274 74.3798 244.274 77.5385 cv
244.274 80.2491 246.162 82.5141 248.693 83.1036 cv
241.013 115.968 li
240.083 119.979 234.763 120.838 232.613 117.338 cv
218.657 94.6548 li
220.29 93.6478 221.383 91.848 221.383 89.7885 cv
221.383 86.6298 218.822 84.0692 215.663 84.0692 cv
212.505 84.0692 209.944 86.6298 209.944 89.7885 cv
209.944 92.9471 212.505 95.5078 215.663 95.5078 cv
215.688 95.5078 215.712 95.5044 215.737 95.5041 cv
216.113 124.678 li
216.173 128.729 211.343 130.868 208.383 128.118 cv
196.788 117.338 li
197.737 116.317 198.323 114.953 198.323 113.448 cv
198.323 110.29 195.762 107.729 192.603 107.729 cv
189.445 107.729 186.884 110.29 186.884 113.448 cv
186.884 116.607 189.445 119.168 192.603 119.168 cv
193.133 119.168 193.643 119.09 194.13 118.955 cv
206.173 162.391 li
207.6 160.157 211.94 158.281 219.139 156.8 cv
227.39 155.103 238.347 154.168 249.993 154.168 cv
261.639 154.168 272.594 155.103 280.842 156.8 cv
288.038 158.281 292.377 160.157 293.804 162.391 cv
305.847 118.953 li
306.337 119.089 306.85 119.168 307.383 119.168 cv
310.542 119.168 313.103 116.607 313.103 113.448 cv
313.103 110.29 310.542 107.729 307.383 107.729 cv
cp
f
359.431 408.181 mo
446.111 408.181 li
446.111 400.491 li
359.431 400.491 li
359.431 408.181 li
cp
f
403.271 356.562 mo
403.271 383.125 li
417.175 383.125 li
416.994 368.361 408.876 357.202 403.271 356.562 cv
cp
f
398.671 356.969 mo
393.11 358.078 386.869 361.266 381.982 365.874 cv
380.838 366.953 379.766 368.104 378.798 369.329 cv
375.661 373.298 373.593 377.995 373.465 383.125 cv
387.368 383.125 li
387.516 370.418 393.241 360.529 398.671 356.969 cv
cp
f
388.368 383.125 mo
402.271 383.125 li
402.271 356.562 li
396.666 357.202 388.549 368.361 388.368 383.125 cv
cp
f
423.561 365.874 mo
418.674 361.266 412.433 358.078 406.872 356.969 cv
412.302 360.529 418.027 370.418 418.175 383.125 cv
432.079 383.125 li
431.951 377.995 429.882 373.298 426.745 369.328 cv
425.777 368.103 424.704 366.952 423.561 365.874 cv
cp
f
402.771 336.882 mo
404.201 336.882 405.361 338.041 405.361 339.471 cv
405.361 340.901 404.201 342.06 402.771 342.06 cv
401.342 342.06 400.182 340.901 400.182 339.471 cv
400.182 338.041 401.342 336.882 402.771 336.882 cv
cp
406.551 343.362 mo
407.567 342.374 408.202 340.996 408.202 339.471 cv
408.202 336.477 405.765 334.041 402.771 334.041 cv
399.777 334.041 397.341 336.477 397.341 339.471 cv
397.341 340.996 397.976 342.374 398.992 343.362 cv
399.97 344.313 401.303 344.901 402.771 344.901 cv
404.24 344.901 405.572 344.313 406.551 343.362 cv
cp
f
447.146 384.125 mo
358.396 384.125 li
358.396 383.125 li
372.463 383.125 li
372.598 377.372 375.057 371.743 379.517 366.881 cv
380.502 365.808 381.589 364.774 382.765 363.783 cv
382.867 363.696 382.963 363.607 383.067 363.521 cv
389.037 358.593 396.587 355.53 402.771 355.53 cv
408.955 355.53 416.506 358.593 422.476 363.521 cv
422.579 363.607 422.676 363.696 422.778 363.782 cv
423.953 364.774 425.041 365.807 426.026 366.881 cv
430.486 371.743 432.945 377.372 433.08 383.125 cv
447.146 383.125 li
447.146 384.125 li
cp
444.521 396.471 mo
438.561 396.471 li
426.632 396.471 li
414.702 396.471 li
402.771 396.471 li
390.841 396.471 li
378.911 396.471 li
366.981 396.471 li
361.021 396.471 li
361.021 390.041 li
366.981 396.471 li
372.952 390.051 li
378.911 396.471 li
384.882 390.051 li
390.841 396.471 li
396.811 390.051 li
402.771 396.471 li
408.731 390.041 li
414.702 396.471 li
420.661 390.041 li
426.632 396.471 li
432.591 390.041 li
438.561 396.471 li
444.521 390.041 li
444.521 396.471 li
cp
395.694 346.725 mo
397.522 348.508 400.017 349.611 402.771 349.611 cv
405.526 349.611 408.021 348.508 409.849 346.725 cv
414.15 349.022 417.414 353.206 419.791 357.447 cv
415.21 355.204 409.592 353.661 402.771 353.661 cv
395.951 353.661 390.332 355.204 385.752 357.447 cv
388.128 353.206 391.392 349.022 395.694 346.725 cv
cp
396.341 339.471 mo
396.341 335.926 399.226 333.041 402.771 333.041 cv
406.317 333.041 409.202 335.926 409.202 339.471 cv
409.202 341.07 408.611 342.531 407.641 343.658 cv
407.092 344.295 406.421 344.822 405.664 345.206 cv
404.793 345.647 403.812 345.901 402.771 345.901 cv
401.73 345.901 400.75 345.647 399.879 345.206 cv
399.122 344.822 398.45 344.295 397.901 343.658 cv
396.932 342.531 396.341 341.07 396.341 339.471 cv
cp
455.221 362.577 mo
453.7 362.577 452.467 363.81 452.467 365.331 cv
452.467 365.781 452.586 366.2 452.777 366.575 cv
436.892 374.661 li
436.892 374.661 432.971 365.44 422.992 359.218 cv
422.592 358.386 422.159 357.54 421.69 356.691 cv
418.696 351.271 415.132 347.402 411.158 345.169 cv
412.264 343.545 412.911 341.584 412.911 339.471 cv
412.911 333.871 408.371 329.331 402.771 329.331 cv
397.171 329.331 392.632 333.871 392.632 339.471 cv
392.632 341.584 393.279 343.544 394.385 345.169 cv
390.411 347.401 386.846 351.271 383.852 356.691 cv
383.384 357.54 382.951 358.386 382.55 359.219 cv
372.572 365.44 368.651 374.661 368.651 374.661 cv
352.766 366.575 li
352.957 366.2 353.076 365.781 353.076 365.331 cv
353.076 363.81 351.843 362.577 350.322 362.577 cv
348.8 362.577 347.567 363.81 347.567 365.331 cv
347.567 366.852 348.8 368.085 350.322 368.085 cv
350.576 368.085 350.818 368.039 351.052 367.975 cv
359.431 398.301 li
446.111 398.301 li
454.491 367.975 li
454.725 368.039 454.967 368.085 455.221 368.085 cv
456.743 368.085 457.976 366.852 457.976 365.331 cv
457.976 363.81 456.743 362.577 455.221 362.577 cv
cp
f
177.12 473.5 mo
177.12 473.939 177.188 474.313 177.325 474.622 cv
177.461 474.931 177.648 475.163 177.886 475.319 cv
178.123 475.475 178.382 475.554 178.663 475.554 cv
178.948 475.554 179.208 475.48 179.444 475.331 cv
179.679 475.183 179.867 474.955 180.008 474.649 cv
180.148 474.342 180.218 473.958 180.218 473.5 cv
180.218 473.068 180.148 472.697 180.008 472.385 cv
179.867 472.075 179.678 471.839 179.438 471.674 cv
179.198 471.51 178.936 471.428 178.652 471.428 cv
178.355 471.428 178.09 471.513 177.856 471.68 cv
177.622 471.848 177.442 472.089 177.313 472.404 cv
177.184 472.719 177.12 473.084 177.12 473.5 cv
cp
180.308 475.88 mo
180.308 475.719 li
180.09 475.968 179.875 476.172 179.664 476.327 cv
179.452 476.485 179.222 476.603 178.975 476.684 cv
178.728 476.767 178.458 476.806 178.165 476.806 cv
177.777 476.806 177.417 476.724 177.087 476.56 cv
176.757 476.396 176.471 476.161 176.23 475.856 cv
175.988 475.552 175.805 475.194 175.68 474.782 cv
175.556 474.37 175.493 473.925 175.493 473.446 cv
175.493 472.433 175.741 471.643 176.235 471.077 cv
176.73 470.512 177.381 470.228 178.189 470.228 cv
178.655 470.228 179.049 470.309 179.37 470.469 cv
179.69 470.629 180.003 470.877 180.308 471.207 cv
180.308 468.816 li
180.308 468.483 180.374 468.233 180.507 468.062 cv
180.639 467.892 180.828 467.807 181.073 467.807 cv
181.319 467.807 181.507 467.885 181.64 468.041 cv
181.773 468.198 181.839 468.428 181.839 468.733 cv
181.839 475.88 li
181.839 476.189 181.768 476.42 181.625 476.575 cv
181.483 476.729 181.299 476.806 181.073 476.806 cv
180.852 476.806 180.669 476.726 180.524 476.566 cv
180.38 476.405 180.308 476.177 180.308 475.88 cv
cp
f
184.284 472.99 mo
187.223 472.99 li
187.184 472.436 187.033 472.021 186.774 471.746 cv
186.515 471.47 186.174 471.333 185.751 471.333 cv
185.347 471.333 185.015 471.472 184.756 471.751 cv
184.497 472.03 184.34 472.443 184.284 472.99 cv
cp
187.454 473.91 mo
184.284 473.91 li
184.288 474.278 184.362 474.602 184.507 474.883 cv
184.651 475.164 184.843 475.376 185.083 475.518 cv
185.322 475.661 185.586 475.731 185.875 475.731 cv
186.069 475.731 186.246 475.71 186.406 475.664 cv
186.567 475.618 186.722 475.547 186.873 475.449 cv
187.023 475.353 187.161 475.249 187.288 475.138 cv
187.414 475.027 187.578 474.876 187.781 474.687 cv
187.864 474.616 187.983 474.579 188.137 474.579 cv
188.303 474.579 188.438 474.625 188.54 474.717 cv
188.643 474.809 188.695 474.936 188.695 475.103 cv
188.695 475.249 188.637 475.419 188.523 475.616 cv
188.407 475.812 188.234 476 188.003 476.179 cv
187.771 476.36 187.481 476.509 187.13 476.627 cv
186.781 476.747 186.378 476.806 185.922 476.806 cv
184.882 476.806 184.072 476.509 183.495 475.916 cv
182.917 475.323 182.628 474.517 182.628 473.5 cv
182.628 473.02 182.699 472.576 182.842 472.167 cv
182.984 471.757 183.192 471.406 183.465 471.114 cv
183.738 470.821 184.074 470.596 184.474 470.44 cv
184.874 470.283 185.317 470.205 185.804 470.205 cv
186.437 470.205 186.98 470.338 187.433 470.606 cv
187.886 470.873 188.226 471.219 188.451 471.641 cv
188.676 472.064 188.79 472.497 188.79 472.935 cv
188.79 473.344 188.673 473.607 188.44 473.728 cv
188.207 473.849 187.878 473.91 187.454 473.91 cv
cp
f
194.838 474.687 mo
194.838 475.133 194.73 475.517 194.512 475.835 cv
194.294 476.154 193.973 476.396 193.547 476.56 cv
193.122 476.724 192.604 476.806 191.995 476.806 cv
191.413 476.806 190.914 476.717 190.499 476.538 cv
190.083 476.361 189.776 476.138 189.579 475.872 cv
189.381 475.603 189.282 475.336 189.282 475.066 cv
189.282 474.888 189.345 474.737 189.472 474.61 cv
189.599 474.484 189.759 474.42 189.953 474.42 cv
190.123 474.42 190.253 474.462 190.344 474.545 cv
190.436 474.628 190.523 474.745 190.605 474.894 cv
190.772 475.185 190.971 475.398 191.203 475.542 cv
191.434 475.684 191.749 475.756 192.149 475.756 cv
192.474 475.756 192.74 475.683 192.948 475.539 cv
193.155 475.393 193.259 475.228 193.259 475.043 cv
193.259 474.757 193.152 474.551 192.936 474.42 cv
192.72 474.29 192.365 474.164 191.87 474.046 cv
191.312 473.908 190.858 473.761 190.508 473.609 cv
190.157 473.457 189.877 473.256 189.668 473.007 cv
189.458 472.758 189.353 472.45 189.353 472.086 cv
189.353 471.763 189.45 471.455 189.644 471.166 cv
189.838 470.878 190.124 470.647 190.502 470.475 cv
190.88 470.303 191.336 470.216 191.87 470.216 cv
192.29 470.216 192.667 470.26 193.001 470.348 cv
193.335 470.434 193.615 470.552 193.838 470.698 cv
194.062 470.844 194.232 471.006 194.348 471.184 cv
194.465 471.363 194.523 471.536 194.523 471.707 cv
194.523 471.892 194.461 472.045 194.337 472.165 cv
194.212 472.282 194.035 472.343 193.805 472.343 cv
193.639 472.343 193.497 472.295 193.381 472.199 cv
193.264 472.105 193.131 471.962 192.98 471.773 cv
192.857 471.614 192.714 471.487 192.547 471.392 cv
192.381 471.297 192.155 471.25 191.87 471.25 cv
191.577 471.25 191.334 471.311 191.14 471.437 cv
190.946 471.562 190.849 471.717 190.849 471.902 cv
190.849 472.073 190.92 472.212 191.062 472.321 cv
191.205 472.431 191.397 472.521 191.639 472.592 cv
191.88 472.663 192.212 472.749 192.636 472.852 cv
193.138 472.975 193.549 473.122 193.868 473.291 cv
194.186 473.461 194.427 473.662 194.592 473.894 cv
194.756 474.126 194.838 474.39 194.838 474.687 cv
cp
f
197.295 471.137 mo
197.295 475.821 li
197.295 476.145 197.218 476.391 197.064 476.557 cv
196.909 476.723 196.714 476.806 196.476 476.806 cv
196.238 476.806 196.045 476.721 195.897 476.551 cv
195.748 476.381 195.675 476.137 195.675 475.821 cv
195.675 471.184 li
195.675 470.865 195.748 470.623 195.897 470.46 cv
196.045 470.298 196.238 470.216 196.476 470.216 cv
196.714 470.216 196.909 470.298 197.064 470.46 cv
197.218 470.623 197.295 470.849 197.295 471.137 cv
cp
196.494 469.463 mo
196.268 469.463 196.075 469.394 195.915 469.256 cv
195.755 469.118 195.675 468.921 195.675 468.667 cv
195.675 468.438 195.757 468.25 195.921 468.101 cv
196.085 467.952 196.276 467.877 196.494 467.877 cv
196.704 467.877 196.889 467.945 197.052 468.08 cv
197.214 468.214 197.295 468.41 197.295 468.667 cv
197.295 468.918 197.216 469.112 197.057 469.252 cv
196.899 469.392 196.711 469.463 196.494 469.463 cv
cp
f
199.699 473.458 mo
199.699 474.115 199.842 474.612 200.129 474.948 cv
200.416 475.285 200.787 475.453 201.242 475.453 cv
201.511 475.453 201.765 475.38 202.005 475.236 cv
202.244 475.092 202.439 474.873 202.59 474.583 cv
202.74 474.292 202.815 473.939 202.815 473.523 cv
202.815 472.863 202.67 472.348 202.379 471.98 cv
202.088 471.613 201.705 471.428 201.23 471.428 cv
200.767 471.428 200.396 471.604 200.117 471.957 cv
199.838 472.309 199.699 472.809 199.699 473.458 cv
cp
204.395 471.404 mo
204.395 476.111 li
204.395 476.649 204.337 477.113 204.222 477.501 cv
204.108 477.888 203.923 478.21 203.67 478.462 cv
203.417 478.715 203.085 478.904 202.676 479.026 cv
202.266 479.149 201.757 479.21 201.147 479.21 cv
200.589 479.21 200.09 479.132 199.651 478.976 cv
199.212 478.819 198.874 478.617 198.636 478.371 cv
198.399 478.123 198.28 477.869 198.28 477.608 cv
198.28 477.41 198.347 477.248 198.482 477.124 cv
198.616 476.999 198.779 476.936 198.968 476.936 cv
199.206 476.936 199.414 477.041 199.592 477.251 cv
199.678 477.357 199.768 477.466 199.862 477.575 cv
199.955 477.685 200.058 477.777 200.17 477.854 cv
200.283 477.931 200.419 477.989 200.577 478.026 cv
200.735 478.063 200.918 478.082 201.123 478.082 cv
201.543 478.082 201.868 478.024 202.1 477.907 cv
202.332 477.791 202.494 477.627 202.587 477.417 cv
202.68 477.208 202.734 476.984 202.75 476.743 cv
202.766 476.504 202.778 476.12 202.785 475.589 cv
202.536 475.938 202.249 476.203 201.922 476.384 cv
201.595 476.566 201.206 476.658 200.755 476.658 cv
200.213 476.658 199.739 476.519 199.333 476.242 cv
198.928 475.965 198.616 475.578 198.399 475.078 cv
198.181 474.579 198.073 474.004 198.073 473.351 cv
198.073 472.865 198.139 472.425 198.271 472.034 cv
198.404 471.641 198.593 471.311 198.838 471.042 cv
199.083 470.773 199.366 470.57 199.687 470.434 cv
200.007 470.297 200.359 470.228 200.744 470.228 cv
201.202 470.228 201.6 470.318 201.937 470.492 cv
202.273 470.669 202.586 470.945 202.875 471.321 cv
202.875 471.101 li
202.875 470.821 202.944 470.603 203.082 470.448 cv
203.221 470.294 203.399 470.216 203.617 470.216 cv
203.929 470.216 204.137 470.319 204.24 470.523 cv
204.343 470.727 204.395 471.021 204.395 471.404 cv
cp
f
206.97 471.114 mo
206.97 471.309 li
207.254 470.933 207.566 470.657 207.905 470.481 cv
208.243 470.305 208.632 470.216 209.071 470.216 cv
209.499 470.216 209.88 470.31 210.217 470.496 cv
210.553 470.683 210.805 470.945 210.971 471.284 cv
211.078 471.483 211.147 471.697 211.178 471.927 cv
211.21 472.156 211.227 472.449 211.227 472.805 cv
211.227 475.821 li
211.227 476.145 211.152 476.391 211.004 476.557 cv
210.855 476.723 210.662 476.806 210.425 476.806 cv
210.183 476.806 209.988 476.721 209.837 476.551 cv
209.686 476.381 209.612 476.137 209.612 475.821 cv
209.612 473.119 li
209.612 472.586 209.537 472.177 209.389 471.894 cv
209.24 471.612 208.945 471.469 208.501 471.469 cv
208.213 471.469 207.949 471.555 207.712 471.728 cv
207.474 471.9 207.3 472.137 207.189 472.437 cv
207.11 472.678 207.071 473.129 207.071 473.791 cv
207.071 475.821 li
207.071 476.149 206.994 476.396 206.842 476.56 cv
206.69 476.724 206.493 476.806 206.252 476.806 cv
206.018 476.806 205.827 476.721 205.676 476.551 cv
205.526 476.381 205.45 476.137 205.45 475.821 cv
205.45 471.137 li
205.45 470.828 205.517 470.597 205.652 470.445 cv
205.787 470.293 205.971 470.216 206.204 470.216 cv
206.347 470.216 206.475 470.25 206.59 470.318 cv
206.705 470.386 206.797 470.486 206.866 470.62 cv
206.936 470.755 206.97 470.919 206.97 471.114 cv
cp
f
213.659 472.99 mo
216.598 472.99 li
216.558 472.436 216.409 472.021 216.15 471.746 cv
215.89 471.47 215.549 471.333 215.126 471.333 cv
214.722 471.333 214.39 471.472 214.131 471.751 cv
213.872 472.03 213.715 472.443 213.659 472.99 cv
cp
216.829 473.91 mo
213.659 473.91 li
213.664 474.278 213.737 474.602 213.882 474.883 cv
214.027 475.164 214.218 475.376 214.458 475.518 cv
214.697 475.661 214.961 475.731 215.25 475.731 cv
215.444 475.731 215.621 475.71 215.782 475.664 cv
215.942 475.618 216.097 475.547 216.248 475.449 cv
216.398 475.353 216.536 475.249 216.664 475.138 cv
216.79 475.027 216.954 474.876 217.156 474.687 cv
217.239 474.616 217.358 474.579 217.512 474.579 cv
217.678 474.579 217.813 474.625 217.916 474.717 cv
218.019 474.809 218.07 474.936 218.07 475.103 cv
218.07 475.249 218.013 475.419 217.898 475.616 cv
217.783 475.812 217.61 476 217.378 476.179 cv
217.146 476.36 216.856 476.509 216.506 476.627 cv
216.156 476.747 215.753 476.806 215.298 476.806 cv
214.257 476.806 213.448 476.509 212.869 475.916 cv
212.292 475.323 212.003 474.517 212.003 473.5 cv
212.003 473.02 212.074 472.576 212.217 472.167 cv
212.359 471.757 212.567 471.406 212.84 471.114 cv
213.113 470.821 213.45 470.596 213.849 470.44 cv
214.249 470.283 214.693 470.205 215.179 470.205 cv
215.812 470.205 216.355 470.338 216.808 470.606 cv
217.261 470.873 217.601 471.219 217.827 471.641 cv
218.052 472.064 218.165 472.497 218.165 472.935 cv
218.165 473.344 218.049 473.607 217.815 473.728 cv
217.582 473.849 217.253 473.91 216.829 473.91 cv
cp
f
220.248 473.5 mo
220.248 473.939 220.316 474.313 220.452 474.622 cv
220.589 474.931 220.776 475.163 221.014 475.319 cv
221.251 475.475 221.51 475.554 221.791 475.554 cv
222.076 475.554 222.337 475.48 222.572 475.331 cv
222.807 475.183 222.995 474.955 223.135 474.649 cv
223.276 474.342 223.346 473.958 223.346 473.5 cv
223.346 473.068 223.276 472.697 223.135 472.385 cv
222.995 472.075 222.805 471.839 222.566 471.674 cv
222.326 471.51 222.064 471.428 221.779 471.428 cv
221.483 471.428 221.217 471.513 220.984 471.68 cv
220.751 471.848 220.569 472.089 220.44 472.404 cv
220.312 472.719 220.248 473.084 220.248 473.5 cv
cp
223.435 475.88 mo
223.435 475.719 li
223.218 475.968 223.003 476.172 222.791 476.327 cv
222.579 476.485 222.35 476.603 222.103 476.684 cv
221.856 476.767 221.586 476.806 221.293 476.806 cv
220.904 476.806 220.545 476.724 220.215 476.56 cv
219.885 476.396 219.599 476.161 219.357 475.856 cv
219.116 475.552 218.933 475.194 218.808 474.782 cv
218.684 474.37 218.621 473.925 218.621 473.446 cv
218.621 472.433 218.869 471.643 219.363 471.077 cv
219.858 470.512 220.509 470.228 221.316 470.228 cv
221.783 470.228 222.177 470.309 222.498 470.469 cv
222.818 470.629 223.131 470.877 223.435 471.207 cv
223.435 468.816 li
223.435 468.483 223.502 468.233 223.634 468.062 cv
223.767 467.892 223.956 467.807 224.201 467.807 cv
224.447 467.807 224.635 467.885 224.768 468.041 cv
224.901 468.198 224.967 468.428 224.967 468.733 cv
224.967 475.88 li
224.967 476.189 224.896 476.42 224.754 476.575 cv
224.611 476.729 224.427 476.806 224.201 476.806 cv
223.98 476.806 223.797 476.726 223.652 476.566 cv
223.508 476.405 223.435 476.177 223.435 475.88 cv
cp
f
230.136 473.548 mo
230.136 474.192 230.284 474.688 230.578 475.033 cv
230.873 475.38 231.26 475.554 231.739 475.554 cv
232.146 475.554 232.498 475.377 232.792 475.022 cv
233.087 474.668 233.235 474.16 233.235 473.5 cv
233.235 473.073 233.174 472.704 233.051 472.395 cv
232.928 472.086 232.754 471.848 232.529 471.68 cv
232.303 471.513 232.04 471.428 231.739 471.428 cv
231.43 471.428 231.155 471.513 230.914 471.68 cv
230.672 471.848 230.483 472.091 230.344 472.41 cv
230.206 472.728 230.136 473.108 230.136 473.548 cv
cp
230.059 468.733 mo
230.059 471.207 li
230.364 470.891 230.674 470.648 230.991 470.481 cv
231.307 470.313 231.7 470.228 232.167 470.228 cv
232.705 470.228 233.176 470.357 233.583 470.611 cv
233.988 470.867 234.302 471.237 234.526 471.721 cv
234.75 472.206 234.862 472.781 234.862 473.446 cv
234.862 473.937 234.799 474.386 234.675 474.796 cv
234.55 475.207 234.369 475.562 234.132 475.862 cv
233.894 476.162 233.606 476.396 233.268 476.56 cv
232.929 476.724 232.556 476.806 232.149 476.806 cv
231.899 476.806 231.665 476.776 231.445 476.717 cv
231.225 476.658 231.038 476.58 230.884 476.482 cv
230.73 476.386 230.599 476.286 230.49 476.183 cv
230.381 476.081 230.237 475.926 230.059 475.719 cv
230.059 475.88 li
230.059 476.184 229.986 476.415 229.839 476.573 cv
229.693 476.729 229.507 476.806 229.281 476.806 cv
229.052 476.806 228.869 476.729 228.732 476.573 cv
228.596 476.415 228.528 476.184 228.528 475.88 cv
228.528 468.804 li
228.528 468.476 228.594 468.227 228.726 468.059 cv
228.859 467.891 229.044 467.807 229.281 467.807 cv
229.531 467.807 229.723 467.887 229.857 468.047 cv
229.992 468.208 230.059 468.435 230.059 468.733 cv
cp
f
236.963 477.008 mo
237.111 476.646 li
235.116 471.624 li
234.994 471.336 234.932 471.125 234.932 470.994 cv
234.932 470.856 234.968 470.728 235.039 470.609 cv
235.111 470.49 235.208 470.395 235.333 470.324 cv
235.458 470.252 235.587 470.216 235.722 470.216 cv
235.955 470.216 236.131 470.291 236.25 470.44 cv
236.369 470.587 236.474 470.8 236.565 471.077 cv
237.936 475.066 li
239.236 471.356 li
239.339 471.056 239.432 470.821 239.515 470.65 cv
239.598 470.48 239.686 470.365 239.779 470.307 cv
239.872 470.247 240.004 470.216 240.174 470.216 cv
240.297 470.216 240.415 470.249 240.527 470.315 cv
240.64 470.38 240.727 470.468 240.788 470.579 cv
240.849 470.69 240.881 470.806 240.881 470.929 cv
240.864 471.004 240.839 471.111 240.803 471.25 cv
240.767 471.388 240.724 471.53 240.673 471.671 cv
238.56 477.204 li
238.377 477.691 238.199 478.072 238.025 478.349 cv
237.851 478.626 237.621 478.839 237.333 478.987 cv
237.046 479.136 236.66 479.21 236.173 479.21 cv
235.698 479.21 235.342 479.159 235.105 479.057 cv
234.867 478.953 234.749 478.765 234.749 478.491 cv
234.749 478.306 234.805 478.162 234.918 478.062 cv
235.03 477.96 235.198 477.909 235.419 477.909 cv
235.506 477.909 235.592 477.921 235.675 477.946 cv
235.777 477.969 235.866 477.981 235.941 477.981 cv
236.127 477.981 236.274 477.954 236.381 477.898 cv
236.488 477.843 236.583 477.747 236.669 477.61 cv
236.754 477.475 236.852 477.273 236.963 477.008 cv
cp
f
260.439 470.357 mo
260.826 470.357 li
260.826 469.871 li
260.826 469.362 260.888 468.96 261.018 468.66 cv
261.145 468.361 261.365 468.144 261.672 468.007 cv
261.979 467.871 262.398 467.803 262.932 467.803 cv
263.882 467.803 264.353 468.033 264.353 468.499 cv
264.353 468.648 264.303 468.777 264.203 468.883 cv
264.106 468.99 263.988 469.043 263.854 469.043 cv
263.791 469.043 263.68 469.032 263.524 469.007 cv
263.376 468.986 263.242 468.971 263.135 468.971 cv
262.843 468.971 262.656 469.059 262.569 469.231 cv
262.49 469.403 262.447 469.649 262.447 469.971 cv
262.447 470.357 li
262.843 470.357 li
263.462 470.357 263.768 470.542 263.768 470.917 cv
263.768 471.178 263.689 471.348 263.523 471.42 cv
263.359 471.491 263.133 471.526 262.843 471.526 cv
262.447 471.526 li
262.447 475.821 li
262.447 476.14 262.372 476.383 262.217 476.551 cv
262.065 476.721 261.87 476.804 261.627 476.804 cv
261.398 476.804 261.208 476.721 261.053 476.551 cv
260.901 476.383 260.826 476.14 260.826 475.821 cv
260.826 471.526 li
260.379 471.526 li
260.137 471.526 259.953 471.474 259.822 471.363 cv
259.691 471.256 259.625 471.114 259.625 470.939 cv
259.625 470.55 259.896 470.357 260.439 470.357 cv
f
265.746 474.466 mo
265.746 475.821 li
265.746 476.148 265.663 476.396 265.511 476.558 cv
265.357 476.724 265.162 476.804 264.925 476.804 cv
264.687 476.804 264.496 476.723 264.347 476.554 cv
264.199 476.389 264.121 476.144 264.121 475.821 cv
264.121 471.306 li
264.121 470.578 264.383 470.214 264.909 470.214 cv
265.18 470.214 265.373 470.298 265.493 470.469 cv
265.611 470.64 265.677 470.89 265.691 471.223 cv
265.884 470.89 266.081 470.64 266.284 470.469 cv
266.492 470.298 266.76 470.214 267.102 470.214 cv
267.445 470.214 267.772 470.298 268.093 470.469 cv
268.415 470.64 268.575 470.867 268.575 471.146 cv
268.575 471.343 268.506 471.509 268.371 471.635 cv
268.233 471.765 268.087 471.83 267.93 471.83 cv
267.867 471.83 267.723 471.791 267.497 471.718 cv
267.269 471.647 267.066 471.609 266.896 471.609 cv
266.658 471.609 266.462 471.674 266.313 471.796 cv
266.162 471.924 266.044 472.106 265.961 472.35 cv
265.88 472.597 265.824 472.891 265.79 473.228 cv
265.759 473.566 265.746 473.98 265.746 474.466 cv
f
270.024 472.986 mo
272.962 472.986 li
272.923 472.433 272.777 472.018 272.517 471.745 cv
272.256 471.469 271.918 471.332 271.492 471.332 cv
271.087 471.332 270.755 471.47 270.497 471.751 cv
270.238 472.029 270.079 472.44 270.024 472.986 cv
273.196 473.908 mo
270.024 473.908 li
270.03 474.275 270.102 474.602 270.246 474.882 cv
270.393 475.161 270.583 475.374 270.824 475.518 cv
271.064 475.659 271.327 475.73 271.617 475.73 cv
271.811 475.73 271.987 475.71 272.148 475.661 cv
272.307 475.617 272.463 475.545 272.613 475.447 cv
272.765 475.352 272.901 475.248 273.028 475.134 cv
273.155 475.026 273.32 474.875 273.523 474.685 cv
273.607 474.615 273.725 474.577 273.878 474.577 cv
274.045 474.577 274.178 474.623 274.283 474.716 cv
274.387 474.807 274.436 474.934 274.436 475.102 cv
274.436 475.248 274.38 475.419 274.269 475.613 cv
274.151 475.812 273.979 475.999 273.746 476.179 cv
273.512 476.358 273.221 476.509 272.872 476.626 cv
272.523 476.745 272.119 476.804 271.665 476.804 cv
270.621 476.804 269.813 476.509 269.236 475.916 cv
268.658 475.321 268.367 474.514 268.367 473.499 cv
268.367 473.019 268.44 472.575 268.584 472.165 cv
268.724 471.753 268.932 471.404 269.208 471.11 cv
269.48 470.816 269.814 470.592 270.216 470.436 cv
270.614 470.28 271.057 470.202 271.545 470.202 cv
272.178 470.202 272.721 470.336 273.175 470.606 cv
273.627 470.869 273.971 471.216 274.193 471.64 cv
274.419 472.064 274.531 472.494 274.531 472.936 cv
274.531 473.341 274.414 473.605 274.181 473.727 cv
273.948 473.848 273.619 473.908 273.196 473.908 cv
f
276.767 472.986 mo
279.706 472.986 li
279.665 472.433 279.515 472.018 279.259 471.745 cv
278.995 471.469 278.657 471.332 278.232 471.332 cv
277.828 471.332 277.497 471.47 277.236 471.751 cv
276.979 472.029 276.82 472.44 276.767 472.986 cv
279.938 473.908 mo
276.767 473.908 li
276.771 474.275 276.846 474.602 276.988 474.882 cv
277.134 475.161 277.325 475.374 277.565 475.518 cv
277.804 475.659 278.067 475.73 278.359 475.73 cv
278.551 475.73 278.729 475.71 278.887 475.661 cv
279.049 475.617 279.203 475.545 279.355 475.447 cv
279.507 475.352 279.643 475.248 279.77 475.134 cv
279.895 475.026 280.061 474.875 280.263 474.685 cv
280.348 474.615 280.467 474.577 280.619 474.577 cv
280.786 474.577 280.92 474.623 281.025 474.716 cv
281.128 474.807 281.175 474.934 281.175 475.102 cv
281.175 475.248 281.12 475.419 281.004 475.613 cv
280.893 475.812 280.72 475.999 280.486 476.179 cv
280.254 476.358 279.961 476.509 279.613 476.626 cv
279.265 476.745 278.858 476.804 278.404 476.804 cv
277.362 476.804 276.555 476.509 275.975 475.916 cv
275.398 475.321 275.107 474.514 275.107 473.499 cv
275.107 473.019 275.179 472.575 275.325 472.165 cv
275.466 471.753 275.674 471.404 275.947 471.11 cv
276.219 470.816 276.555 470.592 276.955 470.436 cv
277.355 470.28 277.8 470.202 278.286 470.202 cv
278.917 470.202 279.46 470.336 279.919 470.606 cv
280.37 470.869 280.71 471.216 280.932 471.64 cv
281.157 472.064 281.273 472.494 281.273 472.936 cv
281.273 473.341 281.153 473.605 280.923 473.727 cv
280.688 473.848 280.36 473.908 279.938 473.908 cv
f
286.665 473.48 mo
286.665 473.052 286.599 472.685 286.468 472.378 cv
286.338 472.071 286.157 471.836 285.928 471.674 cv
285.698 471.509 285.438 471.426 285.157 471.426 cv
284.711 471.426 284.333 471.603 284.027 471.953 cv
283.719 472.307 283.564 472.825 283.564 473.511 cv
283.564 474.153 283.717 474.657 284.024 475.015 cv
284.328 475.374 284.703 475.552 285.157 475.552 cv
285.425 475.552 285.676 475.473 285.906 475.319 cv
286.138 475.161 286.321 474.927 286.457 474.615 cv
286.595 474.301 286.665 473.922 286.665 473.48 cv
283.487 471.126 mo
283.487 471.32 li
283.791 470.944 284.109 470.668 284.441 470.492 cv
284.764 470.314 285.139 470.225 285.554 470.225 cv
286.051 470.225 286.513 470.355 286.933 470.611 cv
287.353 470.869 287.683 471.245 287.927 471.74 cv
288.17 472.237 288.293 472.821 288.293 473.499 cv
288.293 473.996 288.222 474.456 288.083 474.875 cv
287.943 475.292 287.748 475.641 287.502 475.924 cv
287.257 476.205 286.968 476.425 286.634 476.577 cv
286.295 476.729 285.94 476.804 285.554 476.804 cv
285.093 476.804 284.702 476.712 284.388 476.525 cv
284.075 476.343 283.774 476.067 283.487 475.71 cv
283.487 478.142 li
283.487 478.852 283.227 479.21 282.71 479.21 cv
282.403 479.21 282.204 479.119 282.103 478.936 cv
282.008 478.749 281.957 478.484 281.957 478.129 cv
281.957 471.133 li
281.957 470.824 282.024 470.596 282.157 470.441 cv
282.291 470.292 282.477 470.214 282.71 470.214 cv
282.94 470.214 283.126 470.292 283.27 470.447 cv
283.417 470.606 283.487 470.829 283.487 471.126 cv
f
290.727 471.133 mo
290.727 475.822 li
290.727 476.144 290.65 476.389 290.497 476.554 cv
290.34 476.723 290.146 476.804 289.908 476.804 cv
289.67 476.804 289.48 476.721 289.328 476.551 cv
289.182 476.378 289.106 476.135 289.106 475.822 cv
289.106 471.179 li
289.106 470.861 289.182 470.62 289.328 470.458 cv
289.48 470.293 289.67 470.214 289.908 470.214 cv
290.146 470.214 290.34 470.293 290.497 470.458 cv
290.65 470.62 290.727 470.847 290.727 471.133 cv
289.925 469.46 mo
289.698 469.46 289.507 469.387 289.348 469.25 cv
289.186 469.11 289.106 468.918 289.106 468.665 cv
289.106 468.434 289.188 468.246 289.354 468.096 cv
289.518 467.949 289.708 467.874 289.925 467.874 cv
290.138 467.874 290.322 467.94 290.483 468.073 cv
290.646 468.21 290.727 468.407 290.727 468.665 cv
290.727 468.914 290.648 469.109 290.492 469.25 cv
290.333 469.387 290.145 469.46 289.925 469.46 cv
f
295.952 476.065 mo
294.525 473.711 li
293.645 474.541 li
293.645 475.833 li
293.645 476.144 293.562 476.383 293.397 476.551 cv
293.236 476.721 293.043 476.804 292.831 476.804 cv
292.582 476.804 292.384 476.723 292.242 476.554 cv
292.101 476.389 292.027 476.144 292.027 475.821 cv
292.027 468.906 li
292.027 468.548 292.099 468.274 292.235 468.085 cv
292.374 467.895 292.575 467.803 292.831 467.803 cv
293.08 467.803 293.276 467.888 293.424 468.059 cv
293.57 468.229 293.645 468.48 293.645 468.811 cv
293.645 472.744 li
295.467 470.83 li
295.693 470.595 295.863 470.43 295.984 470.343 cv
296.102 470.257 296.246 470.214 296.415 470.214 cv
296.618 470.214 296.786 470.279 296.925 470.407 cv
297.057 470.535 297.125 470.697 297.125 470.89 cv
297.125 471.127 296.904 471.446 296.466 471.841 cv
295.605 472.63 li
297.267 475.244 li
297.388 475.44 297.479 475.584 297.532 475.685 cv
297.584 475.785 297.613 475.885 297.613 475.974 cv
297.613 476.232 297.541 476.433 297.4 476.583 cv
297.259 476.731 297.073 476.804 296.847 476.804 cv
296.649 476.804 296.494 476.754 296.388 476.645 cv
296.282 476.537 296.134 476.343 295.952 476.065 cv
f
299.475 476.804 mo
299.23 476.804 299.02 476.726 298.841 476.566 cv
298.663 476.411 298.573 476.188 298.573 475.901 cv
298.573 475.661 298.659 475.452 298.829 475.28 cv
299.001 475.105 299.209 475.017 299.459 475.017 cv
299.708 475.017 299.919 475.105 300.099 475.275 cv
300.273 475.447 300.362 475.658 300.362 475.901 cv
300.362 476.184 300.273 476.406 300.099 476.564 cv
299.919 476.726 299.712 476.804 299.475 476.804 cv
f
307.536 474.799 mo
307.536 474.999 307.475 475.216 307.355 475.445 cv
307.235 475.677 307.049 475.894 306.8 476.101 cv
306.554 476.309 306.244 476.477 305.867 476.603 cv
305.491 476.73 305.066 476.795 304.597 476.795 cv
303.594 476.795 302.811 476.502 302.248 475.919 cv
301.689 475.335 301.407 474.551 301.407 473.57 cv
301.407 472.902 301.535 472.316 301.794 471.804 cv
302.049 471.295 302.422 470.9 302.908 470.62 cv
303.395 470.341 303.981 470.202 304.654 470.202 cv
305.075 470.202 305.459 470.263 305.812 470.386 cv
306.162 470.508 306.457 470.668 306.703 470.861 cv
306.944 471.057 307.131 471.262 307.258 471.481 cv
307.388 471.701 307.451 471.906 307.451 472.097 cv
307.451 472.29 307.38 472.455 307.236 472.589 cv
307.09 472.724 306.914 472.792 306.712 472.792 cv
306.576 472.792 306.463 472.757 306.374 472.688 cv
306.284 472.619 306.184 472.508 306.075 472.35 cv
305.876 472.051 305.671 471.824 305.453 471.675 cv
305.238 471.524 304.964 471.449 304.631 471.449 cv
304.155 471.449 303.767 471.635 303.473 472.009 cv
303.181 472.382 303.033 472.897 303.033 473.544 cv
303.033 473.849 303.072 474.131 303.148 474.386 cv
303.221 474.64 303.33 474.859 303.473 475.038 cv
303.617 475.218 303.788 475.354 303.989 475.447 cv
304.192 475.543 304.415 475.589 304.654 475.589 cv
304.98 475.589 305.259 475.513 305.489 475.363 cv
305.725 475.213 305.929 474.983 306.106 474.674 cv
306.205 474.492 306.311 474.351 306.424 474.247 cv
306.538 474.145 306.68 474.091 306.847 474.091 cv
307.044 474.091 307.209 474.168 307.337 474.318 cv
307.469 474.468 307.536 474.629 307.536 474.799 cv
f
312.903 473.511 mo
312.903 472.849 312.756 472.335 312.467 471.968 cv
312.178 471.596 311.786 471.413 311.295 471.413 cv
310.978 471.413 310.698 471.496 310.456 471.659 cv
310.215 471.823 310.03 472.064 309.9 472.387 cv
309.769 472.708 309.703 473.082 309.703 473.511 cv
309.703 473.935 309.767 474.303 309.896 474.619 cv
310.027 474.938 310.21 475.18 310.45 475.348 cv
310.691 475.514 310.971 475.601 311.295 475.601 cv
311.786 475.601 312.178 475.415 312.467 475.043 cv
312.756 474.674 312.903 474.162 312.903 473.511 cv
314.53 473.511 mo
314.53 473.992 314.454 474.439 314.308 474.848 cv
314.154 475.255 313.938 475.606 313.652 475.896 cv
313.368 476.189 313.026 476.414 312.632 476.571 cv
312.232 476.726 311.788 476.806 311.295 476.806 cv
310.804 476.806 310.362 476.726 309.969 476.566 cv
309.58 476.411 309.238 476.183 308.954 475.89 cv
308.666 475.592 308.448 475.244 308.296 474.843 cv
308.153 474.44 308.077 473.996 308.077 473.511 cv
308.077 473.019 308.154 472.57 308.301 472.162 cv
308.452 471.753 308.669 471.404 308.95 471.116 cv
309.232 470.828 309.571 470.606 309.969 470.447 cv
310.372 470.292 310.813 470.214 311.295 470.214 cv
311.786 470.214 312.231 470.292 312.632 470.452 cv
313.031 470.609 313.371 470.836 313.659 471.127 cv
313.945 471.424 314.161 471.77 314.309 472.172 cv
314.455 472.578 314.53 473.021 314.53 473.511 cv
f
320.713 473.629 mo
320.713 475.784 li
320.713 476.126 320.637 476.378 320.482 476.551 cv
320.326 476.721 320.124 476.806 319.87 476.806 cv
319.625 476.806 319.425 476.721 319.276 476.551 cv
319.122 476.378 319.044 476.126 319.044 475.784 cv
319.044 473.202 li
319.044 472.793 319.031 472.476 319.004 472.249 cv
318.976 472.028 318.899 471.84 318.778 471.697 cv
318.655 471.551 318.459 471.477 318.196 471.477 cv
317.665 471.477 317.317 471.659 317.148 472.028 cv
316.981 472.388 316.894 472.912 316.894 473.595 cv
316.894 475.784 li
316.894 476.12 316.817 476.375 316.669 476.548 cv
316.512 476.719 316.313 476.806 316.065 476.806 cv
315.818 476.806 315.617 476.719 315.461 476.548 cv
315.304 476.375 315.226 476.12 315.226 475.784 cv
315.226 471.146 li
315.226 470.841 315.295 470.609 315.436 470.452 cv
315.578 470.292 315.764 470.214 315.991 470.214 cv
316.214 470.214 316.399 470.291 316.549 470.436 cv
316.697 470.585 316.77 470.79 316.77 471.051 cv
316.77 471.204 li
317.053 470.869 317.355 470.622 317.673 470.467 cv
317.995 470.304 318.349 470.225 318.744 470.225 cv
319.15 470.225 319.501 470.307 319.792 470.469 cv
320.085 470.631 320.326 470.878 320.517 471.204 cv
320.792 470.874 321.085 470.628 321.399 470.467 cv
321.711 470.305 322.057 470.225 322.438 470.225 cv
322.878 470.225 323.263 470.314 323.584 470.487 cv
323.902 470.661 324.142 470.912 324.3 471.234 cv
324.438 471.53 324.507 471.99 324.507 472.62 cv
324.507 475.784 li
324.507 476.126 324.431 476.378 324.277 476.551 cv
324.123 476.721 323.918 476.806 323.666 476.806 cv
323.419 476.806 323.219 476.719 323.063 476.548 cv
322.906 476.375 322.827 476.12 322.827 475.784 cv
322.827 473.058 li
322.827 472.709 322.812 472.431 322.784 472.222 cv
322.755 472.011 322.673 471.834 322.545 471.692 cv
322.412 471.551 322.213 471.477 321.949 471.477 cv
321.736 471.477 321.533 471.544 321.34 471.67 cv
321.148 471.793 320.998 471.968 320.89 472.178 cv
320.774 472.451 320.713 472.936 320.713 473.629 cv
f
245.272 473.118 mo
245.271 473.116 245.271 473.112 245.271 473.107 cv
245.271 473.112 245.271 473.116 245.272 473.118 cv
cp
f
245.354 473.637 mo
245.355 473.637 245.355 473.637 245.356 473.637 cv
245.325 473.489 245.3 473.343 245.281 473.197 cv
245.3 473.344 245.325 473.49 245.354 473.637 cv
cp
f
245.89 475.141 mo
245.887 475.134 245.884 475.127 245.88 475.12 cv
245.884 475.127 245.887 475.134 245.89 475.141 cv
cp
f
245.839 475.041 mo
245.825 475.012 245.812 474.984 245.798 474.956 cv
245.812 474.986 245.825 475.012 245.839 475.041 cv
cp
f
245.505 474.215 mo
245.584 474.466 245.679 474.708 245.79 474.939 cv
245.678 474.704 245.584 474.461 245.507 474.215 cv
245.507 474.215 245.505 474.215 245.505 474.215 cv
cp
f
251.545 466.908 mo
251.859 466.908 252.09 466.933 252.355 466.978 cv
252.43 466.5 li
252.43 466.5 251.698 466.276 250.736 466.354 cv
250.66 466.095 li
250.959 466.032 251.184 465.766 251.184 465.448 cv
251.184 465.085 250.888 464.79 250.523 464.79 cv
250.159 464.79 249.863 465.085 249.863 465.448 cv
249.863 465.766 250.087 466.032 250.386 466.095 cv
250.469 466.384 li
249.448 466.525 248.635 466.923 248.635 466.923 cv
248.779 467.364 li
249.397 467.158 249.933 467.033 250.419 466.98 cv
250.895 466.93 251.253 466.908 251.545 466.908 cv
cp
f
245.878 469.319 mo
245.882 469.314 li
245.906 469.284 245.929 469.254 245.953 469.225 cv
245.757 469.085 li
245.452 468.861 li
245.435 468.886 244.955 469.326 244.576 470.142 cv
244.56 470.116 244.541 470.091 244.52 470.067 cv
244.407 469.943 244.248 469.879 244.046 469.883 cv
244.044 469.883 244.04 469.883 244.037 469.883 cv
243.912 469.883 243.826 469.842 243.77 469.792 cv
243.826 469.721 243.86 469.632 243.86 469.533 cv
243.86 469.303 243.672 469.115 243.441 469.115 cv
243.211 469.115 243.023 469.303 243.023 469.533 cv
243.023 469.765 243.211 469.951 243.441 469.951 cv
243.478 469.951 243.512 469.945 243.546 469.938 cv
243.648 470.053 243.811 470.152 244.05 470.147 cv
244.173 470.146 244.263 470.177 244.324 470.244 cv
244.393 470.32 244.417 470.429 244.424 470.512 cv
244.423 470.513 244.423 470.514 244.422 470.514 cv
244.15 471.258 244.227 472.183 244.227 472.183 cv
244.888 472.21 li
244.902 471.873 244.95 471.283 245.12 470.816 cv
245.449 469.91 245.861 469.344 245.878 469.319 cv
cp
f
257.295 467.46 mo
257.065 467.46 256.877 467.647 256.877 467.879 cv
256.877 467.914 256.882 467.948 256.892 467.981 cv
256.777 468.085 256.677 468.249 256.681 468.488 cv
256.683 468.611 256.651 468.7 256.584 468.761 cv
256.532 468.808 256.465 468.833 256.4 468.849 cv
255.908 468.159 255.303 467.74 255.303 467.74 cv
254.828 468.247 li
255.187 468.573 255.553 468.982 255.908 469.491 cv
256.155 469.844 256.407 470.298 256.618 470.751 cv
257.258 470.447 li
257.258 470.447 256.966 469.724 256.555 469.077 cv
256.626 469.052 256.698 469.013 256.761 468.957 cv
256.887 468.844 256.948 468.684 256.944 468.483 cv
256.943 468.353 256.986 468.266 257.037 468.207 cv
257.109 468.262 257.198 468.296 257.295 468.296 cv
257.527 468.296 257.713 468.109 257.713 467.879 cv
257.713 467.647 257.527 467.46 257.295 467.46 cv
cp
f
255.635 473.212 mo
254.753 473.64 253.304 474.208 251.396 474.474 cv
250.647 474.578 249.921 474.616 249.253 474.616 cv
248.384 474.616 247.616 474.551 247.027 474.477 cv
246.354 474.392 245.828 474.289 245.507 474.215 cv
245.584 474.461 245.678 474.704 245.79 474.939 cv
245.792 474.945 245.795 474.953 245.798 474.956 cv
245.812 474.984 245.825 475.012 245.839 475.041 cv
245.852 475.067 245.866 475.094 245.88 475.12 cv
245.884 475.127 245.887 475.134 245.89 475.141 cv
246.08 475.497 246.307 475.824 246.566 476.109 cv
247.466 477.093 248.383 477.249 248.391 477.25 cv
248.406 477.251 li
248.419 477.256 li
248.427 477.26 249.24 477.522 250.476 477.522 cv
251.692 477.522 252.886 477.277 254.022 476.792 cv
254.864 476.361 255.661 475.707 256.056 475.124 cv
256.361 474.672 256.582 474.191 256.712 473.69 cv
256.782 473.424 256.837 472.998 256.804 472.549 cv
256.556 472.716 256.164 472.953 255.635 473.212 cv
cp
f
248.678 469.068 mo
249.651 469.068 250.439 469.856 250.439 470.829 cv
250.439 471.801 249.651 472.588 248.678 472.588 cv
247.707 472.588 246.918 471.801 246.918 470.829 cv
246.918 469.856 247.707 469.068 248.678 469.068 cv
cp
253.829 469.112 mo
254.43 469.112 254.919 469.6 254.919 470.2 cv
254.919 470.802 254.43 471.291 253.829 471.291 cv
253.229 471.291 252.74 470.802 252.74 470.2 cv
252.74 469.6 253.229 469.112 253.829 469.112 cv
cp
246.161 469.528 mo
246.135 469.566 245.753 470.106 245.451 470.937 cv
245.225 471.558 245.235 472.464 245.235 472.473 cv
245.235 472.476 li
245.235 472.688 245.247 472.898 245.271 473.107 cv
245.271 473.112 245.271 473.116 245.272 473.118 cv
245.274 473.145 245.279 473.17 245.281 473.197 cv
245.3 473.343 245.325 473.489 245.356 473.637 cv
245.793 473.748 248.405 474.357 251.323 473.95 cv
253.153 473.695 254.542 473.155 255.386 472.746 cv
256.086 472.406 256.537 472.099 256.71 471.972 cv
256.537 471.33 256.059 470.321 255.621 469.693 cv
254.367 467.902 253.016 467.443 252.323 467.328 cv
252.058 467.285 251.846 467.26 251.545 467.26 cv
251.266 467.26 250.919 467.283 250.456 467.332 cv
249.992 467.379 249.474 467.501 248.873 467.704 cv
248.031 467.986 247.269 468.428 246.669 468.983 cv
246.649 469.003 li
246.56 469.085 246.374 469.257 246.161 469.528 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 20.1.0%%For: (Ayib) ()%%Title: (Flat Crown Collection-2 up-01.eps)%%CreationDate: 31/05/17 4.20 PM%%Canvassize: 16383%AI9_DataStream%Gb",KpO9-`qs\q7hLd-JW*h98Z$2s?UZhstQ&&fJp[$QtIb4SE!%KBF-KcYCYFEjX'o%"rl"(36F,HPf"+hGfk^T@R<::.u&:FQK%l<S''d@&5_U4KZA2XUPXnp;0)KqF:c)7i&)iY5I,kW[:tBpth82QBRQ`[H6M)hC)<rZ3FYqNjB7@f;//S1FlU3J,1j1c**14c6f_%GS0Ul;fdO1>gK<2S,lGRIX'Ptjh&0:6!p9hp`3ZNFc01;V2975(a]4ga-*U^Q_i^B=5>$L,ihD1QXD4n7f<0#"C)%9+pdHEK_2^n%#!O55Nkm],VOm0!</-u=0kS:?`ud3ViR8[$EB$aq0T*@BHC#_)s-*EngB,=hG-6AQm>lLEH<2L-e-?$uYu_P%'j:'V#lIb'?bioI%c3Vom10g%<&!-ndK<Bo(iD*lXiliuCE+%<aGUXhuY=]=E'!u"0T-H(^CA]0bq@jjT0P5uZ5RqIJ%Z(86>!N)SWF3J\aCChBTJj]e%(>\+CksC"dnDX*DU4n5G1`SgS.,p$>GSi'JhA9Kb72MR_f<?LPc(b57-j5o@#AgOt`/((\!Q<<J9+ZV96O[#n%sdhViIf1g*L?V]%/H,qX#.S^o:5S$3EgNq$j9Ta,RfI8j)PlUHA-!'eV1=4q5dX(.,huUQkO3rAk;*,Frce+*#-A1=p8P[dmtA;qEXm!K)1"Is;F=W#%9+L/,Y-/BNXr$Njq3uQ@NPC3&gb5+aJ=jd]Nib.XN=duDeh3F*SEl6f3u+rJ]\>@$k@b&*hEYH6]n%90&#b3Y(5)8\Wo3WWc0k!"%)jgfki(<q2ir?W_cJV&Dm+(.5eL^A(:=:pi[mI^_rRFJu_O)XS(;0GJgq`t8<uo/43-V9o7j,`+5RtL=3@f82OPJ7a#iiq?\Dl"g%?1olJ>`BY2,$`mY?Q(.\@`2Z\1""UNQoR7Z[qM48p8r:`#tK<&^BL7Z+L-?nP)L#1q5kqcna_7IW:LNr2+lfK-7#k43[A*qKkCl0%f('\)38ir(^hE_=p1TUsV^p=kY1/#>,l/eCr698l(7QH[3'/75d8Np5X_jNA0OU(p6uT,066q<h"oQ-L3@?e6V2=hd"sZ!RF,\@_%*eQo)k-Dli(\fM[7rl.`\LRRg:KDK13nl5T@8gS074*Q#bo=+W&:G2h]DJFoK0N>-SEUg:"M":Ir$[+LDrB%s]jG-s5<^=g!IUQ6%F+o!M'Y&B!+AA+d_MHqcp3H<GGU4X7:q[8YX[r>gkU<"4lN)$g+o3m/_3j-V.(Ef/JXA$BJB5R0pG=m\m7;.gV366<@l7q[O8J;?%F3lZHr^!>&*]<G*`'ZrKBG_2qJHXa/J&E^n3952afKS87)"E1X&R=r187):)a;smV6i=oRgP6n[iF4&F5kTQ>K9/0JTKIf<2_"qh%^/2b-TE,X,3"cY8MgtdUZ5>mKkE"iU3jGe?Jr0[%#)*Ne#bTJplh83pKb=*t+=[I0I;Z5!KYPA0r3/-ME^4m)l]1`B,$&$+T-=He%]&=a)orTj@\(UFu*Uo%)4Wpd\_:q<u,AZlFK-`8]U2*&f]^A&#)\OG0,S=H!("ha]q,(!5,N4`&j.[>!LP:X0?Q^oB!t$=%ch#iY%%\`tiH@9ZV'_Da\)tjNMU6t_h?=%ZhmZ9@I&1,cfp3BN-E#J<QGj,Y@h>TY>($%IonLhc0+$deO]s*-c:';dBGSrUY%P6=gIK"aN%/-Lsr'hP&NOrt,@#CM['h@fY)ACK_,ael(/U<%MG"Cr$u]jZbrXfd>rD^u.L]HYKD\s+R$\E3t:5=eTqW7MOnjT#?5$-\HYhFPEe%1M3gL"F(*R!9+7Z07FTE"nd)lg(8kOGbG'/YsS$tp-qHd$Uu<P@46_Dn5&Pgqk?sJ)_YBJ;0`\hDt1+3$<OKB=UtlAa8deE/hEYT%*bjBZa<eN;@+eTp37!WB5W)B"Wd5RC7d=h-&WLBge3%72BXE:'UG4-P,GNhb:>ehV"=cuX7,g9H!eHUn"1f-G8\%aR1rs`Xk'gNY%$WW=2\-7p'1#U%i_;6c[VEb^%hLq^%P@"GCJjf:',07dbD2K%D&K#dL`s)rAM:@FiNF:b`7n8(P(kYOciNBNi?l!W/U/)<hKlpLE%Y^fRQ&ne@u;ChJn1EUA/@dc8b7>+miFrmIDTGsG7q%^u5kH8"!#(qY;AHJ`T!t>(a.7o(p/hei2kfl,XV[&;l#$Ylj*u!^c_0OMn%'repW#=#`U!o>gL6-PfDPW&IF,NhDJ?\2BrCJ9Ra#"/3o&>B9HBIkX77[1ncrVg8rZt&`41GZ]U)NTA*j72Rsi'HrL1eF6D.p>;H%s7mS:Acu\kHo\4K@Q-m(``O&-MBaj;KPDtr_)CHp7XQUrP++8@3Jg[_"b3:@"lW=</7--f@]UuhaUqd-LJ;.7`:C%h/;SK6Ps+a#%(dbrN`K%df3N:gP/=M&K:0t%.;=eM(cXHk?_(Fmr?gf"#XJlrD*ld2"#(N6IS^d*!et1<!JQ*1H[ihD]r?P,<DeV$UX.aH?`YW\&%Q>a2$Ln<Q6`mK`Wp8f>1EnP6VF/G#]Kt.`=So+c^U^iGHE9g"j47%h5)=KL6%pq8.q+A5!h>&#Mi1i'06h"XUTg!Wl!=o^9;[RcJ%Gaq[I6V@IYs2ukLOMO1m9O?2$;UP$!"J1dlYJa#=.NVq0W4C8saoP9ui$emnjaa6KnFIN]s2X5OHXLqH3M=Rm;mO2e0KJJ^&0sap%r#_GFNj/W`l[O8I9Q6YPY4trNVrft.jTZV#+$s4oVE$;m54msXouQq=n+?nuUMl#$o%9ID$&hLD`:4B@Cs?EJcu'j/hdIS6,GO"&%%DK_im@u1eDUdn/ON"cdRW6!o?fNk'5.r=PA-l<RpA$;E^W&?6*2s2>9kpjiMQOWup,(+bZZB`7p$lW9gBT7^6RO,K$!cC(`nGfq%%NSp8'Lahd+<\Ii`0fo+1Rc00mC7!sq"7bWMe&9R=:Y3.P,ehK.8p9C-hpIfOoEg'Q2eQCQU^_cjhU0`JNZi_ZS:lCTh(_$.'BjO%Ja)XQ.e0C7Yn]"5354V?B21PTl"CSjDYR$?B^^5%_rf@OV+Vnt:,s#XT\3OCG*F0rr.%KP2e8Ck=-gsPk_aOOI+f2&I01\I7;E.N%;FJlM5QkR&DEPlumBbNej?J.T[/JiI_4c3PP2Q,AQqf8U[gP?j4F7$"o%o8u:&M*PbQrug4MHnj?WI!>/GXYQ3%[8h1Vk8]>'P,l%$]k"sl-KfsRLqRHF[uI9qbPWs9r8aIs%i6&kYGGjKt9/1rFW871"X_/7Ir1qm=9_B0E9h7oLCKfdu;AQ9Eo:qbWn7&1`DXo':R@n%C^^i`f'J)$-Z(kH[j/1r5K9T!\=J3)GPdnHg(u#05A'l[O&:/Ho2A/Snb[/a3<GI1f&aM.oo+Da,j`=Ss6$"td*j%)+,PEp]O^s8%c8s=rX$:^W_84:RZ$<-U5.+h>EZ9k_gMbEWGAXe`0huEn2*(GS*^.bGFtE'ZTm=L'4iSlW-_!*;^IV)rr6`N:?U)T*H$\qS88^V9%^p85:mO1H,1D9$6n5Y6DCj(1iBo7JE1s]GK6`u++(Ou:@YGgfg<il+8g-aR_o0ZQ^6[-V?bBCqc`3a#r/>c3f26I/TEJS4F%sAr&%WbC:(HAi*)BJ)FfN?-B)d9j*[LSB47]iGaT$'O(VV%i_7CaBApa#(!9"poVu^/S>n<iZH8f=hY2HE*N1I,hE&2(*l^^NW(d17J@&%'t96$&__^p?4>+l+^,Jq"p4q@*Et=3Ws?@&SCbuf*^8;q=c9Ds@02,1c6rCQc2$cR/5f57*]`#4!fkj'7FL(DM"XqB_Q3q9COYbV%q'COUlWL)f]a!3:E>.&T;eCVY`,lNLq+H'6Nr/T5=89.=k.pQ#rf:8AUE-+>.>aR\c)<YmmjSG/+^kVYrBGeb9`N-bS'c]5h=7V:%q=5=j*iq1>Mf1Z=Keo0mdGn=go5i^8*bo`b$YT=6KeoW\1J11Z^qpuVZ?\"hkd5<ki3K1"X(?bL_O3R:ld-[CO'=T=*M[+!I7Lti%Ae0&)\>oJjKerZL[r=eu7`SsCrpUWLnLX^nK9c>fODeUi&Kb&`a+CZ31QM3/O5o3<h]'W1NoA"u)4<%!1]4dEh>O>d5AUq4p2]-V%YTu3"Da+TsDkBl*>pf7Ia7GhfRjS"Jr*QmNRZThf\!)5%fsd`^Dcm9L3/)98b.Q\pV^LeRZ>M&U``ooNn92*T-gPr]DElCW8Z.QZ%qb<+N0I*J5q*-WeHW7>)-RIJ6M*h6c8u*@#P7jFN8@idXd0DK]";K4#m'.=&o#-lMAH,l;G,c5UiaeUuIWtP@O86][+G3JS>pj)$%f9nGu28FtM[I]Z^d^<I=*9/f$D"O&Vnb%Yobi#H^>&cX$1NuU7e-KSE*E.#?VWKPiVD/uLp7knim5"KgZX(9`)*Jo0,'l'G4qTsQ%(B`R2s'suAribc\q3JC!mt5Ed-'\7WDdN@q/GZ?5!:TISpg_u0YRaM/UDjEO4<=6Sdl2Wqfmt*Q%o,P6r5O233hoi>#1r!!%+cRT%F5LLHdL.%UcRrl`,#3=*pIP&[Ri_!P_MNGqR='e,BLcUR+t>#c^@+V82']C/ALShe2^!],"?2q3S9D5d9Kr(n#5U<,l(0o^0mV3^%IiRP\E2CT2rUD&^*mHI9dk8Sfr:=Y%Gmg>O1&noDR>\!=kL9A#\'@5<gipK&k+;f4SE?G>o?Vme\'t9Hn]a;ii?k(Gp*-cT6I4,N%oAS8)%_IC9RWC[;3M5H(^Lef[OI>6;a2cAp3S[2p!APS>=ZfDW+RGu4X3nq.?]O,aS0[?+>4Ekpd?k%1?%$t3Wb+*>+8boU6F3)P%1II8;lmJV"LCW&a*k4EM(#l-:XZb)._65.KQ/GC`\5N_%<.[2si:p1Kj:^63_;`koiVr+(I_R0VLlE5kVd^d[`+-U'&L0@1%mcC=%(Lur#N+ObYf0&r05kif,(tMqI`Vq*ZF)K%1/u8o`B`I2B(t=KX:4aR7($Ho=Hs?7k6h%X9"^9)f?9=>_dZfW&\;sDdJ7\TAV$uuq%b;bYg#!9a"+SK9Y@S=Yu$DC"Dm(Y=flL%Lfh0e]2-<Kr\Epj)!k(BR@cDd1P.d!7Y3N$?3WL-&FME.SDcK@>//DUTN*3lfef5sd,%SAWW`:W8jM'Q_"+4T;^18I&4_C5R;bnWp&$k0Y.jW,Wf'g#bfm.fRRoe2LO2e+"F8IlrL06k9->%df&lq!f?XcP\_`cgg&Q:ibKp%*Y7+cOp"k,LgB-@P7'Oad*i;&V\?4.0(bfro:^NW&#Ijti^$?f>Q(LaXnHAmku=\oN8o9*n7,5$qVO@1WB%s&oWS;^pC@/;K*sN.%j)mDmi3399j50.+q/r?_*EH1O0&kc,&2ER.BR['9ht3Rajj8u*4WLae#;q.M#CDm)A$Z4o*n1.g*9#r%rP?UmTePYB^ENQ?`;R1k%%eV&YX`F8r)!nLe:2Kn%ol?[JN5kWVCU08N^DnU;)UOG,p,MA"_Q8/>d2r.58*'P3=oS2g55+gXQ9Tu!o#G_s50$t.#lg.[LNZ'\%jc:Y-OH7WnSB;qOo#Dp,oi(\H<;nkWo#Lc4'$"F-/6_q-.GU$$qA_t2dtIGfeAB*AH+\\"`H_(UhMS![hu)Bm#d1q;c6uC\@I"[p%m]i$\p<;.[8okU+BT=gq]X4#o:MW2rs4N$-dRV$#c*CRF#u*RA`H)Ie50'Y:p1/+/W<3pUdp^t.o9W580--4p))Ch`]--[(^OEB)%kr:,`$qGE0e5&8W$#sa0;\_f<&,PO/5\6"$j4Fm*qQ&dMI7lG3n'dO#8gUGoB6nV3aNkHa)Lpm00RJK5#G/tcc1*IE<!rW?m^,n1%G&%-;a/q\_"/B@/Kr,lc_d7tm*KSYV[)8<E=9U52*=!V_lmW?<A'fC(',WsKljrpcdgH,DQTlKth&lIX_Z)QKZDS]3cuQpM%)jY'%4Cs)A/F\l-I\ggBAV$a1n.;ljblQNobQ<:Z6FKf6G`6p@k#4O*0+ZQkg*mInV1GO$n<=-Kd_O0U9n=CQ#4@&iZ(uq'oVWsdqd=G:%"V2sqm*PB4`*h<4s%gi@J)gtj1rnCL;^i2$s4cl3J0T>Thf59mEB7KL)^;0n2Ei!lI/O?jhh'f_ZY=pU]TB>"G*='"'4.(Im?(M#%'%75TkS_r!\DP[sl?"TOS((aK(L)Cf6L]D0%t6'%[22`]U/O'#LrZDk5I5%7T7m/F073II0`(SW"O!F)RJr$imtfk>\E=7+RXK"5%?pXM1f2n@tB1g&<7+4!3^R&8Rg9gk7Q_X=k]Z5j5V"fssQNj?1_/fLZYM\`I3Kfph6`c@;-_p6f:0I'6E7sir]Z9$Ap3kcdcTN'K%okDuGlp"r?hd\-Vg&B1J)q97;'2F-$H^3/.:OG0/]\WS4du=8uW0JNN?X)2r;YVo9(6B-p6:LO-`u"WDU5)\>E&c7_#Mr+$/.mR/%o)KRpaSn8r.=@1]AFmXTc*nHuh)jTLI..h5SYE$s(Hn=@VnX!02+:M/hWX3::)JAo$Qj\&nMQ6,&"cY<p+h[RY,Z8\MN](0oFcVg%VI.*q7l)@C'k["WqP#!m*J`lM&b-l^PWd^I;MkbV%>\C#_2YAf*\Un\-9q>Of-0Te#sWYf8ePAL,BdXk-Pq)LTjM64&);kR8*%Hk%W-6QL\^58:U&,bk6hd/o9!(l1o]LJGj!e!#?7L69OjROFMoW_u^Gh25'8rK/!n%U,bP][Ne4Jur3BqdAs4GV?3Z[a;"BKu/JZ^i%%@rVqN*RuCoT@141's/nUhm@1SUA5C'a@#]:H135oHhH/KkCOu(<&H)^+W?@_(e4Jf@o9s^/)W?8e8ZQZiqbBBMRYJJIYWBNaHr-m%^)3d%f5D,t-@9^5a)V%$V1<p5F$E`g%Y#N(c;R!P>$l9<p(*OK3<Jmo\iQP=hopP.!P"A*R^Z-8Rn=]F"TIFD'U6/?+jT-Sjq+O@%LVd[6lY5PP1"8>!HHic%4RVV8MOLh`^@*2K3Rr$fT2GE(_WD?m&cM`a\E-NGpAO!*ri[0Je2K$[iU\5&ft542'KahD[Yr%crh!=R%q+)?Hkb75G2maPlh*aNq5[s.[j[@B:IPkGp,S,D_LI./bam<^ZkQf,t]jpiY/$-t:,)UKKe6r)%.sNKCYB6s^WXcVucXUu%QW*[8%TVOMgf/%Y!/DR4gF7<>mhkQsQ,mSN&f;Fur44[If$6.r_^;^Ss(q8DO$THNO8J38aK8;*`1ei;3kIa#[\F&5s[-M!Y)m6@H+iG7u%7Y*4&g#Eee)_Q#T6s0$2Hl(4$`7n`[?B8C\(9e!RP2Z=oBr?[g+HdEH4"LtgoX>NFmm([omchDn`N,-oX$"7W>OW0+WUf8h#HIMj%(0GkX?fKs$,('fs2);5,jmrhSKRX"ciq@[crW!e1gP;Ga+TKEAU7i]jecHA,3O$F)PqF0U.X%g_1r*$aV!Z$N2m6SL+pe3E@)G_D%loj]kE$rbH9mC87X7MQ)qA7-N!4LYU#j_^!I,?_60\:gsd',Hcl&<Os9b;_ILIfLElL-EGTqOj/_+<4:KE)+++hp8*LL5Gf+9Hg)%njWI?GRO1u]E*6\oqI"FK`;\S8+_!sh+@\9IY/^gnDt*aq?7/!YNd4%&cD]7^2)qWTECa?hs^WIS&EH<+@0&\m3GOL,B4ic4@\ub%^`hd"KY/^o6NiD<3.qi^%=F!TW':h+LM2$NJEL'qiFa>7\_u]?rmRuVf@BbfjK`q'6h^;%T;*;/=#XOc$/ZQ!\+-NHoQc1_c[]U.%B_@LjSm'QNJaP]W;?>E@"_32/I"RIc,B-6PXlf(dO!\9os%hXRj;1fW(WVu<qsu8XGr$:ml-*GZi\us#pe)NRRCfoJ.R#!;;gea\%BlYisDr%%;EM3/>5>@XM'[;ceFA]i1eNo"IF8B\"d@.[\!7?-33(Cb4,Pil"[(_*r^sE\nnY..W-9U6SA5C_;ghb:'GX`<EDW7K2%RXq>oi9]oVnH\nlM42ZED#l?KX+b#ps'Q6SZgS0o5[/K(<G=rT\LNVmQ2NaAlLY>h^@2]a5TE$W+Rju%n"u2RocFgpO5`^XPhM4q%plTZJK("$3+[:iQb<NrE:L_'jD_QAmnWeWY;D!L8PEX%_kg=l:X#b(nbu+ttld&^oSpmjhqg3?#AMG$#6?`l4LK8Eml[$t>f,5XP%:k""^ZGU#Sm#Ab_%9SeW+1j*7XJ/fS1`*>;hoX[8S&Z$ZU#k%LG@Iq*nb@=&"QVC.dp!CKd2[*`'n"*Q(h1G8KQj0!q98RWkm@W<%1@DUe`.!1p-E'"VK`&H$q,`cj4:$/WgGr\[Jq*1a\,1O1Q+hSN;k1`0+T2'%3$Ot7LM7ls34+L*UbTNfe@.Ka^iPGoiZC;/&;)T_%gEX&W[fK_0"(<V*r(%PAk8AYuO[#Mi/Mo@GXH+a.&Le44)t]k>*Q.$&IY33%DbJ9n,0`JS)Vn;ELeS_GT_bnMNsYukdfdWU@W+BW%jS1J?h`sR^X@fiXJc>f4(QRPD0>*EnqZ_-ofmgP,G,.YK+/F/Ygg76(efK$pGO`\1Q&/[_dTXd/Uh;rh'gK-t']iPqQ35oo.qF_U%<M)2a$uM1U8[$kT=;0PN]=V:][3dWi>HZ)IqC$S!.NQIEZ6Y@,\(dG#S?Tnu*oK\+$Jlb'9(g)58WoZd,XLC8%f^`=,upUPS0XTB%IgS=C,s>]O8*D[j^dMO<6iCo@NCYV>,[&@98TIZTD$)IWhSELF\ZCRc12#(SaTBJ5B.Gg#4'4^Vq>3dEC"X8`#%rf2BhR^X(<i<l%e@!@fKiTbFd$'/6oIgLm=]B\jOuIGI!q*P3K)^Ie]=9:l4rHF^jTI=^%K)nZ<j-hQ"e$V6UT&hjRbXkC9C3+?,@P\PiCc`n`/7_A%I<.TA0f[AAq8itlm2qjd0hXmBcJ%Bdf.M0e(=5iFT8+-$5S(>SD>G0I:GSG(c/=tbXM#KX/M$\UNX*;5K]/9m-!B/)fJ<G1K4V$G%(koF*QKSpBJ^>5e"l?Wqo@9sO!s_-mIdlE7@hcb>JNQJ^\XIX58ReRce$-^ZYF`R#!&IKj6@kDB9:oVeWk[jA!1d`o4cEWkJ?[o9%S;e%-k-!YqEJB&k[?bRfK^?[GIrIQai%6I!E1t?j#7'@G#MGha'#K;g-l=c,7)SUgPgqmH("2XbW!^P7`#0_,.8g9Gh^73XWPP0D%I>PAiA#4uO!ns$LlscMeRKp+7Ht*joOj=UJ])WcYC#^$@<f(C&5^DbMVMaZ)8c>Wb:!JkYd$=l"S!33eSB(dUEPtL#-bg&-7eN>q%S^O#*:t#h99*5!Uj@?gbEEY/1+^`kPA9:EF/`DO+$A\ds,kej-0b_t3!k[-\0kR'hDU)9T-6edO,hZ:E.l!f(V8tcH@,G.06\$cX%)Qj9L`2d3I1?q4#GSFF>4%4<IFE%rhH8E09[#k'*2!>>EQM,@X&CMEg&&tc((TDCAKm?g7dTRb#dUrdfn/At/X>O>RYXfK/cnruU%7+2tAqRp</+Fl&"cG-ASn(%/5Ol`aCbgH[`C,qHT.09+Mkc.]PLA<#Ndn_C'561cpk`h[bG'Id<`0ZBiE?TU[)<"nS!$WP/mEu\Y%-h=bR$rDo[I)1LJcEP-"p+0@r-g)J_SE!pK2'B=I>dQ]4(jHl75_'^8=Xg7KW3V[0"A=q4quG+H567dHbS$443f`E:fF58bQC,rh%8HcB+]AA8[;-I@(_5Pa$)r^WS4^7D.#&2`q&rI2XH)^OCe"#d5C`rlFeH;Q/)/MQ'+;csI=!h`fM]b,]JakH'e_ig-2Q]1hLP4s!%p#b,(KVs"2nt_'F_T?E$=:>Ei34+2)VSQZ]c6N![Wb],*a*eh$XUp?N0Jdd<C(@;AMD'-i0JFNc@.>$OM.eKW7>P4Al+_3)IQl%[%ns.mXs8?RafO$E=K>VF\(i1Lnc5[<nZF0^5rrFMPDh>MKU>X34"+RbBU$!!o^6iiSLG>;p-1F#]*m5DW%j]lTmrn3>C?9qW?i.eT%r#+OEVL7@T(&V2J)Rgda;>@KDs%J/cHo(92AqYS>,fB;a+o#ZaKKi[%F5H1WSqHJAfZ;^dRjZfOnEp,l5+PC]Cs)p1ncK>3g^P&-%^:7#=DD$o)n*oKlr9;A<`ntY&$O/d=JWtB6A,)ZY/eKeC?spRWT1]]e0E2DD"D?b2YD!g7(R]QsmAjJPHmt,WSnu*Hk$0h+n,ceJ%T!Q,:k[S4</XS?U\aP5"),EqucHHsZR5>f$hFu<uok)JjUW@3iD>a.#ATl'=K#&'S$FX46&)OD(Q1Bm3ET_oq3]$]p=U^^B3u"+G%QokWj-$RZP5T5gudb3=807p+<jUsi->(-L=-cDa]0abHil[h4;`bMk(?<U5cc)\);l.V-Z;tgf^A7KRi8S(%359,a/4aMTtB&]#t%XG+B0jASjjf@2',3)@3E'.JbdXa7)M3J79&clZ@:n&["ARcc;D`EFrtm^LZ`AKg?_<\%kCrMgr[Ah1FXT^Q^Rs6i1uUf963iuA^F%.7BGqal[l#8e[s#LbM0EVmng@ZWEje__@EL7'GJpT(:7m%o".ngU5F.@n!h&bP%%hH*Vg9)?N[J3E**%c"!V1-sCcU'U^(l.5G<!%KgHi(kY!]0,3k[dStUHIDb:"MKhaPhL9WP"oa^RbP]8\sBko@>G.EU#U$Kge8QDh]Fd<BIr/[3'rsU59l8"_hrMdUm.(gE+R>rB1%/<_t/Y"BZRVbuN?h=5;<fWXc#%?>,?_94ga=3s:`=PGY0A]i]i0_/STj!($#eijGY>:q>Y#)g<2H&`e:kF$,'RFg+JQpX,]/XNjF%OF:mYaW#%tjJ0P_D:/VY3T`4ZDi?-_H2FFTE'7di%.9_1DX`U@9*6rOh\]0JKH#:cm`aUYhZaMjb=0Ma4?'qj6>2]?KG.@X+d2F5%%+/:sM]pZ,M`;04Q;5L4O-aU9X7kYrOJ#FJ+Vf-1%-^8\f9!BoB80[i4^fb+B2=7kD.YPf?1XkcJsj6*lRSmh:q$RcL7;M40Jn\f%^Yos=]/?tYDaqVbI@`;YF>(Z7b1#0`aRF4;4rI[2JTF2^h.R]2GI'*CE"K2i`\b[Q-5NCbQq$Q%%<Tjc2n\lHmfr48>;-tQf\C//%V5d!Xb%*6\`cnm]BDMri\leR)&ZK4oUCXJ%F_5.A/QsoaYH9]m/4r&Cj&YN`Qsf@>NTkGXC!=8TrPmi<OYg+1$8l=1;"YbHj:,\5%jk;<H4TbJ*8s2YR[qY%EHW'oi(b9ol`%C1\C77:)BD$3U5iJfR6'JRqS=(r-X0KcAoK"=#1KZ?)^AG,`@.?6O@1]#t/m`$T;kigU%@*2`@C8O<2adFWLaec!9FQ5<fhC`*2H^!9#HB-4.-EN4^-@F=5Rbk^=2kAVi2:>tJCIsQ3N4#_FRIr[*3ci$ra(IrEr,ri0geQ0>%:YkcOG^3m\94q)e=i$GHSQ25O^ff]f]fbVjU\V5D:V2(1788hU_eOIE2L/lsB/;1/2B-,s9:aaP\\##3STF+\)84$<F-'$Ubnnut%\2f6OS*'YDAo+W90C@n6aIP$B)nA'%$TWJk&)N,8q5sNt2p[6WWPpR,r"eU/E+<llVDF,pA;jZcFnF(E+HeXRfoclSbEhGLKX.s9%kEhKiRs`P6+b\`._?5i7.arBAjt;#$C101VWse[W=oI`#[l&=BHa9Nk[,5&g2$__/;uFel+`&t#bC!R&%YOLNla0RV>.I5a$J7RY%r6eto%jQ;,?mHSs?+u"Q>;d;0ZW2QV['cj0`V/qWokf?0XC<DQ8C5AQb!s!#L%ju+['OW\<@W"ceI1]OkMJ(s^$_I#m!#:Ja8S[M%b'"uc!`87PA2rL$BAT0h\)l#u#X2nX*ENFE`)6#piJnibNB-E@r5I&.Yp[SFG^aaRFSF0s[u[,OhD!c.`X9_W1\6J4S_*$Bdb1VV%0i#s6R[nBIYhR8;)^1dJgt"?ZcFpdJp%a<"IQYr^3T@^&B2.R`cZS,js4*H!TCsTPQ]Z#W>V:*QkmBjb8QYKZ^#LT+6e^'#4S`6c%:S"M$ibj]\o?d["G,?=]m\$CH\eF*AJDr2jD&mi4EcL6]b-qO5=e\HJZ/iOd\/L?u-Tj'd4R%.M`D_\850q,`l,<`-1#R>\^[r),%/U;pBDG:f*.Y-WB&m%"8m89a5oPT$WKE?*iF4"%9R8NV1mQiLqp+]ahO=GQLLV.:2:"(LjW40J&G9Z;E?<WoV31VA/jn-a0pWhaC%HU2fmo"J1!<hDP(UjPJCrRI5E]\`MMTiB/.*'$[ehC>;)hq4nO3j[_]V4IV/Mibnb\p#(kGE+K)O5HS7Ib&__#+Q>3(Pm0"`]u_Y%2@"+_21)"b)Bj\+F%7YBE29Xg@J$r=bb[GH@&q]A#(*/*%),7"/Kr/u58]:1#<C_gnh9+::cn*9KE_kP#dFKq>H5)+pnCTPL!/_F%5Pu(R?&+8Wi[nW>-+jgC?EQdrQM)kMP9"!u?L]hEn)92rW.VUpM+2PU"0bp0q<0t*SjeLeAO^<mSWuc-k"k/]YtW0[``een8o2j'%=^rG+F=n,o.<(D?^C_:TEPHaLKqI]Jn&'q49@q^BqD.IUfIsG5EW<?!4tC!c8c`;s4C;^[Q^Q]Or4;5C`k)a]_#=%eQs$RsY4Ud)%Ia'u^eRk*C'p^r->VS#cP46ulSjY?pZR2,!ZQV&j:1d)8bO["D_]FYFG&TZ<G"/$2o$*&O;q?lK>:OYLT;KaeKLrkQntsoqkrX%M%[/8S99..E<Ge2":V=_!YDeIA`k(?@+G0OVk27G[=g_hIqZe&qJl`nBbCb"eUB5aCNaXlD<hWLu22`;KDN$GlKHub_BeMoI*LtXNR%!E]%B?aO/B./@Ls^RBXrg6i!T.AmQA3\r5?NO//le3T+PkH/d;R'bW*MRSZFFR^rGB1hm.pUV'Z:!QYC21@0;gN^AIX$*cMbD2F-%).X!b?nVhh@LG!dQ-6<hV))2Aetf&rDEkj8mAQ^aN>&:5[<5,eX)Fu)iS#.fNN\P^m,N49@(O(D?9De6mV4@TbIetSg7rY:?@1!n%XEEtK1Y%Cb:\/n!Hf8iNcboQQ3(Fp+C(Zq<B>,6EKD(&E;b%a-^:-q6*VN_qVUr;RV?aTc2Y3M0YPD)&cWUP5PHu!A?!Xi&;-U.[%ieG-N8&&oP9g+f;[h$a%bq7D%:"k/b9=.tFa/eU$-2Z8uVj`(*\W\!BD`\J<Za%CVj4V%PiVDlDk-W+q7[%TehYDI5]$ELrp?nOp%^#91u7LUB5j3#n>lT@d(9XFH8,<B?UO(I54j`0e<Ma,lJqhD#UR<Wt&lHS>7L1dtaB7>kH7siRk2pKK$h',3>IOo/YW>Qb301<m$%gNDE1B"LJN)X@%b`m.Yt^Gp^;;s<<8jcSk=B>r^@G*Q`bY_PW[M9UtORpN0nYP6b'G.kpUHB!CKRVV65r?dFdp??T0)[+JWDhFNC%_@3=/7m$,l+T]6)q2iJ8FK@4h(#Ji*>3BceS.$(FOjE>DNbV9]G;N`B_q90#`Q!&HZoo``$q'f^lnRM^2Yos@f+ejF^'3j$i`l#r%3IRBVMO0N_KcEe?R:L!J^<JA&,'stMn)l)_2;V'fe&4[r3dpP\8sIjAYu4^TqF(!>a<c6UEcZ?%i9SbM?Mn9p7;A]&^"Ih)d8!&#%B7:B+`WP\#,%b?o4u^b4gs9i7lNlTT]6P7h^\Dh]_n/OtlO5p%86heG-hR3c(\RYOo6?a!<s:,ol;H7FSLc\(J+2`njG4\10</Mu%"/A?OKs)hWbrT@].@e+X(-!R.$SN]T:]--7Fds?/)foQ5I]E$)TURQlO5M7a>-eWirE=eOm:D#lj7V,g$?Bpa2J/l-oWJ>$Qj2AD%#$Fo.4KAW=*eKiB/EcH)k1jET&Y_fjoPgjf?8cr9XQHTaBkA3iQjI$aG0Asb/KsO@\jt(+@EQWsi[0b<'&D$gKNjV!,G@p^.$YK\%.toJ9##PB2GF(ku=#J0ro:g;?NF@%o-(h$r8gTl&F;u;uL/Q<9DR62Hbfu^_D[Y6k.@Rcka/f3?B][?>9ec0f.$sU-_e(%@-3Ra5%Djf!5EgDNp\/gEao,4$*b?g7TS;:/Rbb@sk98s9;Q,J@uDh8*MhTr^ff$O]#b2=>V$Y=A@B]pVcA_s"WrWh%8aFGcl&//sJN!E)K%>fM9E8\L8;Nm=.4,,Ll?B4mpZ0\!g^HqLiqm^>/QBtNSMiaS't:./7Ze<r<UcZ?Pm@&PmQ`6,c:C\,d>\J'R_mp1%&)KY._kQ-s2%j40=WUQtSl"UL-BI__&uoZQHP#2_!#0R5RP>iE/uACG+aKJD7jK=T8IH*]O.fm_l!Q6,q8Z&>F2B5sfOcX1,3I%*dhF%<lK16"T"%LeZed_O2EF`WBZbnR*Mp3.$Vt0;Usl1gaBkN:UbTX>DNtE;]DtX>KY8be[EY3K^-6euA8H)Y8WZ:R?_cJWHPK*rD?<gBM0r=n,>/%LCBnFg4KG*U=Do+lPr]_U&%a(i4`YqUl-%d:A-d_!/Yosp_Yj,6YZD9H-mZq7_Lt61Z*&>1'<3h6&,cPj>#9nhGB;/n^PJuFGZaF%*`N^Cfi64@YR=+Li-\oTPT[X/_Y:o+d@$,gZ0:Ac46*jZn_6J[>8E[*ca0fABARuR&W#iqif(pakMFG5kYgcFF*S?:]Nr;AS6QO@%oN+Zh6n"^*WjEb]o4e9(mBQa3iI:c0^lZ]\GuDNuMa-tJI-W.aR5\bjkUF8Z1!Fs0$MJ@U,'EM5D6fI&eMG)inXauTNfJ5DPlJJJ%'o;Ys*'@cDW3`&ch^*'KbZh!7-Jj?GfPkRHjjHL$$4%Ju%>>]&H3GtWI%Q^g[>L`LbLd&2JMmm&$aL;Qcct6(cDrks/g(i=L9X.J%`>OlA&i\]9D2kh63\2+f`u#Rt21ao>d[\UQI2J>AhUd[d%$Gs0pimC\GeM10J93crSLHVjZHas\AYk>k0LCkkX"h\`+dE$[;EC'm%q.-sfne-$&SAefU[UIj[6nVXR?MiF!KeO&u3J-il"OGaP1OFEfCeV.[MEA;1<1j6c1pes]li9Xk![uUK!`1]+e"^oK%E81QNF_7h%gKE]*]g0#;I2hc\f6K$D`0/1E0;isTA?.b1!Xf[&A5\]iM:-)5QBHFeqp5m&:"G5IoD\$PjDad^]hZRfRD=I,):-(/FQO<E!3?)Q%Qd#Y"WM$<Cjpd=i/[WiLTGc)Ab`R53#1F8X[HV4;I!5e+-p*b9bd-F([5V`<KcZG;iReJYHa]`%cH97nQ?HBk%>*!UA&/LagNS@*%#mUIQcRiKV0tP#M#6$L/o8buT>B?F%\$I>!X[b/E7_13sMmdX/!6XRj>s^/A'AJJe?0"kP`3qle*12s;^m@TN22_%g=ki%bBB<jY%mK,tgEM3s]*o>\^++A@PMX1mVm(Op16KdE>ZM@ZrMg$Dff>L*$m069kgV=.q/1L4"hG#ok/cY)gh\b!#E+,2CqGE0d/ZF2FmOt_X%Be%ULNbiCtjYlA0(s]E`VUK3B>tMhMEMSgh0+ki5]gC%^l)WpRq!&0VH.A(m$@eqG.89=DniqcOMY@>3]bI&E!(b"C.A=*/Ke!rH%\2"M3pL0AA9eQ4\n0^bnQbuJ47b=\i"=OhQ]Sj^KnF>TR0tmr69q<BS'&=ft&=o4Z;a;00.TA'#>OYgTmq`/]mp_hUM]o8+jaSo[%CPkrS:\2oNi-cZ+Wtd)Zk5=]O.T3%oc&r3(St8S'(Mg)Sgm9fhJ[HS-`#9R_.)Id%=KB/]1jD('a`5F4[JJ!h[Y1/P(dgV%QhYHa%#Xdah/UJ1^b'sb-!A)!S@&SqdCg:+P[1X3C@duC-,]==];S\RLS-:o*=#e+;2'o!"C$Lk3QNG.Wd,\mRQ$73o+&.%f=chl*TR>db%ecA?KED+=%pe#;sk)^3I"]^C27p'+:%m`b^)kuclh<n)(mIJ,XS>RRgZRB<U#*;>lWLE^@Ttlhf%LL^L+(HN47dW)4Rm;FY#![A-%nK8A@*6D6n9]Zmf]EKMXTi^M5,"W.:b#'JZ>.p!Z$k>5c@M#a4_V;]J5ie)r,W_gW;4;aoH6kQc)?H6p3>JoQ&B]GH#rYt`\PoWd%/I4B>4V5LZ,sK`WjmjQn@N;ReM%<"qa[c@b$Tn[)f#*3c5pN6pgM0Am#%ZguBBFWo)O+(bTor%Q&t[iO_+'iUjngAN]8JfUR@?N!%ET%6B1F8qJ+A;Dn?3q:oPn/XinsUXqogThSOfe,_/hh/'Ea?:c/7;;%CqV4^7Ji:S,>[ucbh!^k`B%IEaer#;Q>34K8F^VObrYH"%i;?ZnAt=3!E9:"2P6J>_Pej;G#:(%\8M5pQ,d8/FGS-1K+JH%H#;c_k*Qt6<Snr[,qhe.LY!<+oWruA3MsQXSR9@)0B3&4-.bI`L%FSh#`@5NGN2EaJ,0nkjtmqDf<T@`kJ4]U!r.!FHpbBWC)4;">Tc'a9M:776fIO,9@NUNE5Q90;'5^f0k/$eE`+qJ!X<Cm*CJsLb9%>^A*;k@Is6:<>cj=sfT[i(NHTLtpqQfsu4,'O[1U!3P$I.O5,@Vo[f[EKqoQ')ZFbla!X8$Y!7bQmPoZQl3IVJakQ3$a>IXZnRV6%&p_\2_Yk:H1r0OUf9i<Cmj$5rPXM0M/b+R2RpNKhM-0T1R%G8:L*cSh0`%sR)/J@>Da;;p)/nNc&.oW;r64bWBq'J><2!k@$9+9f%*[]]:!P4q[4Bp#U(hS0]O&e>DHnR58.eX45*KZ1&_aq?eed^d95d4n#6HVMg+mA_R]1dC?h8!nl^*Fr.Z>4`\jaVIf8MN;F3H1cn%0ZF+#h9K+U3Y&87lc_u*s"n8WGpSX>obHr5`0;<-)587YlZQif]?@0FeHn"FqTpnY_+SP&]elg.n:"0Spq.L"E-%QonJ%E=%$+Fs%;H#LljD:@1p*];ESf<eN-BcQc%("Mintl[$I/_,4aLO6s[#!</Y*@qPAP]`(P_;3sp`c=YA"+*p6l.FDrKVT(;0r['h?*h:mFL/#%RA5O@Zr]:"TY:/X)$^LfF!30-!T?M9>ji7?&#>*F8J14W@iFQVYkkraXZXeAIs-WBipTg[W\?3DAO?0DNRiA1gma:V<$01I$`M&.%4u7:"!WkM<9+6^m+7g;lb"aiu_KtW=mG]#bTN]XXjca$W:DQq6DrJg,Co(plN4Uf`-)0!)@cajqE[R)L/VV2M1A!\Rbb!;6Gr"A&%*NL#HXT.hDH&ZS/'`u1!N9]5N^AF(\8o0oi@?nk,ROOTf=Sd0'nq1m*=N_EUc5U`)Ko3-c#lZqL)Wt?J'=Sjsc.MA+g[cO4nF8d-%bgG`RN6(]rQ?RTs_`O+'E6E:Qb]QXG7]orkEj/6n;]bkX49>A<(h#G(!;akC;Io"2aTjcoW%&Y@#js*c@7r;Wa?4b.a:)"M-pCi;%)F_Pul^[pfc@P0c*@u,.S<r@'6"Vg1S?F%;r+n:L-7g/[A!?23?ZsURp5JO.f0pLcj=]@th>jp'n</#lTeTr8I&=!gi!uob->NkG%jQJ:#/oPT+%).'thMijme"#`!J1fCp92F7?PpMM@(CeV[h>ER3YbfJ]hem.:2Phfr(sdf.)Fh&@%&qqU\nm2o':s3<4hOKT-I8L8%U"GVdruA<H0:!"\Sr<.V<FgKE87C2<SG+pe'C2#36*SGKLb2P7lP._6TK@);5BW/hrYC^LUP,eChrf^=4\.u\:Iu0IEMf1@ZkDiU%aBKXP#6_4F7l']N9.-I)G9YQ,q=%oF8T0ET2_]MQ"mj'\,ZSfr"2B>Jla%44M-gI8@^iT;,/E8h509V]Wi.Hk6'Dn>!?WV>o\!O8%`_6V[Af#UH>)#ruM/'H%-AdZUloKFX.:6V4ej*'68K0Vj3t&`1EbUOV.1<"X3r(l>+0KK6;m1M4TWmScg=7YQV2:2`eNt#"ja;Tc%QcI;`LaW>Vr1$3']ODSZalQQL*8p+?Ep/aLp>*:O!tWdeZVF#0-k4J<LMPI8]d2<E*%+\:=#eB%00MEj&;E[,BC8QJ.oH`U]1@rt%,h_6"M9O=E+N"4,f&:7N@e`TEX<9/^ke;p81GCg!9.lcm3+/\.%H=rEPJpiMD,Q,^'D'GhoQ1V1k4Z.[T`$'k`(SQ:JW8WthL;>$%]tFNV[,;!@rKucu8(:-p2uoE?GUA)GrO_A=(jDPRZ/seWVKD(oAm];dkKL/!\Q@Tn'JeJp5.LfV+BfE@]g/S?8H?a*Q[&!WP-!(0%=l_Wj/HM/6%1m8d>KK^;0p:k^Rh,dTDrYDZ"fZ1(,^l1-PAF(G9XZnH?7J5ANVp4U%JURs-JRu7_Ws7;YicOE;&KKleiP/g&N&XM%(<D,MVIUMf.Sp0Wo9stAnQUK$)7UScEjg!P,0?@`BW>%u7D>],^)[>3Y=Q*_4lC&6ngY'&<-Cn^X'CD$ZEXLb&?IB\/Ah2&P9MgX%`JZHR^NfhU!huDg<U03#aXIK*3bMnO+jNG=,b)L#0UEs1']QgE;\DbM-&B@u6SKR`"kF<2M2Y$]2X($cP\dbO*=7pT?Rad?I=k\#%@h,h6+=`5W9!6@*L9!jZ2/9+?iLp6+I<l&m(M5qfhbtK17]SNMFRl%)e+5E<^!PAnCsSAGNrXe%g#*?J<<RU/esN170K%iu&F0cV%>MHQY)PXHD5ip6.gq<n0B!2TpO]oeL#:2C>N5=+,HW8NW?A5)QOM!p]2R7QZojWON>37W2cVT]984#V"LCb(+3jj\+'^<o+WOK?_%,#]K:E1)m6Q@lbU9XJ"m/=.V:?>(<]c;HJM+ID5<'FCQ)laM^U"^413W3eOf]e[*VBooj7nt-#uFSiUjIu6imDe[LR;(_gdEmdk$%,run8>LDc'hE:Q/igk[OrlV-)Ieg"+5R0)#H%]=P%G9p5.EIdbb?UBUHXoqUiQSNd;"V`[j9*8Anab?^+#"dc/EsWIkm5ulH]m>M%b6][')D-oZaHI;\q.)0UH47eIpG<Wq?)7p*P`1-[=_$IN`qKPQk/+WuAR6853(Vh:kAXn1%HILd2Q1)=j>%R"7jC$bR;Wt%^H5&U%IN"\d*/(43XZClk5V"G0`-l'dQDSA1PFc<C!U:2heuOXY8K(F$(Z[IKNj'WE:VS42&gN?[lPAYp1-5aCpQk/V7fMQWOC'U`WTFL]%C=_RL.i8=o'6+kCguu'9:_M1o$+$8eA*EXl74V'QSq&3"2l.i=lWa(Vhg82`OVW=PZ=..Z2&*?66/kp_jW*uAM3$@lG=<C-iDE6A%6G)(ph>k,!0B?>C7sS7CjJdM3r:S:%Cli`qF:7/@;%r&JeNm-0$Z4uI_QDR'K<Dl(rW!X0=-oVQ)Wd=0@7;G[Cg>7d`%HYNomm>r%hsIteMAcUH<R(__[9'R>B>(T9o/Hrg15I6ToM%47r8pbV2%S=0Doni0H-#'`nH\0iKB7+<-@$A#q,o0a$FOIJ+VS4`7K^XT(Y3DP%D?SodMOT5F/m?ErRjSm=R]183<d&TCJf4]HO-Nq%\*Tq!o9U/$:"%.W9e'hWIU:1M>c,OX[M?F<-">sS#6aGlDVaEpK/XpqXQHTF%F5EE;jMSB72R'u(=s[NY"sO"/V]X9NAX#QBJ>gcV'+<B=/JDHC2&5%V&f#MMbD$si<R'XbI%KTaCb:8ke0/#i]J9KYn%)j8&%E2V%!W.]W474UUl!jo!0$=gr9]ugcM\:gtqglIG'hn8U;HuS60Jn2<RgK`o\W]eYg[;qd#D4$7G$S*Dp$"U>"5f96p!\,qoX!QtN98+`%&:^5Q@37MSBYa?J4sJ>uB<0;`LojTo5V$L=`;>h5/R*0C>oU7VCT4ar>hG[nD^,5NP!QT=Yb&sZ>7<6?>Hq?.cDG`#KGUU2]sa\@%WTdjs]%3aq:B0-;B](,W@*pPXiEJ\-+Wj9fr=C.&5r;VtOP!`HSAk.<KBp'&Xrdq]]Cd`#_%XC_rN@qNkueFt"4^nG^.=E.ra^,>%dIW9(0c")%/YQG9flcV!=h[Pu.IZU^4kJ![8+e^8`s2a[_h/`9)drlG-Y.bQo`3Y8;$r7hcdAtT5-?7mfGN)$fPe9,)OnuBU+[M!%c,,,0_=3=9^F)M#WZ(sW"\:HTUSESpn-#ea;\ODG^3aoami"4"OIW!05"!ORl+mP'SB>7kf>2h'Pc3DS'ojpiW6+J)CZi9F)ZkL#%;$pgA.tLdK(I66a7WfI8I\$acT-(.8l%<V(D!dJmhrHJ+J2,g;o.>Z+fAW\q'IU'.L21kr1_>A[WDLYoU/YiamZ/63MIuqPKl_)i%G"Q[/(ZL8T&t-uOJt9nn_VkY$^4(IR>"9KlP2S?9Ds-Q/E)<8pR95u[,2)K<Iota)pY-h.Qi/OQ(jJ;.X%D*1^J1)Ke*1m\beWlL%U7$kf[X&%l?%ct/p%HfI[!(tNo6;l&]QTlF[8!/[&M?t0+AMcZ*%O%XBsUD])Bi"uX!3-f,#k'6=.&@%MaLD9A'!(OC=/V`T:pTK%=2B@Gbh@&CgBCV%4=c9EN[9oMFX4GC><nfF,Haot]FSAu1c=2eC+0VmIu,>"1Rb.;rEQDjQ:4QQFnOUjC5ORjp(@m)8%Lh::"Z_E%p^W@-6`&ai*]k7CA/kJO#m\FK?.':n2m?"g(,9S0s/`<g[Q>Ur!A7#-m;d-/,C+US%?8\kYM8ldH>l);dM>Z8Jk5hbS8]mqEGI0,%""Tmm>Z`#:WUdj5P8C^maI3KAajsM-.3?X`)UG<E$6r(NM2eGn/]eSf])t>1aR_e"rc5PNCqG%JprL-!\hsJ'c?kYJ1rV>F"DNc3%']YDuGnT=HHBsf_;4>g%hOCoAB_sVXidJA-KB*e5&8Y3iH!f<d\Kja)EVRHrJ6na$<<8t3dAiSe4<H#VD+ENe'8@4boLAT1Hkq9q%,UVEp\(V"pnGmqYi+bX>%Y][6/@oG(gE<tc7U8Dj.gCbINRRee$+I?rXP5_BDS6WD+_EkKEDPZM$[E23eI,IqOR+]$EFQ4T:r2ac%[_-hL"#UNIclU"t0k`=Q/kj[kbsp0=]*EC1H8p$@,[n!QU#hb>@J+'B\Ith$SV)lIOUnad8&VLARo]X-^G@f!Sn.[**b6b"[VW><%K6D/3#dQ&/q*njtEk8Z)ZX;-m)TX5@7>Y28MK9<LWUqUs9o?7ErlQ1Y[hJV,0gg8t`E0/Z$S3j,DBf0MEcj:Cb*W/DTR3HLYghD.%?M/RcbH8&q`LI`$P\7F^Uh/A&ONNDBk_iSF"QakDZlEqi<"bt*HZ?E-J,4Mt7G_&SBl:Sf5W6'5:[*ejF:aE7K.a>Hh;M=@079@g%Xp(I-N't+?H(\F[nC9/5_0/GA/^8',4O&@[O+JBa"bWT'd'&J#=/6ckE3oK\\HkGsjU-Xe$mTcd58r:9\&pCYO0I/sT8Mci"dTnW%iiSIVW"*;GGT;)=m@[LRI6R#MU$NI`;qh]^YX?:^Ubkr@j[cZPCpqEm5]B(e^n^ONlSAqlJAUW-f-/9RW+I&OmsE_sBdMGj1,V?B%!iAG)DIM:PW-<S]M4G)EG-mN[4S=^\aDC*]%rB<u@\SE`J61)LOHfAWfF:]./]Aq4MReci%paCq&@*DF8-nUlj08(d6;_QG99Rre%mQgr$2ONrH^i%OO^-SCJg&U8UHn$L,RUagBOc4X4%!Rb^V<c^@gOfLY@R6h.^!4;F9shiilsErtBPt<3+Co-@3!G@^hiaN30=AYi%3H*h;g;BHNm4jKm=(0XVdd`;4g%VoT7;+ZYqHI2):gd0"22?T1<=aB*r#O%tF&fL4P=9l.0WcOb'9G<>_`n0TJ0R$o7pUsi$;c?i%Bt<J/*_2jU(2NM9(s0CQ2,fFffkjMCUSKY+=OHA)-aRtB)CmFSBY8JLOIr&=+JPeBHr/7hfW@^L'F^Yr,W8lF33!7jn6O9WqqB"m%R3l^30L92M-:WCdb\.#_.I`*eB&ZtRgZ]*aF>g"as"qOg7k%Y<0%rnfFnl?m0Jfnh'/V<*XNp+8BSp-0>63#,_fuZO?K(6krm9a`%XK\VA$@>-D@@+a("eMM!98#m)?eJ^[i.5^D-HMlG";S^C?Xb0T5q%\=g;9@iC+V5G,FLTQ)rt*t\#D4_[Go$VgFEiCDH`N$jeBk?%$tN)a_/3Y[3:%.qqn6=[=hWd#rk<I+V=5OJLuI?bN\=^2Y:(G$jbsFN6dD`Uc\$J4eT9p(R.J.4?N7u=e@3)1Zi%i#M#"2W>UhOg%j<k+0itBNDOo+qEY1IsP#`]@;?fBGknlQhlZb[NO>SuhZ%hZ_TQiOU%LMh`c*c2h@X*5G6$`SFacfMj"#9PXqm5KLFb>uI;1)'[f%m5=<)Kmhq<6ZDm@iHibrr/1:"?)5iddlK;&`%QJZo@\78;3%mNE8dPOcI!1%G*[E"5V`k\qc<,?H.b\.aUj/NCA9C95NP=+ogTiK%]EULT=$r[9Sm06Pks510%JVLY*d^NM'['20Oi#f+g&P6mZSgdN`f6Co->j>5c?l`gKbs57:EfnaI:bdk$Hk+X[`ppsiA0E_2['i`%7s6Jq%Hku[^;Q#U"s-/]30`-Sb04q\O`:1IiOLb92cs*kj+7'k7[$^Pq>r)=g`8=T?tDSV?N]bW)57E/-2:;<"'RC@4jV"Q.%lq1%m"OD\27;o=b!9ktXmp*$Z(qNP)=./Q<.G1m3j[l5b$S/geUN((j:Fg]&Z@EC#bH_gp1ktI8?ULbXFLAd8APL)k'AhO<!2uSj@p/o%b!>R$KXKHRh^JR0I!L%UJg/jYe[ib#?]6374A[/`]r[a)pWTtQF:EfT2gO\;oNtYJ:&rd>lc^<BoQ$'m"WAM!7SXC@`k5EtD'bi9%1O(h0%oUuONsE9,PYF@=e:8>4o]&*:%.qDMA$$m^_ZPTJ-3MH8?W"/cG4kX3"Oq]/CT(Y[1n!4`%j<6ld),SH+-Bh(U97$p@r<2>%ql_e78jJLY9pAV.>,jGBcND^c2fSHIj%00hoUsFYlOIBqGhPjl1c/D=b$+Dm"aTQB[M;W0R0O[UT/7JgY1]^E:'U>6N`:lJ*sCl]%^pGe@&,B.*IO1XXANIbTT[6lb_"'b.ea,q)%Hn0t,AU"bTOmFVfaVE!24spV&%5X6Kp6Q<JQD@@Z<me!UE=1bRs#O>F08Zf5DF8l%79nRQ8#QK+iRa[+)UK\VI^-oEJ-%,#fLj*9[Mc6O'S1F4D2Tmj:=9n6W<"<,L\"/Hq3>s50&gf(^;HfRoXSV9WWJ_Z8S`#L."idp%IC_aO?BTbKTJ`WejoFOL&a6:acDCruGlQdmn/b^5f*d4^@<2#I"R=c=R[Q1o1km[[!,2"Qh'UBDW\":C6l\<cdI6[7hn,R2_ZL)!%hH#^MfNrbkBeBdESo8@Yb@@[eeHQ#B@+R-X?I'1UPlb(Ub.2*kc,a$h:`AdY(G3bR_[VdRhW>qWpSK)j)m$P$F:WoajucJu`E&l*%dc9Tu5d/P?CCR5I<GDj&_0:$+WCVSd3Qg8SF+"<.ftau^Hd\>>mP5Rg!4HE?-SWGKSI;W)T<@!-GU(2$qH[ICkZZfun7']<,u(C'%%8<sZ;8%lu0*^Tt]1m%h_Gh/%a2S#NL4QNb>2:cS#HrRK]2\qn>&n!7^AlEZI^_5-]W'e*[Ngpbh$o5bc#GY<rcG2,f2V2ogpqXf%eFN>@2S"5TH=,HW>$!PV4\F&Nmrm"AB3Xd.T56$8.GQS81[90+!fp+L]?_-pD0:&d@P9Y>SbgegUDI2./o^7K\C+ZF@]7'/_UP3l%F:W<?n"q:X^\ZdP\<#K50spWqNN(co>%VkXorc-j9Eu>W]?CJu$tn,cA9#AnDYjiK,Vt_CSZQI2d*+>48Z5)%P2\:p`=1Cs.O>uT%XH=.1]p>gefg4T&Q'n<0Pc*$QR.+!0F6.5H_CgIP%_h&j#nLZCkO+p^K2qUL3\X]<?;-L^RlnW#cOST@bQ<]OeWAHJ`osg:em1W/%"nN]?VK%gG$MlALH.*,lS9ns4k,F(a/'*>2k0T)QnJY^^!<j6%MQ-a>o,JL<6'KS&1S*\D=;fK_-WQf^[%7$BJ\jN>-HU;40[gmk%JEBEPcjPJ3$ImrqPENBrn4J3@//H\A.**rIr4`C#P5u,O@J!>F"81E@eU\W[Qs1>eahdPq^C!f!%ta$F<<_T7<u!.!`L&jtWoD/k%s!g9"BE2KK9FYZF"]U<SA-BV!\(-&HQpNDtBCP?bns`8\QQ2?`Fmc<;oVE-/4X.(iBQAG]d9?+Wf#h=7,*H;XB!ZMhjf,R9bJYY$%]<p19KbP\5I-Us>pj&1/O+I<;+).&d]hI$ri-S19i3gQsRfH:fG%Z\EYD"]]D])Y9aRYGE$kiVj>6dAEAj5@L3u.gL+BSah),K'D%>;U%@UpVRXoT2tdCgMP.B=:*!N0sEIUbsIF*"4[o/i8aAp%T].4C^K`L**9=FW=#=3InqU#0"lhKd?c5X(i.bE]e+Q5L-=:d\(,<%b->0+A4"U\d<#*Q.)u0obs`UT9g\J&>IM28ki)hjQW[nMC\Rr1!\s><`QFG\L<B;-O'V[i)O:(&\M)tceBa.3Vbt5?#-WCD:TTX+%E=ftDnFf&a;ATO^]HoZ(m-79.Yg[:ZRE[80?"`"qZ=7\\R^5J-$,ttimkTA^F-'ha]o_:c&8TP_A=qik\`q5=9[?'"Qh^$kNVdcd%7_n,9AH[\AYIcAQ:prs-/BjuLP,Ho%e"']oD6KNaBr<p4^h`%)f)%R*Q'DffU/hWo3!If:7O?PBZuQCd=4*N&(=WI-Z<MPo=q*l;%/aq"u9-)cA<PE8]\Z[.Bfr'dE%3__4f8L87kG3.4<(!(D>Mr"=oIl\#rfT^)W:>=d_Q8l2je[[bL"oJ%CnfQe<]pi?KqaTJB;pYW%8]BeL?0TSuSZV,sB$<?uHC%i[q.a*2gZ^J>hYD?.o+7e_3WC8V5^m<5-5N=$K7S3*],>?!(b2M6DobCc_Zhah_V\-33-X]A(g50t%<tnc\=S8[<ko%sqb>etZU=^6I#a(j?-2ChDR*>1.EO)>/!R1jpe<,(#.0g"!?r8djP^0N*R+q%r2"6iM$jQ_e=)pq6MF.6J21!EK%gZ_FA3M^OoS/5*D'Q-nAQ&4U91^s`qFK3'\elWi@*R9<#htDS<B?W#C5)GXka?TKZPsDFZl]2?>>6oKKm.Kt@H+&c,[o[4`T;3>#%k:#KkP8*V:Nae_e?EVH'86eXgA73B^gTqN`QKZtj\f3&$%]+\Vc&QdF#0d1WZ;utmnkAs;>01'@m?oBoo<F0.QFc,#T:l`7NFcr`%b44,-l6&(;^"&K"1fSJZma,K="-FmS0Y5ms'SV,):u&I0.)hK[-u6*LLB\sM<,mq:7rF,#\\*NP.e'9M%AEo692X-.$HnCH*j9At%#,q<,=u+fEG/S*[73RC_/8G7N]G4G1CZX&lTce+R"LpS#n#AQX.3DS4P,\Obk5-&+!/MA5\7HrgTG#.)F#M46_9[>UDH-kSI#@-<%jPudPH!P/b@eh34WV8^VUoU26%$@7VrGI[BL.Y2NA=m(k'c3:Wa,/p0+:L;j`6tI@b/+,m>W+6YKpL@K(&+7fB(OhMg5bG2?Qki'%j=:.[>(Z2oC-,?7NR#14;GgUNaXS).2G18IQ@E)$8+7Tfc#6g[-IYSp!f,2hf%ooJo#;</2/u,ZF*UCR+bV'.^9n5I\Os?=mSi*m%G;[luFQOTs)+JHR)JUDLlSUAN!S#e#Yu*7[Z:]a3PkJpJd^(^)Qo(2e#s]f$p0HK89fquY[nt>l>NV`)\j9IfnLAipePN_TMM*oc%Mgeu>AnBg(C6`jONspbP7^ZX3:!Up4^UL#kLCdX5H"mOKB3)3T!]CqWdqBgX!.ZUdSQQ&'G/poM%7d<CaX/UE/=`f)YMZi%Y&2]M%SS#Qf7bIN&M3-4=i>r"!G2&qFgVL%eX;663:iD&Y?#lRGa`ku?:/\05%F4P2iUg+H=e@.-pS'HZmRO#V.eU)LgEZ@^l'VmmQVG6(%gbZ6kk7]pM]-"FA;;Ub[.>u)X?JAYr$*UnKCX-+W$K@dXpO\qZJ&^;0)107A],]f+*1n]0S!4O7(&/s^5dsq(2SEhP^bl:R[Zn$[%+pk1ela(ij/Xk[8Fa@Op`Q'PKkc-DiR<P,D/J\fNW#Io@.G`g/`hKSW+7SY.=>\[RVF=FHZ(:j[D:+Z3dTSl-[qN"4Kgf4s/YuB!%2lh3Dj]FdnY\b8b0QFV(N@RLJ1T@Ceg7=]6rEWXF"K]U#=8DaHB@?"_.K[E4*L9Rgj9"[_IC`BhIXehpKq8%HR[M-0>:"F;5!>km%4rT]s/OgP+U*"YPCU4hJ`d[Vd!hiSKiVV#e;XYTbo"lWn%.CWdI(clb$<^."qQY0]q"2;b%DfHcZYJT\&)&baB/@7Y0I(f5*>tJm%Dn(-OKhf6=`/MBjWmAi&gi`TaHk3`ai!];R@^)JAn\%sV#5\-`HnXkui=!,tL""D04MFngKkdqV;DmfSn:o\GTmVmhea??)L3Hgf%,H:OV<M\,U[Wk1(3\1`F^`=uU'kB+WdZI+X\Pbu+MFAE`mAWU?/)AdE2/"r4CofoGeTG)"<</Rae>qg1R-hLC"^e%W?HHcFd1l1)%=/dY"S=hXI\!4&i=II4mQ!dEm6Istdk.4d^Z"n66LXK]49Xtt:P_t/c1$VtI]=*nL4a'I1E)X<#RZa\Th#G4@[\0sfc/'k/lO#4F%r_/$Aa(hV%0/s93W2r==]_#l@I*6`2&n8ZL"NZlIX@sh&V^p>QUacuSHC18g,q,pp(6B,nOE+qVgFX3[4q9rJLKqHj1FG:iWfgq"%0"[b/6aqIKh:h*&+5TAoI0Z;s_u'6mFPD#dnbXj:^`L)S46Yb;"[B_VDYjo)Sb^UuU"d;6DI^06#PZS^ha%LKjWE/C[s\M;k&/"r%m@i:KK2/k4i"LJ$[dTlQcQnD*5-Tf[kBuCSpX$#o8Da!jM`(!ajQ13%g+/0Ke9><V]CK`)P'aI)K3A[4]mW,-8S6gH1R1rCn[aGQ%1Q,ZV._WIYUlsJEf"JbeFc.`>-9=#nY;9C\PKKCTgfYtJoUAL3^hC)l_J<'?3PNh\e#mgq!e.cUN,76/V\MFiVNfc4>jXiL[36tN%mZYtUBI<S9b10O@fk8d(>1fo)XrFEY6/TZS9euTHrEcdFVH%&KXk#qgpF_*L\N/K+Z8"W3?Gfg<*N85HHS#G!g[)@Yia8U'ZeMX?%Z%bk(h!Fb!;UtaAChq7uSM9=B%boGD,tZC\0=]Dke&[k`3Q)2((.;Q@>rfGBo8m0LH5.nTg<s;V86WKil?7&#m<RTu"\G-iB<14t%&8TJ+!%im\q';D9;S?Gkj@Pa71Z8JPl>GEe96Ud3[gu.Ulr)s5c@(*2UC08!>5<SoOWF=+T]k)dCe^+sFBi#P^W5J'3$a^QOB/Ge%j.GU#5'[<QgX-Ekp]i=:>PGdGf$?X2qjnWJ[bRXamAD)*FJZ?.)0WIe'SLnS"b"N8UY+-<1]('db>cR^'O.nWq]WLNpuUN(r0gsF%m[;S\bC5#;Z<hNjad-c)*CD>g=6X2GDRm.b'^!BE/&eh_Ug;L=;#Xs[F\^c+T?1_75Fh'T[O6E[fn=2geAD&%VL#8Gf"pJuJh<Kn%h%mG/K+6-MEK3gh:=q/q`8r/%ZA-1)DS(%@2`W^kE*Hq"eoo1&G&M,:&u,NTb+3kHcko8&b]UW7q'^:L*\2LUWP6ho=.HOYj;m!9%G&35'>Fg`REd@MO/Z\<cpP[(`3V0h.8E-nf1qonSj5okcWc[6jf$D]W[<##ShQOT`Z(5kqo3R('Y9L:mP-!(^%Vi2)ba'EST;hAf%3bbV8W+8KjMN%!T1@`F918VZ61<U?/(&*(n5?kR`Q6_m;#I`edH%;24g1hEB[ca/L;<nHa>NM.!d\eTNE#Y6TiF0LmPY*%!aK4c"%L"js<>ERlgkK,50C1l>h,"uCJbrIhkg1$Dsp?akeD9d^B7-iY)51HW;o8_?X>(U;sbF(Q/-aBaq-%faQQ!2`o.t@ENYbajMhUk$,%%8C]]*a_do.&#$-K;PIQS+8"63=L29GqnfsI<?KeAeh)!Sbq^G?+[h=,sfC]g-W)d/I&"F8<Y<7>deNKQq)#]5-Ic:>aa1AE')A2%qa:8>KXmoO*H?RT5MZ5np6#;m8h3m"::<C!+7:p8<421MgU8@"cg?L?);h(=$,1gPSD7;JFnXMeE6D0;1iCk=fR>fF2=Q*?5MTit%^2lm'#PQ(&hH@$r=sq"'?L^P[Mg]&/jB?@+2kU&J23GAK2#9#>hkmg$n(ZFc!]/p8?oYFB$[e/c-]b[nqq8[c9;fIq:[G>nj=d_Z%NDk*acQ_I0f?'7rm51sD=$5Bd2Ur@DP:N?T.KXI%\BgTJeJ"k>p7jjW1n!e>6MXPpfN)1E]PfV:l2AFT>.0J&Gk(COX!-h@9aO%I%]aF`)ZOp)P-Pu.4ZU\<j^$Mo>BFF3]cIA^seP;jk;O=gA*!m%_GZAp?dVEJ*X6rN,HN,3O;GlJ76WCG]8H&RqIJI&H3RdF3E"AV9%+p':D)OqO2mAAW`^fcf.D+/;srm(8a\b8t:WXQ</?@0!rcI:,*$Un)BW?da$NTSmW]C?FEWTKS?oas5:,5(?.SJd#sVMbgXN[Q+E%aUpt;4uo?ne0da!OnrT:%CCHObn.Y@?a,YLcom/<!@OYIBTA3b304=_Yum'a?XU3dgE(2[SBU*GKNmfA6K&E9$i0jsE4LGZ+L7aL%Kk%gXhQQZ@L;FD6.uue,DFggIoV$5E=8#)#]gLaj'+@MHiPF13rFLY;9Y<kbpn;N>;kh2?Qr%X5>mT*q'qR\_)U]HDM%$`)g<=)#%RXl-igqQ?STS[B7<AaR'e4X_0QNMu<G!t44@R!&Tjn,9Zgu*@9.j3Akm>hbc.pq_X?9%iWeW#9JX7"NTb&?)FPVZ[e:Kn3>s8M1)%rjf>=]Y40r_V+8LfC9ADC3CuqEh46gE;\tnpL>cIV;RpeB(<Js[ClhlJ'=MML?$Q3*'60_>hnVePR+n_$hhKO$(]YfO$EL7q>$go%[qAV`m!]r/ph*c`h-YXqR+UXpo@rTu8Y*Ta8(`ej@pOGS3ZSNM49"tL@>^f\@$gjUZ(#Ae)I_fq[O-/i"MQiU_QMVVW]qkQb4YPt%n(Lj,im+Djf_t<'42#q5c/[7:GWid3e'6d6lLCuOlZDaJ`(oR0r-3<t@H(N.Y.S"bfNZms/p5K)`J%DtJ+e>8@QQdNWTC0f]3k9M%=<IS;eW$JNp1tQENr(Hlks`tHMlS(sBJSP:*`$L[nS<01U`l)ZZ!;$l$$O*Ro_ePlC&c6BlUc6#m[i.Z@m#"`0:%7biH$k:[&5PY%n*+n9'U@a6UgI\+3hf5eQNl`r*E3DjI<HFKl2EB8Mfr^lPA@t;DgL6K,:arsd<RcGj"lH!T&6lKb4tmhr0(!ZD0i=8fnZpm@RiU9%d:[EpSFsObhm8?cJ4FZ=Va[TR#c$WR7gQg"U%L*Ld<%bEJFp-,\nJYuKibGnkE/0]%B5j&1/ArHRVp1IACO->nBl>FZ#l1Mh&JPG%DK`/T@A;uj:mo44#T8Ms)iCJ]m\>#gBY#?KNG,GT17E+Eh;#aqO!:#f&M(38+ku>AU?RDAkpFB.*'B[m]W-,RZ(m>V)d;(ghES#R%\tN6;0l+Y"UZmMBl'T@.Bf+YmqXJhkdV-3T,c)`CVAhiZdDC7gBY#?dHe/tgD`$:4;/B$rE'G$u=>\h:MB-[nh,#ZYbV<-S8(.q;%`OR4SVAkDhS(k9.j*mcf-HD&bAMi4>m$E%3*`4cM*a*-:.%5$eKsCi.AC5KT^+0^39fL&^IY?*j6`5<H%\a7r.>AQ1[6dG[mX%pe%QTs?/p)egopR/U,i[]k)Ip(D/_jMA:FCR.HFq<is!;5W3"J0>U`PLii9oq"$XB.>2SPDm!P-QCY6DqL#Mnpu!?GH'mO2#>Y;sZ67%bR0)Fg@)F&qa6h60WW9ZBnP,4!n_!RM8R]5Aj4Le%;F;+R$#:"QJ$a"?2Q_Z,!o,V?M;Ope6n%^Eu-8`^!PSa7.S/LGC.gWR7.%&%QFWJ]/ZW7BmXRTajTls`5C#J)m\]b,QU5nO#ZHmAGDF`tc;`qDDC.<,_j7jV^2WV3_*W@$G4lKHn+T\m_#ZI3\U0O*@/GnhE0hY(%1BbIQMVNi-Z/6q?!:OQ892g3Qp(9jIQb3jiCJATYZemV;6Xb)32SK8/W1,(7G)rT/h^>uUm`UHGAU]:Mm\@YM?L^F%?_86^-qg\L%V<P=Xm@lsmi.P%<0CSPF]1;&o7ECM3)sZkZN8@C[_`ZeiSu"@+%$?TDLCW`Xk@fmP1P`tKELijf\E/Zoc5pp],BXWcAuSN`K4bus%Xj4j:B+1kI)Sc$<5!6]`J:qaYGa#ZU,#03)aNX;4eL+pH?/D3\1Y'TE&':f%$oo'/mY.=sVOR<l;uPO"4HcW9@$)m[^$RQ;]tA7Z%aCZnR4'Mm++.jmlZ-HU^BJf2JJKl92+\k`)l?m[f`a-T)"BbdCcTVFKL:fSbcZ!m+!sCBL\U&_3#/jiA%!ru3EPDiKiiR^bj8Can%1#/hHh/)VHLTPMS)Z)GAak:ll]7W`9ql=Zp2=g:qa0:=&Z.2?qB<QQS=Y&SS/tT"@b+!be%q":5OMf:E_0Ye^G6c3(Np*D<1F1#n%MiU"]]"m#I/EZTMbJ=9rT1j`7cW]Z1`P72M:Sf6W=,nE-QEUd3ZhEX)-$]-c_&Up`$_G6@ee4:JH/\H5hi;`&P7>pe[738YAdi0q%rI+S\&o;L"f%f6na,jp+Ht&fB=b<%;\(J7?1T!m=+c,CUpX++DE8ilI[eI+VDT7J/lgHX/W@-s_q\6)lk$:P/q06Hmn&brqlfl-8%Qsq^I#Bff0qWa>fb$KG+[5&Z\3h#:-5_<FGP]q4(Y$47*Y2s6"h\as\:HqQtRT1,m\1WtT>XuIc%[<D3k.)[H5A-)%ArpH0L*Bk5%>UaUBEfX/*2kVANOd(2d&ZJ84j&uS/\CYWt)"\u.E[1^O(=)i,hJePt_YP<)S:1A8iPM"<=)7_U2obRir]4"o:Hp`,ijnjWP9*uW%/sXL,6jm='3'FhI>C1Rrde)mm\N=rnlSj7>p$/cPIWsfN-iF\HLShbP<cRQXb/@&UNGJ3XThabdV9n$7GQ.920YCIc3k`'8-?je-%k4^I(\Jbpp48s0slc#[HZmkNamCb%E<Mqi6N@;eDNorVkRM:Jmr]YDbadI(2K((*WrXjE?<4uLP2"pD"X[rPKp$p!sCQI@IlLaI?%V]8jc"Kp#Zbr#]fIe`=*`(h+T*3UGY,4A\&<(1d#kBd$daK"65Y&O.5;[UA=omVX=F,N9:43)PW_0G=l`J#2`IK0!:e"Y9_aA*ci%44DTRYKrd]\N6WOTC1JV\Eua8)N74fG>IXefRq1cVh_3[p2-ES6^+9pFDA5".V?"fq:`/a9JU^HQ"P,Ne%T(f-;(k>DuAZ;%]6RI%P))kW#9D.q4X$`Ol-u<4)eP+&gRi93PQ7rL]qWsKZ(K=6SNaekI<uOb2SisGLACLOXCtG2q^;70OEqri,8o808+c)FcHD<A<b>Tt%L4*Q%R+9d@04Qk<=Nc'p3p*QNU[]uBd)"SkQZ?kfmAF#ENlGrgdC%#,GdHfm[Ag]QB%2lYSc*^K]iM.qHK3!;=cBt><n&)>/1YTu%>86"HP0ipk8g;JVV/-:7m%lS4LRGOqGHO1kSh"\g`+=8A>!3OSH$eoBY9S?<D]DK;7Fq&TjDM9Th#7ug)agUoF`k54P]hIrg[_iV%_>B]h=VjR"r3Jl%[?IZ`cBKP?3?O;s.h<[l2P,Eb&E-+mKf>PmZ0:\S6mquHr7e#?D$F^e5H#X<h]ihSC*;Gk^#Sj"%d!Vo7grDI%NR&<]3?_43L<VCj_0pC8?eP3N+c9ER3k;uWIZSD@YM[#XMX;/%ZS.4'@Cb1>,U5f@)N*oUj:PJ#rC)fBQ4G?2!RCP/jn!NN.)8tq%!,'HS0aYhC(%lTqj9%gOmSBI&cmZ]bh]=M&r<hogN<5V-#&nJM0N!A,`W4:).LL,qHLd&Ci$cBD@fT$VaSUksS0BLZ[(]7q!fWll%T@F?=q*qCbr;S4gfAF\s6u<sS-suFSnc,^>hk1bQaG]WV<Tj<oMXkbAp?Os?:X^OAau<0*GGI\'#%L,_]I;["e?@Z6.,RS0nS*WE%,!3t]p<3tgkdl5lX83i&,hJ1?L>'8Bhs@nI%TCu_9^N++6VXZJ2dIpj.OQ=FY2AlOIL"")2,MnC]"2]UI-#hCqG"0Y2p4sfa^oI,%<PQ@$bm135GM#HhU[V<CO^(BjLbu*2hu;nB:9Nol&&%'JlMC2*I)bF[ql]7oIh1(^eFaaf8)2i8DSL>mp=dVY;qGsa75q]2Bl2G4%IPXBg*C3uG'YcM1eSeF5J'bcUqqklgWTuJWNd)6mn,9hHe$87FO70<LCf<L2UT!K;4n(U=X:ACbDn;FmE#+o@fCbX4;B,A<5$2+*%i=hc^qX#<t3a5n)l(fkr`5C-uS*k5Y2tfp*=C&]?7&:o(gr!f*^PT8X53r%ck3UE#f5GDkjKaY64VXLP=ZlCTO7*A>=R@*6Y$]"#%A@BXaUdN`+RpOW@cMlegqG#QVbUjl1?,&t#?)m`qN>UA>?,,Xtk!;1SJ@^4,nKKr;>sI^B4^Q\-i:Zm=;d=BI4ha9'6\P]!n;u<B%Ea?F/qQFqS9Gd)/W9^q-N&h3GlSnc.SN4n;lh]`<XhauNrHb#7,s>5ZDn;=Rrg$&Nf5Gt8^S@dK[oX:3XS)>uVp-^ap^UBW04>`Y%_VLR)eNdETfn//fFlN_*lSgsD?KrgW^96@HRla[DS&EA@>M!e><Bk&?5?(q'l-K(^FkM7M^Zebs%\^Au;f"?fa@"PO)iAp0*0YWo%\pf9!b-19IZH^^!f5FnJe5cGo`es2jY2@%3.TS74375?5PB,!\Ia\C.8*$oWfC^)?74[Z`W>`a(eFhQX](RQ;qFrn$ke''6WU#ns%k?q<)8cG%QXm7o_7k!cge=s/,.>ZR^p0hu@[iF2inY*JSLhaC;;!gH=VV7U#GV=BdIc05*LmRVBemZ6pr7jC-&D=?"YqY<2Ju(dL%IZ*%\=suH&(.ITEX`e:7jKBLuY!#o1fRn+Iam5Mjn)#ePCR6*UgcE-QpndKgVp89]$YR1;\@5kl4nrO_r9&.QQ7lPA%Y+IJ^]/_^%](+rB=)E%<Y#H>n?f%f#T)EfHg2*oTY;W";gTLN8o4,1SE;ih8*k]47Xa9Wc]D'k9;d]O,*cIKsX2j+H4&J/Or9en(o$4/jX-Z%P%T2r.6YC*>+S@QC:]t*WI$1X:1Y+5@fj6Fhaqi@p.Dh%e0mcX0`a1kpWCXm:1^LCa:LTbnTeYa2^G][fM2Q,H(g:;S.n["";:42lO%[W0alf70B<oAEl#m,;m;/'AG^m[h"3n%qi5S-&fT(/Nc?H#[>jff]'@/]mPf_VS</^41O@[Wpuq+88pn+#rsT\od2skAF`(ZbP*B%!P/#YWsC=b\?L"6DQt?o0f`pa-`]1USA$q1VT\/34agO?^/Sr3I'QW*4T>$ApE/ddpDcbn,?"Kg_rZel.pS))R)C9,\FIo!pE)'&%Sd4WWLqkX@U`?""(V_OObplouU:,3Nlb-Y[-unD2`\5i]Hn+56ci3Iql,)\M\&T%hq]#MpO-5rU(KT*^^&lt?U"8?6'[l>%\AIW/%-L^StT3#3&XfK'@2h,*2rQ17)bLb&mrn9>[lh51AJaU8)GeNbIG<42W!><EZE#<n?^H'"P0;hJ%`=MmX(--BEFXmEEl3s";IXQr/%#\A-rSWUEh]!9T@f<b#!p!m(?\sbig>JBY&kq.kVKtI9XgU6^8Dq@[jG0-B5\7,EQJ:CoU_h?OkrHrtRr8tk?r+T<Yi9]UsG5fC:%rkkdK-i]n4pQBE_%p)\ZG>'.f91k,7X0nE5cP3<<ZYn(/ju:o<W^"-ZZ$nG+iV"aQ,L6qg?7^_29>j-rq*feCDtmCXq9]9BHM>RM%\]'Ne2.)1Ch-bQ$U#WJ#NOK?6@#H&Sddam>SXS>:6Ya0<lmGB>5%:m3gkfqC-iNnsXo7eJPG<%</h^QmIc394jnLTRYe"&@D/HH:%:>_jRh@Pt<B.MTchHi0em_bAiO#AWGnGe`"+nG&j:[`#:;:6LsCBEm<)WR1WUVY%Hm&<XuXs\Ti^We@=pU^(\`g'Ia&$Ol>+!Y!(%<_lHD/.ZT#Ge<VDp$j!UTDn5Va]kAbrg%m+fu4,AG@q'^3_MkX^<j'EetV8sIXYIgGFQ(.kbmT5meF26YO&+R[\^BXpXZ15hKq^(%QhJmV`jike)#a;Q/UmT]H'Ni)A^p"[,>i:K;B4#\pJ1\GeUi-"Vt/(Ss";=%I+k^uVK(3kf:LlF[Ii)Iht>![CS0AAX^WM7N\N"X%-<0sVX[>u#<,4^jY3&Kgj&Z!OW\QNXQ.,BS>EaM^DbE0$'_c<j5QC7N)V=!U59Fg6=h8^hH+\1aO,Z)J/9ZD@]9BFJ1t?M'QNOA?%b;u66Vq#c53:nL#,3@YRXG+!MkHm*n7_ZG*kHiXU-r1H4r,n$`'\lkO]6*l-!8fo4jQ)NA2eC)`DOkC:8;H?mBg-QoKg#2HS%S\9%*h6I,Ek:R&XOCR"YCEFO$#U&>n=>&PQC0,X>*:T&^J=`c^mSF!cdp]Ji'(^J?!2Eo$P/PKQCmOiARDs\p@7Cn<RF0]4F:t6mi:=s%2gu^s.1o5OoCnBta.FDM0+Dob9?g@@d$O8.>e7GH?uM+^VCV2b3q)=^&.q-4qg@bR7cC@0QetBOCEDA:J+MpiHd0TLSm0(gp]F1@%d*?Bc;"<\Cdk.]ULHG.qT5lrZRiaa@p?/IRHL&M7[HkS5pf\8q4-f<?--`c75-hg4o[!)p^#_I)0oi538i;g[d!"8F-Z6R(,l6Bt%M5o/$HJ'5[S(Jf58rbsCh>XS<9nk7t4T-KL\D+4(/E4pBS#cP>e_TNhig8sV4aoPh"_a2M0<E7LSg@0Z]%_6o\rcgmMq:^/:C+C)%Nmt08MJHu7L"U]se)X$h[<V%PT.ctRpY*Y\O)D0-N/`";pN_?Rr\q[%^>nm4kKC.mET+bRhQXZS$K^<L-.<(?G#C6qr9jMuD<(9j%rpWm?WUWXq_SUOa,`crAk[)hs[k)+=+3Z2FPlIt0qXX7(4o%8maVq\OcDR&4_>Z2YWZuNQc6(TjSXj77okjB.F"A&`4^IioG!kgH%I)!,_SEZ9%N4bgYibutQo\7E6b9V>O,Y2&q:cgcQiL)"oNCOZ@;u99ip",Z`:6ArS_SVd1!l%c,^aW(APjBieNi!KKo!qP'QjD?&%rV[TSdoE<VF>oij)2Q(./9pph=t'8U_>eb/Ee]!mS]i.#]X=pprLSjblfIE:Ii]m[XKG7P#EVTF&f&`\ToI!;C`3Z?dq9;NKBu#4%_lt@]*Q;>p3-Y5c$jbkYFVr*olH8(_n`\b33gBqS%1)K:B&1q+;+E#)M($pkQNpC38BR;(-#KVZ)neIq[ho#p.,=F?VU[*/X]Kk0%6'H>,EHDmF-Z0kmn`/9H>M#0^ZC*Mp^Untq]:7FO?&J#-r\:8*UAsi]Rup,8LYQD!"*D%9[cpj(\'JDeW=HP\:AoV;Y^<JJZF#,4%WtB/#T.L>u*pZ`kUDTK?X(HjW*8b7=5?qGTb\EN7S&\!ZCSY'n&lVXi3k`3+1$DicgjHMUp/%eU!p7YP,r2qho;9+pmG'udG,k0D%\b8kK\@&V>9tUke;e=9hgo<<X@E(RGgq%mjmVsJ$^U.T.MHg)ClD"`%%.@LSmVrL$NBE15mli9U+)VME&Arjne_!(5X;m7)RdHAu%X*Y.3;t$FIH9L0,#<_##QZ$6^^YZPC7K7]&dFI+=Da/St9aR1[-W\RX?W[/NrG-iLK)YH6Q&GLj>8rq$YP0q.lgnSPT&%/Us1\I(%WrD\_X)%WhWRcY]c&utm)AORs[_I9:q=W5&^Y[i&>^uPg<4>H@&:5im%IKP[+#b6I554E`pK+EAY262Y]X@b4_f*kri'7.kItmBo%dWf["JB3tN[.h)m(AC.]AYqgg1@[(F595nrlAdq5MIiLJ#Ui^jjZt8^/QQ\MI%M,#:k=OU@'^p)3#t[k0,g!VFS1F:eB]_lWiJ@C%VI"@:ZfpZbUT#&HcRc[(_eA<qIX`\MrF%PU@S<.mZ[P/6rL!';6s]b"2"aI"^5&lj0Ud;aCc5St@5RWZ]($*<qSR"3ksh7A=+;&]%4jH65ohbJV1jfg/M,sApeb0]LSA[8PIZ7<SqIqs0W`ME@0ZR5G4s%=_;N=(dHM'e(=BI`*k@JET*jjjl=GKC:i!Oor[nHkq5F7%%%A^_fNn[K3T"ht0CQEIMp1*-nNKR<B?Zf\Q;euafm*O9bDan1AG:U@nZYJ<)b>m\!Y:&6K[UAgT6`)U5M=VZt-4F;010s8d$$L`G!%Wqgk6fH.`nl`:LZPH=hPpku1miJEU%9GI'%1GZup;NVA4.X?=W5kOqPj!HK$*9Q+G@]fXEQf]4<Re`iFbl$2n?_;PVhtd9A_oFG%%BBRRdX^/VWbbHi[^M\GVfm1+!Ist`(])?DgkKD3IF7X0K+0=A6h1k5WgL&k,b]?U)Ggg2HEAe:bmV=c'<cd,'Ie`NgotS)-T5G[a%J+;q!^T+D/UR%EKh]Db)9+Gf#QtI1s@J]f:=hF33iUj5oBCY;RkRs<[Dbhp#R%*F1l'd%6J8DUMCNJgaL#43\LPu^RDK55DQJAU#%0Hf2,mHDF(if<gT,C=rJ2prPW/WP/..%cU^5b_1`Z?1Dl?<mMQrRo39e*G'3s15K7o&fnKoq1R=O'PocH/Z4_CHp[Jhrp)M\pNJZ%(&."kZct.iDLR'4oE@f'$h'CTMGFKIoI^@PR,q*Q'L6FM[pGm?qT"qCJ)rKXL,Qt_hF)"?aM=Z'nC(pZMMIN.AbsN=Aci?\@.Y)#%1Mj:QgG3"r/,$#Z:S6)N(tMd;LDt$^%T_g5s4#r0o/R^'*^g]%LnS2SiS43ar.gDuGD6VKoqJ+?:?TOnk?7b=%mCA?0N/S8`cJj,%mRP=Damg&A<Bb]^I=[ukT^BG61[+LV/m\Qks7e)39_9=C0tt-:k!?Z(5dl"O/Nq&iX]$F]Xk2GHKtYpX9:hR_=7l03q9&NGh="_J%]_^U2e[sRcD-m8@p;2Hf+g^QO^$ikMf_9[*L*t^ZEEkR\N;#4`Q3/"RhEA,boB!=P"'mntI\$7Yj4X=Ai9q1Nft[7BY?+dLBAImq%Z<ZA=`33NcnlC%A_?@6tn#bV1s(!]uq^3,Vn9YI7cP)MFXs`Sqp(]g&r0%p22pUm/n`a2ppj/DGr`L#FT2k\7UK??eZ*-?gnN:l-%TPpu_3g#)MImTUIZhQAUQ;4fPrVU'n`n>6dNck$i`3QgXb1XP%b!4(^pn-bk)'*h`-=8?q\s#d25h).mcdibsrEbrjPL]("ptu2E%AMeN&ds1:t]Qq/tIXSb4g=Wq*a5]'L._DD.H$?F2%UI?A_.S,j9-nYT]sb=r,DR]pDZFXu]\K#<GOhg-2kF:OpG$[21Y7u*i%H@i%q<]s9iK)m[c%#HtrScbtNUFa`p[n;HId>Fs-[%G,Q9ZKdq0hniDWFqW?9-YVO8ZN*#;%fYr%Bu%.VO354ghRT'!:K</OahCF7nP%%&T7E[1N"%Or_9]EPnhR^&+)C!/8$&S:P)tq6&aNI4Z`=bd%g<<='&^eY<Mpg%_FX7>aG]*lA@8p&S=439\/r2)b&n:M.AH8PJFGD%iqD8t+"m*O&/KG1o@U(V^@HZ>,aBn'`<.5TEAogW7!]HMo]G:>P)K=@,4hlps.3H=\>>&c</)nJhOo9-mZZA.Q+,^Spem9b\LIbS%gt?+Agc!d`=jH`tC?J]$lP\Bn/_F:q,pW<]j`)gLjTc./m2'D:[F0_.DjMNY5'%rq"$@K@-TJ9b$(fi-7be<M)].qt)"L2T7j+T%%eO+?BjK7DB_=G2(EtQsKrb54VOV[r_X_%F;RUKtL7dG*g!M0k#ksgsJ94Ie)&_4j^NHf^q$SetA0pBB=S&r(A^t'3,!Nm9D?OLl"%^qd?%BCloUn.[jW8FZPhH^@9Bc=f$0de^<EY7_FJHPK$,pjYe]"nq%,J6k4ajM<^qiW?8DNFc!o((sFsdtk6>HoQ>,/&.GS0`)m3%=!34QcfB1'=PtH[%-u`Zcb1_Q&*"MZh.PWJ02eriG2F1=b:&6l57T]5^OM7<D+'9+^)D3&N;C<5YbuiIY:eXZ4lKMe9$4b-5DIrh%kZt0cETVp@EI%N?Y<<S,(\Sof+=U6>a/-E*O!PKE]*1WGl]8/bh::)7]RRE?_Y4Gt=NUM]fKJrdbG"[_cHjD=Ghr;1E9KIYprfB*%f[eZlY[0Zcme[OsRS/\Sc_aFsmt6e/m'0@$%_!?\Y9tFD\]*5u]_hFWA)OX(4+kJAI5SJ4*^&t(98T_,e7j:kjMp'Q_CF\8:#l-7%fbcafEqUl?in(HQNT&R\j*T\)p;`)C@c>hs^E7,'n(u<:#NQhLA/+KUrnWJFH]6p%[AE`TE`PfFqt/pQh"'9f]cA8ohF$c2*Bi>5%Eq6Scq<ljdrcS,5Z/2Z3O!cma>GD/;'=CIQ7XXR7[0GpJ(.uruKp?FXIRXG&WTaW4\](<M7[e5Q"GbZK0N*/r=78qW5*u7fmYl1O%^[^UEL%L-NB9a(pV)B:c?IN)5F_S0[cg8@V4hoKgch+7"`aXsVV>I.1FWi7?pWEqKPSuLL<7"2f7jDR7TeC#d]BdXV\;Y%.]=1ka%)u8*RpkHGn\LMSiV_100@r_6lKsu].J)95;Vh3K*Ie[J3C*l`X/k,I(enna8ASn@$]!H]*;qYj:6[AKGh-V,<#Mm?b0g;TE`qn*%%F6cmLSNQparU8nCDc\#erUN>bU">m.+V#aoGA6qg<qnh"7<tlapYFt7Aa^>&hRiZZRR]f?-2HfmZ,^>Q,a(B"4VF6MT=J1QUht*r%#lbU*p>(KH[S8L)I<r8X,V18]kuMgQbDN`dIsPmq=VKAe\]+3=%mFbU6_;I_GPTY+Xo6t:OYB?*M3d4cNc=TAhMjalYH\Fs`dRN=%r,gu<Dp.^8)Y_PgNa]"K*#VKLD"lNDl[LMcGW<0Wjhg,W51qYt#3%!(,dPI]r4%!72&e!E3*Q%MY8n=tK)Op=pTGT2JSP)0&+3dd%R!A1NoRm%m%SC]lrq(hA["DH[n"mSd`#EV6oD6InpY(Qd\%"tj#<P/"I7&YVqV'5MO'ag&rpS/,3AW>g<V.C4D7Y"&gNa_>r=T+d%HoH9Gg=>lRDr/8#kg/Qfo:'+L(147NrVlEba6fK@^OCJ*rI="V!VH#Fbt#7Hc_$]q2*X<TR`8=?V@Vmo9<b)'VK'>AX6-V6s.93#%IeZD4gmP3D.hc0\@B<L0W9Th$E1Y';"'P#[g,Je:f2f&\r.B45cTch>=2cU"_Z-H>I\S"a+jg85Rqhq`q<'E3q=j+>r`lDGC8`%8%^J`PIG3@pF/&,tf?Od$=>*&Y8c2X4tMEQElk1B%i]_ssBqX)=EkO.eTs*X_*_rmS3kH<hEKLD#mXFL3JA`rsh\*lQ\qJkqnfhZ**%NDJI2o&&3J+5\`rY<DaQ&Q\9(5JM^GnmTDe&-)ACrERIRTpjK]XdtLprr0I#iRgL+B>7BUs7P!1p[e^dg?rU@ETV.fmIlm=@r6.6%q=sRAgX#VC]m]qZm?aH#R$'JJ[rF`HIdPk@Y6,I7r,qncs*XaLF""'U\HSRPI/ig,6ZoY@)YCe)S"cmQPs[T@H&3d6I"*W*>Jgpo%PM9qCN[923r:o0pK>6<<\%?Rn^YSi##Mf2uGhD<1>Aq9hs1It%caUMJ_q5-m(b5K+qtb+"H3uai]I(:^3'D?VQ'FLWr<iK?gcVjr%&S?OUg2Aq$+$Q'Ke*"/dZh[u#T5aV'l"gP&*BI[n3-qMSnTOcFfe,6[5?QZb^'S%U\se-<`\dA&R!mSh2V-IN/$>mR:#-"_pl/SP%*VE`HTjDlDFTaEU[amDInZ,[EqYBM="`%.EBBo;EadUb_,>=rK"PKBA)6S.6VG_raS(4OI6/g7bgnb4pOXY*\pu@RnVL.RO03[f0%F,#Ed.SCSD%1T_?h+i0#YcF==N<7Q$7alF3f@E@f[VL13\*CZN7KG4V-_GR)>6@8M1(?FDR@4o)ehf\E2Y66UL5r)@4Hqb*H:R`g%);&BA/(OsZ#.,<nY]Du1rOd-1KS(V(RT;]1C(QBNeZ6,6VUph6<1=XGbaV!+"`bUq<i2aEokJ>*I%%<#>*YP0%b5=r@?%nL[Uk'Q%G*XJ8m8B#\8EhqJBW533'I2RPeXO@LFfVntdMYPaORI_Uqpd`\)UtQ'@:^EQ^"V%(c&,\.bN!`Pm]L+DZ,>M(5%'>hdfum9/Z;>X%BKE%W1oB2AGREY9?%Z:A"OskR'&(XL5&K)*?9u$_3[0$t"NdbcA3$D].7im3^s^"Z^Y3kNWR5q7Wi&YB,hM55L)+NW)VB@A0T'ZL%l\Ifs,&U>])J^8!!X2KQ8\sD$'(SlnFp=KB?]Al\g<_*kq]`DJ[@EkB8O7BH"dZT5_3FY9l*"oQ^hi%#=qT<7;$*PmXZCIfpo`pP%N[F`tLHM2;lm6$!>GmLmDeNHNRD]UM,dRp`Mqj#P,fn)"/;WNYI#h3Ccd@k3D3%Q)5ZI(>.0[il.2YpmC@$>a6sIIV7%)J1K$ZJk%%l@<GZJbSa;:SYNO;83qO;=qM'DV](h&*A(6g_M.iMf'F,1\BZS(M[9:BRa=/<6c7)S33+7'-H&e'btN:91YKR(ilBmWmO><RWY;%O"l$S(d?T'X'=D=d"&S^"VoZhBQ0JALZ!/Hh:-1A\9CU]RQPcK:NZB%Z[%Fq[\7u%-Idng`,7oWV56`f:hX[Gkc4'I6@BNY<@`hS%\"eB/>38(a,rMXV9+%'TYDfU=EauR%m`GkQV.kc:2:s$'\.Nkjb<R-fn;EU2e.?6r.!2+GNXDpP5["u6&KNI@X$L#M2+H&HX+9h1%8C.$36O;l[k4K=H'kj,'^U"\'%B)h-T]8?:=^k@(F$eoQ*lBN2[%W<mDQoFndGj'ghNq[$Kbj.P5VHXk3sK<d.AW=\*mTK]g\`M_%(?ntE5qXh[<J&k'g7VYt;%_c=1bp>70J8M4XFN@k47iJ,Y.!I3NV[Ik-?-SO#t>#43bK>i>@tc1(dhrq.-Ogkal:p4[M:,spc(0n%'"m>*="P[An9J2U(TGun20rpsi_R59c"^On]E"67I8f_EG`agdE2q4&Kqd>@a9!#!g2R79ci@Gqd+ACQ0MU%)W$0!A^SGH5!>B<a%kHmN5!o`hSC5B9LDufIbNFjFf%W&NPBFiOff%([C^^X:f[/9'W'6aql=Zt%@6#>I.?m>a[6+l:m88$.)L@8I*TtJM3VM/8\DWp"l%3ta4#6E<!u-$(U%):,".lb>H3R?fLWg`qrkEaFe6>bu5dfXLBVf<eS%ODtglkZGt:5RZ1/63>*rlI*i%?-WKV?kid#\(%d5J>qZ'%TS(^$';Id#jXnXkXn:dZ04S3VjE3R7e&i0ifF&_GcW70<>iJsoB[m;i>2GI#<,JED4];-+pZ\D_*<4:RWmnU)=ub+U$s$H<=W&uW%YHEJK(^VqJf6["<n3JK[@Mn^46qPD:q`b^?CbpXc20_f>X,d03@%Kf<`#uj=WifB-KHQt*9TRj`KV/c\nY?@J9[J_+kED^m*e.rD%S-@.?l2QUdGD/m,TWU+)D0V],_J]b-[>eY;FQfco8!jc#IFWo)Wac9!?1lMj:j62A7i9.DN'?M+Tp64X0eig""pre]@N%)V:?8.d%>A2_"1[2i/)MhjM-5)dl3]^]8Kpr\QLk_I0H<;GdA7CK,?<jAR57'e\H`,LI6)_D!Z!osJ;_*mQhg&Ed`Rk3jC<c\`6MjF5&EB5d%9T1rfnP%;ihKl^"G38qp0:(KWilNeBZN-t1>1&^Q@ZL(%%D5^e!&kC_,)G%'=KRl!/\NQ\,U]]&aFRu:g]f`AoF2X"o1PTJ6hBuh%4$(1d@@>.$_)kg6O/D*85qpbAO/%uGG`@(((q,FU2iW\<!BcMf(#ETuXMp+)PKd>kFDa[mV)LFg-_3f`AQrhJa"pG:XJ<Hqh:35N%PI<d?Quk1WWoHaDd+9:\8<DO]GG$,/31<59dkW)OTrNjFCuWu;Z`1"*"sn,MGYnPmd1Wl?19:]8BcB]3du:YL+fc3NM>X=rWm\`$%;V&_&k]f,*h[rq)H)o</<@qK$&:ETQ6&SsTKUo7U\O-YLeZtLjZ'.We9BX^$o+e_Y"@=MaaH&As7-D1O+5]cE@O0bIk*iC=JFlN>%XM[ua$S4,2l%#ncNBm8Hd:F&sgaijqS7bmeFKAakOVp1eC.%#leIZS=k8@("NWj%9^O5WODm_!).Vr"O1QAB9=k#ql>b$&@=cr&b%@;$SM((>SUU,s"P\.tVl$jeu"q=2Q]j2S\sUitIuemQY=#t!h8:t\f7S2d`r"bUK^.NsVS2.NCui`Op<R@1=a:KW6fkF$to*PhD/%m<ZY*ajLj@[17i0H1.3SMN4"A]jQGKONu!C+iH1@j*9No^8kud'3tqGI"P1OO`;>Q@`E&93TE#rC+%Zt^c"#^3Z:_g([WeX;`[.&%bh1hV1S?X+S6a[6GSBk4:H)S&*N7a[c,eZR(H%3sp#^nirCBGgiu=f%EOcoE:BrF-<CBbqi&Ga#cG.1A5i9rfG-YCe99<O=:KWDQ%?!IKE/]VLYq*OPd>TZf.7K112$?:MGO5Z0\mf^B1\#4l2F_MTSBi[Sd+II)<%+VXk5s76jq[aee@L!q2/T$/c<]AH0Ubtn$>28p+%5[0C"eNk<$#dZh^c;rA!LfXT]72siFARjFDD?Xfh^uNn]UnM+8NTncX*i^J<pf`(T%2QW\C=NK?\u%\)!(C9j_Z_eCj,HuHPu`Ck%,e240iJ1)N%rENWR\4?8+AnmK;DZ\@M2a"eCqf.c>.0!-o(3Ca$XHEZ$8k%.4W'180uc2oLMBmFUuReIfmEe.NRqAKaP,#'9oL.*%Y%i8%SL-iSdAc.+8D-:VAcQT;er*$+^kO0#Hif9NU!/?764W7q/:$fPp]q^XiD)4T$]1t*`:3846e*S[-gt'eiu!"jegqSK`ZhF'%fpIp!n:T0cVT5J4Ue@UdS;a)^^8VjZ_`10e.9r!,DBZ-j[:5_p(Hik"iiiM`AI:E04e$I<[@i&&k+FTsk(6pnF<RUKc+!s2:"R!*%TZD+ImlmGS5[=>6k87'1ZQ`[\9`WUOVGT8h\nK%=Ofg\QUpF(Q]+'atmEi**.p\SD"h\jG`B#\QVLZ^(cp^DiOqXI;!d`<aIM-D.%k'[uJgpf\21"*BRSORO.)UJn:n^JJ<2n:/IU8^gIn5[BLd8hg1Fu>k!?.qMD%M'/TWWF[ZlBXl_%bl`qmQiHn(0hb*qo:rok!qdo%ZYRB-n7^o2C56Fq#IZmq9O?f`U1K8JFk<%;NgUa6l_0H!QFJ>L&pTP-$kZ2O%>`lL9km**V.6ibaf#WN"rg0i!V0^SaFrT`BO?sn%fL4SO_%W<3/$#\N-I'pUd7Vhk2j(u,I$+"^Q6A,1/NlPf.+EfHnm_k2]#H&q$R)a/PD:i"/.qFJJ-0+:GpSG@Aon<i[,Amc#so/S%0(+Ss]fGp`f-@D='K'11D<W4%7R"s'_uoM96^'F5(cJb'j"o]SEFW&jhC'Pi#`Ql/L4l^fO:!0hGLs8UDH.c$[b'cO9EVJlr1rT-%To#k^U(0VFCrA(pA>*j117,mYf*Ut\?SORS.*.7\NZKhtKa"nEnrhEm_8A'b&qMq@Slm=FFHp+aQME0c3lL_'"mH4@IG+n\LPXNg%`G)NCL0k5iE"/FUI,BcW7#q\fR'GrYlW=H[D\4YV&ikXKM2FFP_Bo`n0-n8Qj^lH1pb:(>(fGj+;INWX/]t"CmLHf36C3I&"Mta]%+/([1Wo;E"(LudklQK63B3>X$Qp`H:Bs=AS_'bDWBJ?7Bi`I_LP_[E3@EIT$KB7))ZQ$K66X%I+Ml_uLCKbO:'>_=JD-c!1L-[CA%$KK-7?L9>or(/fEF3Y\I@\7MkKL(jjU.SL6<SB=0)<:lbQtOLKa/qAI=bYh_rS$f[NR-6_L=IgoVRJ0#[VhX^&0%5PBmDW>kWM0(%ddu2f)Oo$O2n3:cO`0ncSQI\>(f%d,!V0)L(SCWD*?``$'a"HaRlNZ!=aNCX+qu),^8MkKJgZ+q4:9K,OeWcNR(Qa&TZo,e-=54*%ojGb:<`D9I?2G`(j!g;GY@6aY&*f"q6YT"rdK%k#W0$"k)\Y#Y3H9A1"'!mLs*+dB9Uuof9r)(Er?ON+W,?C;e5)ej!0D(^2d_dV%=@9[+_gKion6109@mgL>[d4u2'.#erJKi!g+sX-M!;+Vt(9P[QVSbLpbbM^=F5?cYV>7#bk'kR#Lc0)ba3e:)dY=LpBVX_A';],f%A>rIKm+cJW[qfsi[Z5n`pbn%+"C3`92k(,%d?W7e)Zm]+TKRE2qLYqFkB:ndhe'5EBrl-4Pcg[ZDOUr7M/.Y_UA#-V],bdUn8/L]%4d\pu:EA:BOJG!^?LX)X)nMAd_m<!gNTUPX0EC@5\LQlo>&Td]j#GGUK>Pr[YM/CWOH,XZq[6F0'saf*YC?d5T(ig1X91H0<LL&]%h]]F&MsNJ.F>[nBa'+J`-_iu\T1/pXhi5L=]Q7&U`J_buaL#9cp4/=6m<S58;!q<cj6.2c1l$Xm.Q8E[4m=Y[\FFfWVbGDtm\*cn%[[6CJ"]DGl"VtV^HcReUUh[PUCS5Dbb-6a>I%GN>3m@ho"VqG9o'ha&]Yc0)OjeR7/G#H>?HJ#_`Nt1\L$WVX6>\gn-CAj)Q3#Ai%2k;<-4iSK-!MNkScqg9s\Br=uU]*i6KsLbaK2(unT[0)KL^1dq/O6tMk_V80Cu1ZFK$c81+hh$ND.YZF\jc]@bX$CBeR32#<-m([%*Z]),]ETr,Bm:+>#!uCj'??nL/pb_V)@j%!7[c<JKrjHiQmbIc&3;-_'Qt#u4b"q3JR\\NR1!`BkU4DsF0Xd=+\5_PVf::'CQm>A%"=P(f>S1tBOHcY/b133dZUY334nL;o%TcFblJ:E%?e0;eJEoMMp[:qOd]3Er&!);oGn6i[MjFH-lp97MCWA2,G3Ya$bgAjK$nM[?%+J-\CX'$a\I__67kR_p.4:-WGbY3+'mLq.P0nl#_MAE*W(MF&!a@=2X]`&m'+5>M@K8.9Lh6b=cK<ARmH#'IN4Z*&W:*DT;>uY1/%G-K:OU(IrIhQc(Rlh(S@hg+\^fNRES#,\"L!Vl/7=]ZqEZu)4"d*')i1-oTsOn9#c@\Od.&eSFq2C<;NO#@!;:R;iJM!I>u(.>Jn%:18guCT#2FeajaMm/5E*)pt=q$5G77b^qFQeT(;p4`JG/7^&18'01kJ=sD=;Hm^BEh!r`Rg'JB]_T0,<Sr?YiA^(Di9"B'`<g?!h%0Wdkt6iuQ*BKIH9AE0e-UZmMFB39$h^aU'^'Hl)J<(nhQ-H%Om\u^SE9A:;]<)nt'KCZ+c<YgYBf:B4R!7J+pSomN<:C#);FA!I-%XjU,Q.O`?majj!\"],ktX').XBN^<Nb1719>>X%YJVdi9*SY%=X^?b25m2@&^W:.\)C+*G8lpl0gGYq,k6%gZNE,g?I-B96WWZF>%#kYqYKh&M\?m)k%?R@?M4jB\mLrp@]<<CZ^I<j=VZ<6.=;7]QD`qQK6)Ua2)1'(K?OOUkhpu:L7@Y8YhYtLDnSr#aIIfV=P4#q)5%!N\\M&=(@fZur[rYf[jI8ZIXpMPupiL*EZHg2#;,NuGEQXP[V\=%=iMe:Rj:,E%KVEZh(]7!`a[ljl'68Y/"?o:&LC,k)?N<RUiM%9&Fd!XB\X#1WZE#M$="]IFQb:6NXJPEPP91#*p(*/nuB#=TT+a>42/r]RXr4ZAP8+*";++,XF8?Ycq!HDN+i6`rtt8191i-Fdo4F%g0(<H4VC"ZCTF7-i6POUZY?\T'*``e-)eX:\1U*dd*VAsK+q)jJsmP!$OQ=.1*N-_5Us"h8u/pa:pct1@sWf@@,?dR5QFg+?HB0,%0NG!#KrNmrSmfWCm-+(%mi`3#^CZ"NB`P\Wm*7[*5VMTtZu^fC-P[<M9_!cEY.+@dFjors$0mlhD6]WmFdN/LGpgTf#GB>M6U%!T%Am8K+"$A83T"Td-+W9U?AHkCA<ND8:H0=*mX_lGAZ%aRs(lEP(]'L-k_>D8sD,SR::]j\K>uHjm)Zu1.T\@HqCa@GC9/HiN,tPDe%@([gGUNe=TD-JrV'+[d%.0*Y<\%ZLCiAYe;Zf(-Z&*uct*I+N4CtnZ$'UGSsn`o6;aB-f.[*&I!e@'RZH.EU/:>L*Wdb1u;Hm`B2%^(-i\F^b\%dH2qp!aJ`P?gcm(H-5c!;n/];QGM0YSS[%sQ4[+`;KfBL"rN?CCE[:-9LHJ,P#]N>H=O6d(2jtETd5@_4`%LJ@'NEH%77fD[5^p+WLWi4**$sl4)EOTi`l%1A'[tGV"(=1A2MsaNJ9eTY7-1&.A=+UO3e#-i%/e;)CN2,OY`Mmu:m=;'=L8fKC0,Vrf3<q<%:Io_CeQqI)bqb<s*eI0t_bJJ>S#/n9+HD4-X0.%I'6W:X%i&rJ#QiH`DL,A3>8Gt*+GGo)=O1dC$m`g7[-?-Bf7HO-6C6;]^48mI%;fd4U9pFn\[j2o+TNn0Nf?-D^OEKgEN$]IUNk-XU73`7oK(6uU_]YF:5LFjOZaA+_c?/E!PC6]/AO34@5$bIf#!e5H(/'Ws?V(p7%CGs^NW\KC,fP4NHjgo[kZ*D=!E$=Ql2;+/Pi2l*/[#d^t%2Qf?T@OqS)D%6&p)5K^cUp5QfO4)@e6TDo"qSF+)0K>jiE_[!1!s=F%S'?de0H+c3-!bVAM&%&e\rE6,CpN"ODK<@dMoq8FiSpW\RQ>RnVrqW^9egIg_6NT31)dF6#.I:VFA82H)f0JP^$VOi(lLR;l`TR=%6nC#RiX%nuG`0BB]VB3%X@.[MR%ihucI$#%7c^'sBdoN(C>t':VBoli52p]33p8ta%6u1+[QT6PJ9>-FfcCYPJ3q^2lO41[goBZ.%>&Mo[=rD.d=g9Tr?o,T>Kb`Xrp9f4Um4njH*5;!\_h=M^CO9tc&(Q%!s2Zk+!M#Y>$@*IR)_;OQVCHOA"Il0*rXs$G_na'-RQ&d+%6a6K*eo$Ak2:9to`$#9th1,oTdgUo99koI\'CI1N<7TDhS8o5R:0^QlJ-6fd8_7OGGbZDJ!Q>TLd\n)'U`d4c!__QGM"93=VjJ/(%g#8IiO&4$\+^l8u1ih\[J/hilU$I7`(3/Fa5TJb@\p9"SE"n??#fmSN.B%%6CP>C`S3!DpOOBnU`ISatC%UGLgm0OYo\0f];J[Ss%[s2hk4TsNHDalXS!ePdj0pHT83Kc2V;'FbHg:`P5+umi@-1!3k:Ad_8Qdqs$F#H?OBN3r0AT;g-rYT6!3!:CH,Zr_<<Cehf<ph]T%nJm;lq=s*&ag$c<+][Gn&Zj;NChs8>6+._b8I!4TRs6ls1(Z),emZ@^OF/X&*2j*j&doSg*Q\^6fk#Qtj6h')RrDL%U1$X2CKNBj%VZ:XZI_h>,2Ctn371Fo;2R6=,a]KOE22IK&=,U7J!;]VE/!/@tF?:b#)LM(+FEl"48G]s2KQo'_(qc7rmVITL92P:rOI'#-oost4%/RZ&^N3#dqEgLqEO=ioXD[!V.[YH;!</2?Wa-AC4Z2SS9mOo&i+u.dEB5Z0#XF-#[>/si+GG.95,RTnCXK\O(WF!d/EM'_QYb`@l%gU\FL'hJ"$J9c5?RiUrtOeAq?eEnkT@01d*B,HI.2>^kEOXNaALk<Tc-qpmAeR'@d#KG,+Kn-#N3/pO_b1%.[%BL\Qa1AA&g)E4+%?C5UaS[aN2W+!t:G[lodmcDBp2/W['l4D4`?=sEIoh#U9Ob,1TIar5E,2eM\j.W:'RHTO,Y[rpa[/fg^1:ArnZ+12J82b8.aS%!?%[=e1YX9M/5_JNEb"Y-RHJ8)nNCh[+S?H`&?.66.$=2?,Ul=!U6[0I$mn!/LLNqYTArLpSU:4.bhGN3A^%-5$,r8ce#d=eY-lL5id%:0J58b6)Qk$6($8GQa@.'849L.^f>D<d9P,]UVe58Ej!fikPnu2#?`6QDkh6P#s7KnZZn>`QUU&QUP#WOB+Z"P^(h/EK+kgq1=PW%Ag?kMaC627SbT'SYdPLe;uiaZ"cL:@M"93=VoV.8O;)qABbTlK=PR[gP++A.%GA%e-M7!`<:3c$'tgS`%o\&?9rhZAcRMV3XM;DX%eYlBH1@g*4CjnK^#L-PHh-h"B4r5%[ml6mlZP*Ma>c5@MF"3Oi#:o`f7YcL*%e;6SE-9^"bnZ'"YJASb18[2)Z2&C$%np8RPUR*o%i-j?o(u'!rX_=XUR>)%a=&raeX0;BCHNXO)hetqnAR/$H<$8$P!_]:<R-[q)MQ=!*(0VA/le9719uEWgEcn/H.nC_8K#OuE9Q<7r%^HCg#$FG74"/Sa';h:24$7q1:@'X;@WEI]^7jMMZ!g3jW#j'1G0IO+&C7,Je#rmqW;R:i#o5gQ&86BA^RqR#kd\UJ6R6UsoC1)Lm%X07:djl=,<i:Q"h=q!07j4T$7N%5*]3\,$PK(=[.pe&cpgp4&q!26YUI#<LY$uZX7<#PnleDW(m*t^)K#gJfko6%-JD!'\@j(l)]%i<(KfiA"_EH12q7Y(e;5LGeZ*#J_*)3#Y)5Y:(>dfuq1iV.-d%6+:s?N3c/G_F[#IMBZ6s/Lp#A#S$/<P@)J"#n9CT/d",[#0\//%eE*>4L=HY>#Q8u_[02J+lZon(VA?W\^#ni*^"uu:r4#eCr%SGCHdr3L$uITj=WGQ[fSV@g``=NOllp9cOWh@s'd@t;$Z**oi;j8$%i[T$iY^gT?3*%Y7H:0f$o.Ud3kA>$Lfm3XhMfl<^*d[T2[L@s7PEo2SEGIHI5E0q)H<)WlHQO+QDg6GZLjP=rQT4c;Q=i!/\6.V@%Lgja6D_u"^]hNCtEr6McZjr3^S)Y@I>e*iZ0DO02`sS/Oh<C4fF<p&6oaS$3b</r#4bf*r0l5?I&JVfQp*Ra*XB92)JJP]Hc:(m'%cC4'MO?e>5Yo8F`0^ZNm#)a6KW9uNpn0r\nL0hK\hM9,CYSE8b[/fg^$FW'PZ+5HT>74lLD+7'H5\#)Xjj.-Zp=in$"f)?$J9fKF%>FM#G[?,oU_qt%>_5/JMC4]029!8Sh7]3Je3K29a8-"^=C1J,'btRMO])Yp,X*q18!`FY"^c^h4/PiM@W^oB!HUr0QCki^-I:O4i%qTQ0+["9c'?u2Q"J*:Ls5c!T3&7JE0[Xa"r<n$;.'W?sZ!Rm,F[PTYfCRICWYr03H5Sm3tL#*SA+Ot6.k0Xo[Gn+>*'bWbuG9^>-%d1`?kH<\0.s$bP7ZN@,B'OVu(_3V!"H7^Bb8\qW`:h^.V:toYo"]G1JYV\1j.SjGgU>&P,Z&KjY!XR;[?#L+ddiNZBh+7XHYnURe%El"()<I.[:LW-@[D#o[QBR<rKJQ/fVQq(5^jZ/:EPt?ME)dPV4"crmC<4sm!JKM>0"VaK:V?#)<'t,qVeS?</4H7&=D1UVG6Z33?%5j:"Ud^U!_2#?`Fb2aKIE[0nr^@J_AreO#(-j%pj!NDb,?lj:'Q7#[Y<Keg#P$Q414+n37hYJaalEpW`kR+a\LU"C-8("2$[d>+B%i-<t\=I;<C!k(/^emF!N?kb:(>%('&;nWqZ^^n-O^%JR#TJA[HU-M\M)4$%Y:ur"B9pFhuE))FU/\mqk_=^!1&b"9)!XbaC;Lj&6%"^@F^lF"jN1%8**D#n/TEk]!d'WCZ(J8'*4>FNJ)>_N<NqK?BWi'HhshA1WKCXp1:'hAe2!:uik[QLtGX!0hs0;bVU"ZSKCmNKab%eRsWuTbUOP!b2o*q/Z\0)qb:_1SjDTJX53$]e,mBALn1UL9.VUH)Y,nr/kE`0/%;V@+3j2$D]^7^c],c/C.^?VEt8FD8XF!J2\+=%I8ca_9\f7uJ-)^T'OVu'_3S_7H;t)5@_&N5*p>(nN[`$VV"@etH"[@]T"ruHH2\e6_fpof7reiON<6tu"X)[Z*V.rY"K'M=%Y2im%Kof`9&J$Mr+rc=,.TfnZG2e$+D-D+sL4<]G72\rG1c()um,8q8Q-KuoC$]@Q^:*spDQH5[p%gs423a-bN<m8UL8V1YG!2@3Yh$V<%q`*Q0Ws[`uN>U`ON_$<!l][nclA/Q#:c/Y4H7.!Dki;P$l(,h6->cd8qZJpGS`OKCPRA36N/!N-L\SMX?"%[)Ug2hgDm?@s7W$]^%c;AFanr-s`+l8@NIV3"]G(en+RLJ!$^oX.Y*tNnEV_O@R+[m/FcbYfB>`Dq/S=F$S]#e7bm-KWU.2q9??h;Z>.fl>!Kk$B7`lbr+%?M>='p_:Rol\S4q:.FSrfEt1B>(Cm?"^@G4kX<DW)'YaJrTSCiFK<01gE'Q58d>Nq##]ts^]dl4<p<OW+4"r%Rp"e[CjX5;W-#%i%H#OX(R_\,D`T%u1^qB?`jIm&r8!X!(Eo:n#Jq@?\e2RdhO1-7TZRUBhag5K/ld).64$G.u>61^0$S[XE?qXE8SL@8U?Mg6U85C<^%\lO<<`&,\n$iU3*j!_]*hM`sZ9(c:5cO"-7la=Vn`6[%o9S#g6$CD$qYf.K=9iEC"ke*o[GlpLGf<^7tN)T#@%LP`9U]C":$aMms%d\iNtK[e$9g6%IH$IaU/J5i]UQq(5^V(%?u<5MoZM,_sQYE4FPetdqlhR's+'W;F.!RlQ6Z8=/`B:1r=%!82pNp\'9//2n(Uj=W.%4M$+r9jr.<14=clQN$4_WnM41+X\3ZN!fCi;5;4:4P567:FZ%9Ae)/Hd2)mq#g;J]1GTE^I;3.2>/?MZ5;G`coEm=!U!+M(>0^0K%V;lC(:?0qK23%a^j"8@CX@f+1p5\b4\Ydsg%aE#eYSE8b[/fg^$FVdFd>:JW?RN)e^$/Vf%BoH67Ug1U#6gn-;Lj&."^.:[lEa/+%M)9VDHL2VS6)SXJ%4]%@?lGTQ(8iiE;40Uaeu!ZG4*i)RlWa<>a%#r4#6gn-;Lj&."^.Etku1<KK@bFoOD?ZEOVNuCZiK^U19r`f%d:l4+.m.`Tn'Jsre24Q[*:bR<S\@lWW/O(Eds)V51b7*hR=#+OZc_poEJDTHLTQ)+Y6C:`=0SMMN)!?LcN.WPJ,0GYlHPo[d!bfq%UrH8^H+Y"rSlFsZ9HJI[X.J[9^lkkdo]<&<V,IOkK2^FN$q@/:P=Oss-h5@SG'h#`c`OWAbD?MPmV4<^Df]0/eS6N>&4q;J:_f(\%6365J(1`gUV,'Oi1:5i>9H[gaS#A_SGbhBJ3jfU`^WRHUYob@OAe3N>T`0<MQp:V/oC%@8\%?iEqLXNt[fRU`U%,gS;h<*iWds?:%;qU)8V`IPQK^hVLOOB$CT;)66W!Z(<=b(d2"^.G4fL2L($gn2eieoi0]>.<\I`F(%Cr8`ZXkGJ\k1_]n;D`W6H`cK5BR?Zb,^($.%$%Xt4/i9ad_8j:A?N`n6<Z4tQ<JDPLNQj,sO)jSAjAITuZeGT!ahT9%Z>ub)%QL2Idop@F`)!gHgI8O1aO!,V!fEQ2#h%f%L8aKk%b]"J>h.MD:*Rj4AAb6;VfHc0ce>pu*,Yq^^ia<A3:l@@e9o1Z"Le=I:?&lKN]lpJqkon634:h[[i@7N@8ufckD`+]Q.ZZ_9)P(7C%)0_)+D0,r>]9B#(9rBp2a,l3L8D`TU\Q'UXXI@*R]`hJgjK5=fZ9L4D\;+(>H)p7NV.O<.&_5MB[o8/:M*@i4i/gi?ZDf^Q4aRhR%*uRY%L%Nm!H1sV@ReVsn0_WUcaQSS'!@?91!m0c'7I^cAcH5<Ma:onBWBbH2),hFPfJI_o0)9:Lgiol[3FF,15DO;(>'#lLQF>a3%Zkb*F6T_J;Gdq^kErHag$0Y1:jc(WTW&^]bUq&!@0@$A_.H*T@5WE'?iTW<(EK02$b%_K(JK8OXq`p&ZQiONG8%Bk..0l#;Lq)H/%m0'FU,Jukg&#W;2@&8\W6l]ORr`d`Di^kJ]l4cYGVAls4Ag""chuJaqN8<eF!4-di)(bOgkJ;-P/A&LU.J,oGWX?fmM2='X2Gl'o%Q6(/p)4Bfo6d:I833'Pj/%3RG=t;f%H"@^=Y.sfim?@4:*EA703`KnSc-J7>jMVd@NGqtPC`1m@pP[49!E`EsNkiHrM%e5^:_d.s%F0;=UiP+rO(DgD6pC1"/8]Z5iT75Q3$G^p_m!O\KB3:6hQl;/Yg'uNsOA6n2@cPiE>ZUq0B95i>6OYQEf&F>'.J$R=ZArXi^a1!k%f]mXNKSgR^@Am-"9"Ws4R`(H5$joO"ZiCb"19O<U0L/_Cm^G@M,B^Q]HAgiS(K7ca^p<jb%3kU%9uX9482se.>0d4FA0eoj+N5E1%bY"1"^&clZ"U2g]K62r9@\"I[X'FATbtsLiEL*+[ARNU=b!DV1pg`Jp]cU11U*^MnblPD=`rpNb@Z54.,"T9X-3A6e>BN(?DYoI%%<!nFJ0<KU?in<^\*<rfgLKslNCi-1[pK?[hF5t1kB;LOrVu,C[I9q=iMW!m[3k:Y'BUqQmE>jJVg/]B[#]&-B7M$pL#9m'R]iL/q%q'+<XI$+bobAe:?kNB.P7nBBWf/99u/@,>\M\fQe//Yg^b9<!9K/2[J0Tm7]S*l2(/VFL\<V"`ha>PCmX=K.q:!JL2Q#@V$9S#g6%$4)80S\B[b;aobomP=mjV9^m4V,8W&;F&#lO9r-(<B>bg!J!MX_!e#<0l?i3?CU4V/h`mcP`q?E?3/T>-I@6YQ0CUMFLu"rbNO==%DMMQ-f_[jS<XnLP+,E`dphcN*5]tQ01=pP]$:U$sZkE\Mgo<`m#,>k4606<=?ohL0=ZM&n-T.gR6[f651NIk%nL7Ig7Y$tuikkq>%U`0G;"mD--56s)sMl:Ku>/\!57d\euUqt_QjB[?25ohdM]fm&;U(Uo>3)s<]lIPEpo&`=q43m;jg9pIa;/ipQ0+\<1j+=l"GJ1hJ%OZBSj.@;:`@`?SG#kFWs,<G7_@+$:FeM4C7IVLeBRI(>L4ifDf0eKeHHn-#-F8C[s^gmm>LD!5G`KXSL/j6u`WWFUi(0DIjnsi\G%o:*cqH`oBGoskJ\FC;/<pi-h[$?6V1+f.PI#>Fd^3oa'cLjHsM=I]t"FV7rOVQCnZR6$j*/14S^At0gALT<[4Ns1ihAN?<ZV@KKX%TB#cQJLOcIS$WKS^jNY2"'T]T:&EDW0fNhti\&e)V:EZ&F=&8]<mVa)X\1)r>u/r;[q_'EUYon,2&dI$`s)WAIfb(0T'LG)V?o#t%el!j`ncDRLjmED9.ls\C0lhi+9#@8m_YGojg:8E'7q?L&Cfdhn7%7OML"m5^Y=F.[lc4KmV+2V)NQlKj`;_.HM?kWmL3/hE"&/u;%p4-2$+E-PKLLBr<r.[]g#0Vk<Jo)d:i3!cgkPA$Vg(07=":j!>E7t;u2U9f^8L)+?Mh/?(.s6":(Wui8/$*a@*X=DDK;=;+h3CaE%6bYBh*<A(b-<>_STF,QuZ2R&j#"]Q(Yd%`k"Pmhp8_&a!l+11_6j5;j1,]:c]b[8,8o'YDE+#Q)jT;>hX?'*d;/t%)J4Lc=#t#.J%c?;T@3#aq,FeuT-8V"!Nf1;_XFrUi)Q#E2R7mSHZMFeV[VMO3(;hM?kBoamXa!sSILRs)IkNZ93MR69bFei$\fe@/pCCB6"/:32L%*[+p45Z]#Y(5g9=(:3SqlRir7bYtU*CbN:>,rhe>peW;>NE".rLIBYo.E#;l\41Ug=I"S.*b-JUeE[R/#r9",=?m`\hQ[BNK&ln<%/FCB-.;d\b?eNu"^!5fdNss0r4s93mB@JZq.eGQEUJ;aU!1(=6LGGN!,U@PhF9)k9aN9)<Lg>gHZDbjM`A?ZR4hrKR74csYVs=GQ%4L]XL,6Bh"8:%)G/)QeGoPU3u>s.81l\8J!NF[Qt4O1KQauKT?OPD^<h,snKTp[MS9Fb%-4V0!3B=:Zf>Z:]'[0nbR%oER/F.<Ni%AnKS4VH).V'Pq"b>6a=u$S[VoA'7dfS`mN3m7b,;G.NU]5;fA0bV6P<b&0u7.$-1m"cK-(QsuEI&>V$Gc,W.<DM'fXDNrKr8FERp%dZ=g12!jbS@EKukar)i6k;0DKWYEb!]K_KQ[$0!QfI;%i!G:g7B16i]4Lfo,dr9/#'5@tBOjU10hlUCO*P_D-ripJ$hS]6&X1>'\%bl_:S$3mD.]"?M%Gf$q3B(2+!_&t[7OGN0dh9$l@c"U-sBNr'ce7rf%>kJgl-X>IP-$"ti%B5pKN'*ABH_c<$RGBJ'iG)m3EuNKF%_Dn!K..CQPIJdU8!%Ganj=D'E.TiECq)4ELV).m+j[KDO86K>_8.&?DV<TbB)B0G_M(5X/MUA4fVJ4rF2%:NqlafSY<2/N^c'`M[%?M.(^;bh5eRN<n<H$\#up#G)bPTo4dQC2;^.TiL0qDOHKC0m,F=,dP4:LCp^OVFfh9%@?b2)[!4ALiV^1b"PbSLkh-Wd)9Y^/%?L%'8+niK7$O?$IYYHLM;+2CgjF7rEVWO%ONKNQC/Ic(0I;/q)4?J`X:9ak!f]@VlsKb8-N!:Aa(nV)B0G_M/$J8pN^>.PbY+jCJ]aE%pcblt@gZd934upT]h_KC5(l,'7.SR)mI0oAEIa9jb*JnqWF1QTjkEI$e0\l%el@euao[Jh;Q)?"<JRR(fW[V5BJru!X@^O]rOt3j%:,8;^C*[AG<8CUHb)Weul[=ZO`ienr;Beg<]1Qc7A)dP<@:\JY",`<M(9++D9r);-K%7M361XX_/.tOJb+quWVH.3EqG/Kp;PZ]X%PD2MT2,tnA2,0^-%FTgk4U@g[C%XYYb,r[p5-mXl/mjD5^)nF''=0tCNM]Lq!_[Vbhe$>le4T2(=-,bm!_[&RW!Y7PLT/hVYl<Zt%cQNK4.V^0tA`+!`C9h*P\I*b>a[IILja6(K>%V%N"Kc=mNDL<aTq*:iA8F5pYpQlSq,]E'^dp-WH(q<I_6S:LCJ^m^#"FbiFIBGG%gY?[_GYD=o"TF!Md2!M;&Rj.m4b#lR7*[floiVQWgurTgH6<GD9qSk=cQRtBf?*f,2IdZ?\utpX<!*f]eE<7.-7,'XbmLDr<WNlY%'Y6V8eST1_2E[[M)iN?`g7!QQ1F$*23o@r#,IBmSe>B]H%4bG*>8\JANULpg,fc,X2SDl*L*O'BOJf]df`]G#/"[Tg_O7/H&nmB$%CB8$n'm,>9WRKX;A7/)0)rSW]kH%5Pl&6_;8f!;[]$FTC^=:Z0[lN,B-MoKLi$^?)MK1lMC.&gX(_5$E_CNFpq5X]HJuR'P>u@Pn%m0TR,<9U?4M.-ftTr[H:[i68-dhYMD]SH`K[V`+]h4$=`rXls\<H9&9P>%\##d-[7#HnIj_IafVIm7s#`^dqB70O7*'V\1"J;In'%o1W?.794bO<e1Tl'ekbDTdup=h<&lj_\:I]a=*Og:_k[eX_C7:NFtN1b*fPW2qb@C73*?fWZGkgT%8W./ka!_DF]`,fP#rDd!UfY%Wu@?sQG5&*m8+V$a(#iT&[hZq_(mo;f@"AN2E!OlCRH6dc3N6<<Cp#k9b"-:$tXrKGNL"V[PLnPjcnD`;qq@BceWac<I7/MK2?T'%PQ@NXJ`a=iJcqC45R6jt'-oUPjQ)jLZ7QBr3>5p-imr=UD&"Z4auq4^)A`N#/'@9Bp24u,lZ351.%s3o#gB[+^,%=#oEVhZ"/6Vn%MAmeUMm`JJ*@$;5`98m\f)4T0[SW5$'gSI?!hl!QQ`RJ)%G*K(<8,h1&^&:Y&kn9HTc0;*cGpHmg1Y?hY(e*($Z2VubL,qUbk+m*%jp[A']?CBjLbm:VU1B=P1oMg+$P3LDW!+q/_\i\Z%fZsr`7Ap1\Q'\s68UmBmIB`X.Bd4+'WA*P,q5KBUhLtLZ=>r4o(aD)g#4n"%+C)_CEXqH5c5A)n1CDq(!Kl.`0P:"R+>A<E([(60nhpBK>!!)Hli@Jpp%]_,GK$sup`<==2/X,<f`N"klLR<7m],DcFs@-k_^KK1%#:s!-kCZ%U($mBJQeC[3*`.:CAe/"JWm:p$\gu*\j$s@\:T-HrZNi$`e`VQMh%`HQn4Q;p`DJc]i+<L%Yc?"SJ\!@iS7Be%FB@!@%E3fd#=OlSe^g:)B/;^=;_X!p,h!>%VenR6BG@echlRjQ8*'_:I=Kn6fF$5PiIpHK@2Q_gZ,?4Hpjht/jb7hb*'3pVeTl`Ui2.9Z;%K.Og,ZP<]IEQguQ1!0"nO@9<+@rCI]Bh$frOg'FUMmMQ"7W,Q\1B\sJS]D@$3Q#7To#@n]S-*E0jQ\sG5\,p]$X[Lh]0Ni*a&R:C%qeOs./a"[ON`D#Q);egEO<)a&c7!'lA=Gmb1$^Qa'#1e(/3SQmjuD$Eq^:X"44G$S)bV+/->3-g\Y_]]8cpqTA+bMqQ>Sik"t7hE%Q3>CM).cfFc'O+ajCV0"/@WPhC"XYqo9n-<MB-H"E!h6Vl3nnC5pGK^!ZF@=WOa:qb)'D7Y[t!gjS\D.NhGrJaW3rD^!J&+3Tk>J%j*R9!EXf>&C3r\X&O#+-H&\pufLi>Iq6YnFCY`dXLhjZC<^<\:!mIDif_fut5(38DBCcO:p0Eltif^7RrZ&I0nrm-9;4oZ]"\aPL%f[A8KYD!*uj`!rKCWFu`l5mA8;S<iR*aQVEa*Z>^!/ob8(JOrjJ;<dfPL&LYn5YOn"]C(Q?tmOd<LT9>ZHOEd[lHB4Bh(t63[Bom%?rN`HW</s%.;XIG=$;&PK$+"R#;Wt9j&k55Df)\=!`EMW^bk2*/58h2=U9O_OA15"^aD0`b`&WR8uE#`#,e^$nQn'RE')V+#TM\)%o"N-Ki5"\Rd%)R])2nWo5q?bcC9#lP!i3s4TuRA!9:t7['Xe'@]bXus?,>[DHdsBTE,7Vj-NSg:C=h2CF>GpUoer6?Q,+kV)RRAI%VP\Yk,XA2Cj*PU8iJKl`2P<=8f)j0k/(jcEYF5Sb;9tXA2$m)ngY(HH.(.kU5R*I(A5F2I_NQ=CqC@bJ;5D_9GQ8AaMa(^f<^<\2%!mDl>f_futHLa),)`/3cSB?"TY.P1uliBHX(85[akk['sf^IoHAAaTW*!T$X]J/mMnkkPALOlW.E#AJcI"[aV@fo^r8Q]UQra%c<%caR>Ulb<YEIP2eJ5O[f$'p-0u_S?JmQ]K:YHl2)D:].KTeOO0a%0H,JlFdu@;`<tfc>&?-hN!bq*nA'%BO5BZ#>uX$(gPXTh8k@T%At6R"#*s=`T_o4_0>"k"QKo:f$.iqK<%V5kmc8cta$.hK158tES-*i>af2[`Wt93:<cWd$UEZ!9P4U5hf7uk_:mNQIH/:$.ltVDW%W'agfM?Am0Y9m'`0ssd5C830^b*6p8%o,7gro`7,/=/m0*Adj=.RAXe)`A4HGuXS*1/I&>pQg^W\\RPocuY%Z=q`S49/tQa=06(r%70sATV^%`nK^j3T%LHAN#!gpD:+cV)qj^crjZ<UIRRTQDdp;-4fsqe(UcKis[;=_%`8EqBJIs-h$,AgTV:!km1!`*QRW9TXY,_On%'dP;J.n+C0_h`)$!>r<`"Fps01iZQ&G'IUq'sCEN"Zl^aKCq?/kjj-'U6ZEW/_@iB#XR!kpbju:n=#Rp4U9_1?l`6R5(q]hG!(:%%N?ts*NBkNjA--S1`lrHuP`1el-I"-8QmFt7fjg8eN1D<5WS"9u5ea,Kfe`>+,P2A:etoq-Y^3BD!`Uer0!o*Y=g/,Q6$4d$RH]\P%5A_Po9+kl_QHB8K^1*lP#\b"cU&e*PD3n9ba::QE>;*4@^>S`Bk@Bj+K).P/d;q!Z*J_FoFoIQ'a?X,(]EhIp*@eZWLj^WNC5nIp%C"P*[n[4p8l(q:)b:7g0*:9TX3f:f5qNij@hWg)Wj7Q:])eT:#E#Gj=8'.5W:Z&[(i&Jh7*:RKP>gu@9=,0E1K]=$G23!`>^[X%^%\K(pE]?C[o@5t>Dnr/eV]<-`*+GZn>]PB""=Mu=URJ.I]2&RZJcFdBA8-1V4Sa?BZM;nl?+hbk^6<lcn-hs.aG_Jpm0qCt$#RFl#%PM"Gl*aP-Ti-b+$X9KLcCq:i"d?u_DLu^g2%$?(8$k_G>I>3P'6=UE9<oXdHL_Qd4%$=bR1.5bF(aAnC7i3G-WK&]$fQ[3$d@!jd%8Al?XLoqY+Le+'t_@TQ^.C=qm7"tt9OAB\P*e2NFFR5>AN2:Y*C)^)!:r>d2^t(H$GBFA(UUrC)_cF"\Xi)?]Y%0Q$3CI9(MXmH!%D<_2q4THC55dhP?5Y-&]_LUQ+0ue`[4j&9\1<P,`4huTXZs'(&!AqZD!#f?4S?KQFJ,gHq5[7*6PQ=&V1r=diDM/&\Gl%mTo,M1(%:goA<+K0J'(_GIqp`3ZX&?Wet"%"TD;$I.6N=cAJ<N^1I"JUblB0b)n,7LO;)T@5C2o^Aa2o'rS!sd)$Yk(@%co@p8eW.m^LYBI?%1W*f/6s"1D.s3*AA<D#J@o-W"8@DLNW+JU0#YY523r$pL&F/(.$q_KFEdEha(Hum_4Cb3j@R/i^1i[6Z,^+\Xo]uFOlqL'[+^[\K%KLG"Sb&AR1C,j1Jd0_T5Jr@+STdETH6#_:]Tk6_ji^&PPa@$i0GYeKbJWqWU4K(PP$.#9_K*Wb%+oLnh4GY"#7E_=5:kRCPL*S+q%89!<EMr'9s_,77V;.\:$#o$(7O4'h"4bs(.F#5Wq!/"pd>@KoI3o`U?Q^A=60%;$ollm)E8Iu<U3]ph;9K4"*cJZLnKaA_,aL%'9%&Zi.F%SiL\&=+YNq\(A5Tn\Janp$;!6^SFOV6qna$[JEd*;UKt9W16cFV.o-S!XbBr"14ljO7D]fIhbl@b!'X0RfJ#&4.k:O`lip%0dAPq^c$%:cCi36NGQ\Wc3-QK)o?"pI;%V,3&AQCng5uBZNZ5>.WZasJHC^6#R@d"012#8&EfA@V,'bjJp!07PaE$CTt#GDAjU`k%]:a?W5\qCWhMNjT[7Vtu@f('rmbX%PN>k*f+<Hu>+5f"K]8XrU8:+:E+]^5%2<WI\5j4IA`sF_cm3:7u&3Oei$_dh`@d-bB/E^7I%b%@#,U)rAV%]UNh0KeN\ak.<+oW!FUF9Pm?_t[J:Aho-d<]3j[3R"d\d8f[A[0d,5SnVTXYm=on,bdRQ@`ipQO>@TmVbM]R+A?hd%cTtWPL.FR32^Hp"iKd\:p;rSN7H7m*'h+7NVh6MJVKRqnTLM2F@FDG\5X7>jT!"i%l3+2>`E.S]5AfLZ`fR&4OK09'&f#(-]/$jJ%[L(^7o97N8J>:TMb2R#0%8/rJYOE[M)SS)/^B?lQYS5YqZRR<e<QGNGFBO,8:E>s`f#4:ld&kfr.*/;M:(kAt`h]?+>i/c:77qSE%iJ=kZX35KO<916LFpKkB&g3W=Q2hN<a:5^%mrTCs:f,G:;/$\Q-oDD+#cYTlZTM<"MZB5?!!lCrVNjGD6=BA8K6f4IA91&VU9`6(%89gq?^6tJ<$M%V&a:tRp=b&7]_q!6$R]e1Y]SUHg2mZ2@V-2Lc_=ksTanDscouRCkd&'TDe;L`J79F2($<-i7>eZ2h(_(iYb-Ep'%j,pNV?@):Vg)h2sFqKTngA[C+QH3Z[97l]$hNg!s8L+F2a:tRp=b-=LA7YKqPs3a'"-<mjpY&'tNLXE1+Rep\'\V=c%oSH;8>Vif%m5#8_E=k-u`?54KG[b,Nn>AN*=Ql:bpfLW1,+,bqING.?ZTf'_$6V.H!fF)/+?)Epqe(Y!&4@gW/:m;!"f/^IP4!ET^8sVs9*Kuu%"L48EN/JDaBiUc3KK`hI'5!fi5p)3B<Oc?9Wa3O'+V#;Jq&E7]Q*YTN3*]L`dZNKtNjuBVH^`b(I)FPLb#.(0ZdAKsn]#;ocLtef%599RaOQqC>"V@@i2tQ'RSPOGMaC'C4FZX80.aFuZOL</MbSd9WT<MWF"eutTmTd2,aTN_oFa195/kVN[3.OA`;*`XC&;8LUU#\:R%;ihHt!743_0+h8kaCPs6=Q5N:4+u-$[@ROuDW;-tGBUf$DY>dc+?@$=WtEr'j3'H=V?i2&U1EYaRUQL5'$&[Q#D\r^7Y1TLSulj4%UY9^.]8k2d,GV^U_D\m5LX*1Zg$u+/.eNuuhi."b'%m3DAsJ1/"KQ6TYiggUhE$[pD&M>cJ7.RI/0YsB@2!Iu<+5b'^oXse&u#X:%-\UQ0CO)0X0Q7:XJGd+]W3'efh/p`Z[`.W;:6<R_IQ/HNW+E4=5.=X2n3Kt\ST(&Ur,;XWA1ob>)asT*'_b@X=,dm-8uid3e<qrZ%<H73-`)/X;M?6c1&4(Db$'fM%R-=\Y[Bu4J(I8'TUAt"-espK/nNdB`:rV\[!&Aq'Eh0?i'QEDUT"jZ'*F&;,3Gt-aQ9(*<7juTe%\D\(=I)qE>_ojYW'(EImUoJ1#%,!Y"%Nrdn5E"?f^^m)=?KN*1jl9I:rW1k10LdoO9?#7X[5+,Pk+oR'[!5js5AaT_'G\JQ)t)7'%l'2a@Z#]53:"9SFj@KB><2X5P<kMti<jL5/-%d+dNQ]\-0Z\dolg15iAHi0GF31</d]RU4EdB:R`(Z\&)aP^E>A&iAH":7`N7l]Y%#+U`XLau%*=&'1[Mai#1D'pX<".T=8+`/SOUdNZ$1EQEO1h%l:TpCN3[d.C.CWjgPH-K33*@7cr>:,aGKW*Hib/gq%)DCO;#^Kp0%AZd,90QH$O\M+8C>fgh;2Dq)2Ks!%I2[1'1]B<>XRB$%lJM/reFh6V+)]\g,\(6',ln`IYATpTT*UTk!BZ4VS<F[/dN%^EQg<QTL%/([lmLP4q>p=ahsN:G:Ma0FPn5+X!03o/nS7+&SuNWUPkTJr'Z,\mWfPoA<gm5@gRR[E[I!t:@l)>HnfP9(=m9S=aD9R<a_5mE-)%mA,j*P`^n6/f^>hX)&f%>&>`<cttdLMV2'28\+<h]Qf9@:@LGbNjc)a1cn67-if*DM+1FnF>>o.U(ZoR1(oA`l?+Q1/XiLG3J!ul%+LI;O4]#^_$`r-MghOK:a;Z=gXCWMV2:5AH>YUGf"Df&j6KXS'DMiu*EOFF5)B1,$lr?Z"O%a@Q3cA6J)hEFa+WL,-"-"iD`eDrn%%Dd%b$L][lm_NMCOkg98L_X,fgUN'@WC-i?Z#ha57sBOs-#@AWCb#XTMb_kciVjlYjhudkA8M;9&j`t*UB\e*qm\/@iAB2]6"rD5%%rU,_.TL6(:5<d-W1q8/l9n8Tmq!Tkhd)0+$+.!D<'!*i0u0qi7J3si]4>\3D3NJm\6)2[m#tVbJSR,YVQERc@&'S\W^p9p?%pCh%DH6i5gKE*u7!p=r\uVS)B"#X(pr;LEM.sqeGV-8k8^h%%1>/*j$!j51oZ[LnVJ-\%Cii`qN/rk%R[p+64j6@><WruWCl9=HH*Ipi%[a&5\;*3&`%2`JY1miA:1r_NT>llmd'>ofjR7%%NgKKVWkA8YAHSOX_e0ZDEgWE@r;sf_kaMqh/(!T"hZGe>*_e$e7/h`WjF"V2p%.o\b98<,2:#R\s_,aSM<_]b5p443R27DViH#oZ[UfC0!DH\O7WQ[CQfM,=;f(OT'^jI?(DP>+Vr2h&k,rFc4rbmRneWu]E]Fo&Ir%jGPV8$(`!`\gA=9IE+DWonH9[<K*,ad]31JcB.'YAMR311PJ`CL8_[AaA^/-P%4*:Cq,<A]3HVpEl41Yeg.K`_@,CkI:82)BEWlI%H/Qnba!_`B8gA__1?/<:2^=_BhMr?B<u-0&i?V[el9B1<EF'D7-<f>fSW[ca`"Y3O3S_'].m@;8.#&&-&IK--7XP[HDZ=]<K>cZk%&?CiKIUhEm9#3Nn[olW!/-jPbD4>Dp=6&cm*FiBq[mFJ4*Kd5,?+^2Q-QXD/(@#a_lu\uB6("Gr,p`IUaA@ep+4l;,)8daT`+MQ<%3.Ds=VEu=#i)nH&p@PN:ok*0[-$5Hr%3CsSb9!,i?S[12;"8kKgt[dR1]f^+1946,+VoZjnjcd'RgL:s+*[uU;Z^dLWm]-_EZj].%;*p8ECRjVm2^gqN/1,35Q/HFYXaF?HIXmt2(`]^kP48iee<jCj(;0X:'=#[^ZLe3kpJ-dh_s<t1qkNlSqQW?4cEiYXor.qp<)H(s%>)eRr%6Lab=)h4kI,.c-liBcp?c.sF`MO!Qs.G9c\@NpB^VhClK$`*nRj'"MP<@`;0(cu8"KrJ>BOs_gf*B1@ROYJ0`=m$XUY:NX%`'oR<FDSa^dIKS4@$LY8)t1(m<"dOHkI#uXFa-bP=dc'.`X.8oS\udI(\SSJCB3?lX\k^IZ.-aLAc1QjOmuF+mk'Gg^'i?Whm@7U%*J"BSni847$t&:/2!oVVTS'\\_Y9ZNVE%-Rb<KGj0#NN8gT<K`mE-<gmDd0??aON;.E4Zjo?jA)U_kKDs28T94^RofZZ4/XpB'&"%D)@M(.0dT-9JVkZ)+M#+1/,V5VQrhIcPj(!-5hQY-C3=1_seY/R4sLP&/9+Oq_j9b(':Ph6^%cX_6k$,A<URA][lmd2+`P]Udc@l%U(#Li>o=aYEg6b2jS3/6a=usZ"$ZcH"Aso)#o;+YD%>3W1(8!iI,=rM1(4T&@LK?&%)]M]hf592P$se[/f"YJ&C^.G<j_luLd?T*%n]Kcm\L\ITDAHe#0Imfrbu'4HpLPOc&n0]OK"DjM&4IH2&m2&5*?Zb9UI@Ah0M&AU3u1(YL;BdQ=@88\j2J&EH4WI^#6#0MIBcq0%+WeO])o6)'`oDL#7)+F$`'C";6M,2pj/3o<g%&"$64>rEMT\B.64AfYlt6p9&6"L5*hXdsJ@sm7;(!4c#(C07#l>;R"r;KOU@De/%@^(ofpl-?S_khqgZK?>piBj#sYC4o@L^t:A6r@S#s8Q:"elBtXj2raJG;t'T2G@oWI^+Ao,muOLj'aRWAf-u.;PE>p=3Is]$bcN*%[3AZ>bjUckf7BeJW*5bhgH2SN)6kAP(Dj/mFt9bS$TCD#HF`-%\4"V.b(etF,pO`Wa)b8Nf6*+#eTnVulF^bX,8h@m-o;o]EK_F3%);^S$[4*O,h]45KQ<bCPal^/YR`KgNaj_mZ\hbF-^db@ihGl9i#YTJ?fjL'tXmE&.;YA>ppJ@i>NG591e#"T=nt;HFGcR(e_P_d[%ShIkI?i77Jm)rLB.Nfg/F4[?/ahi>T]3+6lPYF;f:[^S)/Ok&V77Un?$`3;LQn,2;+f6!_/cpj97rtt>Atl,74u9JeVK1mqpcW+a%0<OnYf/QW<QW+c@14I'-j`=m#Vu\-I<!aGC#-umK-7>Q(Ou1Sk]%OeYEcC>I1Qd6?@ijp[Ph'7CN4opD07N_22Flft$Mql[LFXdG%LFXdHa"&RRo*X3kM^p3(<KC5.2IB]TgO-YcJq<jZ$46iXND?EEfT/K]:(E]^Y2e)=rIR"$R*HsPAfJdm&W;5$n@jQH017k]+ph8U%'n_-Df;Y1?fee=5K?BA)gLJHZ+Q\U+SqG`sR#RV)+3:/7"dqr<#aW$:[eTQ%;N;N%"05S$XJKDO-Xf+[+@B2eY\#!]?JLYTD"2I7%AjjO^7n-lT?<f5",PV2sNnjMi4#4bLM`W[8Gdnu.AY40W0)p\g1>hS/(W0<<fYu4P(NqN4<B0AT#X3O<Mc'%/fYpDP54)gTJsXIC%KUtWTpnM-=W9&fJl`X14+73N,Bn*@FOnsO\`CQ(Tm:'2K0C3/@i'5l5&GCV-`DE&hd4U1'q%%X'mbbo7"paB#],:8@@2B%8?l+08%-s7*2mW_lY!4Uut1i%,QL=oN<bL*>#XkR10YLsC!/HQZ3Ci#Em%]s#7eL\E?+K>=U0T=7f<2sLoIee9%O"ee/FO/4cc?dgcD<kfH%`\@/Red"!N@n;6TF>S]dB1HEJ\n'u<q`fD'Mqbb%APoa+%l;%Gb"A#t1tB?jB.#rekt@ecP1rBKrC.=,EUKh(""u`J1(]u"rnpHN%):!X:nkF4P*pjF!_!!U-q7P,&nX`O2]K8M4:,0\,pe>^h,XLQuTiC;@-M50*M[%dlO#u/TcP4'o62K.!effJAFT/r>(V>UL)7iVe%0gB%i)MbA?ONb)D`;bJWE\"<\RHkhW2m`DHc+f8IaaIuCp^_bQ'0V\kINWM]\k?76r;h4OF*G=.rjf5?#Xf7i5]R7\O.(hLT,j]@%0M&'dE+h#;Yur"+*TXKP>X:+e,1Q9FIE(Me`-c+OQK4<Y[]a:"o^0?1+Lq;U5#,&nN+j0h]$2nr-I!R1oU7sbS?IjY]2HncaoQ=6%&,'SdhL"JX,t<+)2Y(,39JAMb4Q%>!Emekj3NFF2jP]D>#$@6-r,s+l>e,K6qp!*=fZIgl^g5@eW%j1kZo2B*?R,VmDGT-\rV+M>%%RZ^)"dc-7JqRClmSLq-M!ijKm>b,b*8@rH*a"ZMhRrV?-aAd#o(Ba;3?(fMJ`VjrCZ,p3H)>kK)^a)\k=$3k!ZEmfI!i?#'%W!,%:iju3($MaHdl6Oq9U@b$BG:mqh0JMlU04:j*]N!Q7esjL[cWLoL`nU.lH!rDLg@T..3$NBncC,<,fqHbL9(.2XOqJ-GMnD6Jcj^d%Q""G)#M\oJI#Ar-"#lR7%_B]=nbl/,33.2CUdTF43#4'(#P`[s$mK*`bO+iGJm5Oj]>c;kkdB&BG1o3&X#sO![`/^FM:KD3,hLqV%2p<Z!'$p3*,@sfbY+&4ZH,Y-E)'Y?f$j$WQ%$n7*'?f[8+Kn"%BS)Df!.&[4:doCI\qN-e,2?S-rL-;OX%_T-K/hi3kQR[MGnHnu%e.4J1*r2'Vml%,I'q'@Kquba$:uI8rL2`NRY\,<ui9pGg<q.-"okr?"T[;Pl/29p6Z_!mP*k2rN?A`'or:HD+@lRS6o_?89)"BNH%2l=uMAe!m9$%t2$<iMQkRl!&W?bq#<bL'3iE\oQg)i1l=AsT4KSkuP+P"!-_#,S?'6g*eCg'q)_]Xo/Gh88FWEF:,eF#dN%B'A)'%*o5(sC*&fP'Y_ghWU2ZP*EDfPT=4BWR+9$YCT&1/MC'FqNK><N-a,+alP07jkDsZE"-+"+(4ZQ;>(pYRaQQ<cN%)'\hK1W>8Nh5!%+=V,nDjZlo60Z&#/D%s*!'9OR##:!)n@e\GDN#=CR5K0de./T>DP2IqC5eI@O&*e&_>:%oU6c>WXL-%.MY4EAQ2?2;Jh=`cWZWh-%gl!6GG23P%D85aQ=BCd9]6YtaSDb]!h0lXq<+0B!X\68$a=Vr@[r)JH/M)jYm?`nK'rB`q2[Zj:b7(u>RRLc?S]?dCBRf1SlHAg(%pW(&4jG/MBb:&!NVZtdQbbA-GPdU'D!`AB.13fSJVAfaCej-IFZTHg%,eLj64-^(1:-Mj/T`O0O'mgR:IV-tp)Aa&J-sf?6)h+sJ%Ii!'lBOkX+e9F^UDr1R(duF[/[;1V!1L"?q-YE#2UPM5$h$t#HaWIT,B!;@HL\S8k;7s5t4,Pj1f/Ve]\eI:?`X8Zqp\E8U>(b@*%_)Npgj(<?@LJdJ$Zq]B]?K9^!aZ)'_=^9^d@Kb@jCF>LO^;oqW)m\=GA+jW]A-U7LlG+^-Y3la(GL]PgVkHXM,u:4_MR'OVo]<:l%QAs.T?0iWhN&Y%qDUpWE.[K,N-7]`:9O6YAb-uOtU-3@%6"h_5@l(a9=sX-bim/7O^7(W"W[sRA3^?ASENdV#dK"3YYP"ro*icep%"R8nVqQper$(69Z**0F12pMoh0AXEZVd?CtraQ%]EcHT,,BtRK;W`-Z9?<mj!\(p]"fQ`aa)4!2rN<(B,UY_>GoI#Zcnl?tO$E7&%8=$GRY:30=?1R\Dq['SmqO7DUY6V1pa)/!In&T[bgu(5JoMb(SH?#bFb\+od;g*RM5aH.)'NL\D5]!AhELE0'7(F00OB*k7rL)To%0AX]$SehTd9kTq49h6Q</1rIU@aY?h^M[M/^qJau/YRJ79B)i-;K*bJ4.lkS,<'T43lB$7*`t.cAqs$sKRh3bqMFo4d+2FJ\m'Q#%QZ192a0.p-hKZ[JAMNBAER5%>UFT@]W$j?Ge[mm?N%=O'qN.B+RO/u^cV,\J))0UhWuVsB9q5_WbGKXE,(\J2!Jus6_:.aG]6neC%-9:S,\@%g9cI`$8(a$Pnj7ZB:>"1c1k@;Bp'?Wna/])V:_$LAq!M(b`?\!3to?$;g,&\Y+UKK)(&E`V*TKN&<mp49FG$g$*K:+Z)%.n8d<L>(J*l>P?K'/(9FT0j&i+,?$6KCOQML%t;.nYL,15X`%jURB'r`1kSO*T2'V+N$Ws^`oc[4^`L.DD:[Jrs7%cp'@D(qKN%X%g&;>7ZllP7%X3;#_tqO!#Ld=X%6saSaMJl<>(3pC3$hIOpr^pC)sH_WZ/OjMS^bQtL7b$BD0!+O04pa+Hnm4>JXCG@\6WEE_0'eb%f^jZrCG!cT4er`Y@$p@n),+tuT<>;@RU1dhgqQ3+Xo_jSDXr.#nEV6,ML4N75"l]>me/%54*dsc5"GhXR(FfG))THG>"c?aclc<\%8>n/oIXMU+"#0F'oWdu":4lWF5[$-_-c!]L+12J3_,.5;enPEj),33c?\9+U#OhZd>H%TYd,)L>RA*BT]QKndOr.Ka?0-_.!emWd%J\oP\0C,Km8@HAP>j:a:8A6,kgRX`n3=WK:6!pf89Ui+SW".B2\?FfE)Hk\\([L3PlF?_0cbFl%ZX<X-If0f7s6f]P^O5t<X0:mI%^\mm(DndZ?h/;SoE;b!/"dgY7F+$W)W^*3Vcb$sfe]0n'qtohHrpK$;IsLn`%j+%8gUI4Z[nk?-^\c^9s7mHqr97;?Ie_C$J,'#4%+9(j'GC]\g+.rSrDgqBOG>IP8YCHA7YLdiFs7A7bpe;0(?Vb"Qrq>S@?-iHIp#jadIW>>^k<H`YG:V,RT)S!1V$$@XY-i^1QPiXZ%(9IB9.NbF8Y>KNGjgg_8s-5s)2[?=2+sb&jJ+G:;n#g$sbOpqrErG,"?-o49@X.aiVuQG)_pe)Df)PFr1,BHB\IE(e38m(bJ3D>1%"L,160Ye"_<+JH@=;Dj3nX*3>&`Om'L=$[nXGC/9HidDh\Vp+X:Of[daTC[0=im@'8fPR1rCLT<M<#(FD`4bf!MS)n%UDjcdn;]i%6,;IibTDI%&Q#%;>;::4:L73LPBX5A:dcM?dIaWHU[>W67-8BkSlYX^=A0`l?=9fYaEl!&lB6PE,2NLES5(Y]Z?1FK0Z'qHbWT(?%_!p!2D2gS!-WE^]HITcabh;]0WS$r7,EhPCl.?(P\eT]b=)$6%f2];sdg9\1&tDdM0#R4MD*r,K/6(kOG!VC@Bg=[PS(#b*.J?@\%QEo@7"h]Kk<u/Z!$&ss31tr@jgX<+Whr&YL%81/UJd#3u6EJ!,.)ES.ES`JR+eW5_*e9AAI2^8Z:G-"!U$^H.=:>QIGut7\pBB6F%QT-tZJVI7UNoa]b25;=PDro4d>4T%0=I^A@lNTpN(qYmL"4C&-c^o5T>P7dlRjI4U)aGjYm<7<(m6bpbV9cq:lbf6dBKqHl^5gS:%^2*0)Djq-P7#oO>0!\*$rE@B&kY1h^]8NIHS"/p6$EH^7PDs)5S:9oVo_0FhH*>!]k#YnsYQ"B`"./\BOD?8t=a%nY*-hcEEFC.M%D&ct?bdKIo_ut+_bi*o)7V@;daZ$G4,0SGUe&)J"-r3&3W7BQ5eZs&I9@C[:&P7/7;[3Sg$gb5Ag'67(/*dYF?&sTIqJbdj?S=F[%W9m)dJ=d$OJZ!`Gl2^BBfoEH07m_dSrDE-2D*1Xf/@%T;*Bn5Jd%$3+m>YAObBBh5.cG1]a"($)\a!%?>-\4Qeq%Q@_a%LRp6-6Z%GhAGWS>-[r+*ThQ3+e+e"]TSS75ZQDZ8%8F.XNru*plN`Q>DF7-sci#W<nPuqX4lH<H<3rmjNHO>XYBNo!f04Mo\$P!.,]/&Dnun%>[;c(>deS('BunfEN)iCqE+5tht_KM;NSZQdR]NSM\m(lMG'4B<K./G4(sNf>&VH',2-ZF?[I@I%(0T&6N]?X0Z2*C:pe=u5(e]>%I7%:\boX"@:=4)m^tbKXmu-KMN-Bk(SqegY0XCbjFITj-GSJ+]>CL8;CDI&UCF&42^NLWEPgV8(pYqh",'O(P#7aa%">KEPaX>l^%Q3@q0brPlGc.9&nTi3Oo)k[[P`Ps-`jH!'+;ZoJI/!/%Ca4fa"&5#""g2I@R)@S[lU:2VdqeMht9.XCn6h];CgA[if;IB=#$%3.u%5nf2RJY4]#^6D`P[i5?PHNp[o@qTR?+bYHFiK)ig%0r(o'cjG:EV\0*2"AtSR-CHA.;E>OkOr@pf(cH6rIJpnEe#"25$YC)n<u>b%9Qis8(HgMHb?[^m\C!2Z51X,OE'g3Me9D8J9904Zn.`Gj*7U`(fR.`]0>6L.,[WhN'8K)9F/?F!?u?&\Z^*l\.=-bkFRMak4@KYE%5CS"1?L>;)1Cg2eIj#(=4:-B-?Z1#Npr-#/R]a.j/+`Xh7mce,*:_FmNeGQDS5`E7hcZ*7:9%lspB]H_K,c?TDV4;EHE*q`h(uht%aEI8.V&\lq:Nk?CR7)jp>\naBn82j:OG[`:CUOu88Q;S`)C]E/hR&,p8ktj5([9#D\d.`;\<L:MJ<&=:"%<-e06mf/V.R)A1PIG#%Q.WO:>$X0qp(-T=RuQDh1u!'EU\Q]9pfjOgpe_K:P6Tr5P;:*%/;LT`cNG3#7!?8[)1Vgokf+8Y9Pn"9"_S-ZH02!bb!N@]eOK1V%aZ8*jE95"MQOpR#UD[foh`mBBBjJ;^f,>/4/g1oFj<8Tb+L%e;i0RuTpS%>"(u76&)HgCeQcO3c1R+ogHdE/5K9.r-+GOY',Z2a-%$aHgt23Z^Pe5IS[R1*i="BEF%3kK6]P)C<P?gY=CE,oWh^MiSbJ7YLS"-HG&O/;nrD-c1*m1;AmAIG`GKh5)WR-VZVXipi*FjT.]%0YrF`%Rmll!!R[.f[CnL6-#(9Eco60;BKsojE3XOU`8$_!ho()CH$!K'rYb0(1s15M@p$Hn0p(O<^sNY9<J#NPm#83Gfq]*O?M9E%o53mkh%'68!KA!DhM^28i<(]8!hQ%-`NRUASI/2P8U?/SlN*`nXWq#(0Jd"PQGJji,XY5D[DSmV@AGfkekZEPl?_6$25jM\G.QFA%(t>BP]j3ohVPX]D?9k@P#$UV3>(b&WA)G9T/[.nD>KmXu5bVlap,*-s6ra.&r@Ap[,^&0@23)HU&.I)09K4NK"2@,H6X#=7/k*[5%4-[/>8";Wj"*;:),j"]o^Y<d`A]1qd#`YNXe68!*aZ^NL5*POSk\=ma+ZH8=KI2g>>P4bN8J\gZ>B$OjO<,P4*T&R]1<aofg:ON2%=KV9?YssLXe+`,iU;b5<Y.=''YuKPk)Q!mWhR@?do&q^SH!W94bH4VJ5t:b@3b7QTc[I]</74P9d=OYA\?UtFLMTG8>N2<eTI`%s%'IihcBK$(AIeBX6:IU)0hU>gcMBAEQgF>NITk<!V7]e;0ip[+R4V\Gq)Dt_=cWS.km53OjNp+7hmnRgq>f`dHJ8P.%$Lk0o6tq4K%q-/3950XD2:A1A,LGGu;9Z`Xd#2,c;#OlCCJeZHd3D;CSocXp4.XeYrkitH%n.%B]Ft#ZC+N+$-e^^8&5FG_q/HPr/[f)r$!X/rX%13#U"<?OZP[FHsc/?[+E2E4j'cU4_k>Y#@XULBC-ZqI"[RBMF\:Kps`+_uk".Q*D@9J0sB"lh2eDJ8$Ii6/i,N=W`b9'STTUj<-C%D>JeGA/YqRj0[%T_5-=#8e3>3kYj$,aE39+Z.8coAns)1JbWl"]=8SO63`7O7X6SdK9N/fC'i-\T9u?iUYPg`9/C>A\!d39.q##j%ok'b4%CR=\nN$Pi)q4Q*Xl.%_e4e&r[@n"%h.IFt\*.l2-dq,1O6CW*L`1j_`>LTGWQ1.%?8iEl24mY)]quAkVYd*6DQU@T]*5k]%AFLD.38DM;;iE*P&/Ask0!&U+#Q.P`]tV_LYN3DEDq7u2$:icnFCWV%"+qO37eb2uY'3AVqI',,%h)"#c->pf;"YYi2kqXt7j7_]%<Z.1[(5k=9)",0\"K$k.U".O2S<p%!Z<tdHK,4E^->GQNI[VrYAPE5e>eGOXA#`j/l!%1pIJ&VDIlrAi!j+X,@(!'2o)UWE5C5>i%/*>'\b&6o$mCKm]At=Y;JOh\^a_'hhe[moN&"Od0/3,^k]1[7g[$#Z[K9B?tJO%M)?b('%L:n_RD4OS$Ddu;MVu+W%>^bH`-nhD\%m6;\oG/X@t_(s.-CA,um<IWSD;5]^TEHck14mkU>mI$ZQ^NL.`p==S*f%8^k(lUBGRG!)5asoX'RJ*X&k;q(p4.XJLPDO7_I6'W(%CQ"//42?TH\q$T\F:5nhe4hYb/Jtc@J2R'oFM#m#.bQG.W!.gX8L,YNVPOe72&H?5R)%.ScJ7XbfoJi&)%`3u;"P%uNQS8]0YG9p%'sRZ3\TrIs6%_VOOFRVC;DnfA-I>l[d>jgql+`OHW?fDn4<Kln&W_[CXhhc0g/&(=)Q&<5`XLhaL`@ks+3iWN"rKGHq]BZX+g.jB%\@"%eUfgQR""Rf+$?#;I]\%00i7Ea0c^9#%qq&iPrK*Gr^GZO,i@iTD$'ei;#-"BnZ/&*f(da';6t&i_pf+@.8"fUuQUo-@,a%+<%aD)lLn^t4/]TNi#)4KF/E7O'_1t*EeL],7sn,DOL75+&WD@t]^^]9h&q2!82cDRL.%SQ_6X!&3Vf&6;JCfZ_$B1P$Nl!b[DK("dQ%_,/&&%bb]hH380hKl#kSloXRN!-%_(Ut_5GQ%opa>t\Em%'fQs/[8sG17+*oIU*:nA\1oP0q'?A2G1B8(4sM=O/=Na;44.+OOU(i%!28^DAs,Mp=K4W68WaBn1?0"j?o1)$kZRscdZPM;K+rqD0_B<o0RM<TCrk>S8SEF7OABTuB0-lpQSgu_nM*f"i%O"Bf^^Usf!ia$%i,(9c-(msGjJrW9']3fQNDf>m9ZAg!*?nnHFpR/Po,M[V6:udPG'LXT"B)LkG.6>D!gKSmLT&r9:#Gm*&H"H($P&49f:u3!aA:^O%l/EhT3Y#d48^DD]+<;GGjj_8=2ej;i)N/8Z;"Xfk,/H]OiS;qm+gu*2QtJ3K["pIT/1[lYZ<fTja9QuC36:(m[a)56'.-C]J?flG%lrfZu/;D6-r>TfR#`qrNs+)q`V*Ce\PbDsDSc+5UU[/&8&];8Jc9S(gQG"L=fa-QfqEqm'H:m`p$=9oiF-%rn"pA[@h`Gj.S,t_s%Scg]Wp01LS=5DN1PD`-LRdPOQM?Ri>CrY#V9J3WU2C(?AiLAA4(+X.9P;^$"R$d7bYS+R8(/-%gG^J6i5=1pAYhCh\iUTf@4$m`4%mq3$?k4'\FH,0(jcn)IFNp]gfVG)WoV/>E5/99OCRB0[h8M#i`b6(^BQG+OS4$;3,IH`W41kX4m+a\f9RM1G+?9fl72o2qI9_Q:O%-9"[6D746CmaMR[;-hH_D[/AC,$0G,e(*67(L[r84uYMX&6D"gVJ;ul7=]i!7D*3N]hWhIEb4rEQ^Bj=Quq5@gE!#\*l*^CLX-*M%Mgij:bQkqFcn&cL1+WPrYpUPh7X\n&Hm_K>%(TJgJNW[Z!)W&m5;"L*^0Dqa*K*6ZSINE.T%7c!ZVdB]Kt@tLRFhOO?Q_BH,E;`S%dkiU_&0c7OkWK*L1*A$[f<R[,)B_C@T'98>@e*>%g&\7fdT$EpioUP$J"])mjiju&mY:NXf=k\]G?fTrY-*5mALEs("C?'K`HF68%0k<)<o8:^@"Z,e+G!uf>hJbLSV)5kB1k.:+]\dZ7`Mm&RDKItIm^P?Gm;L;UaN<r"'h,DmZM%fs4lb[;^mHI&&^XL'f>2u"/>0:M%RA('k/:^%uX,E&me.g?f%L\_^D.rF??<&2gl"cuf1kSf<R*-F2^cJ\l+>Q,MAg]r_$o7q3P3L-T0Qmpl96CMd]sE2sBcQ^Fl8.Y+%!q2D\JQOsZ35i4HWkIDT7T02R+0$H>p87*"p8Cu[\CX+K!GOa!*<]?==ruC//R_jF#R;<[#&3I,:fH0$%`7M3GV$:H2X"I/)sC=T%k6$AM6Tl7=JVp';,hDKa]G&Y$MEW?2V8Q3iFe'%92aQTSpo)+"me"kBNb*#-bD8MGmuqN=S>9N8_[=KG+C7SV]\VQ#.g<:+^NL-u%mZ>/gfTSA)"#>XrVp?@ODidBK-Z]*N+*7=SCe)cfVh9A+=V3/a\^C-W\r"PnH[q:NY+332aDrSCoK@_)V_$MJ/9$d;cJAXKBB%q>%,mH7Bhe(s<!@j!;7p[70mWZUghb08TTcNN.;&FmubX$rg+^Uc3pAbuV`-=PO4BW5pW`l+'maVt0qB!EiWjofC"%`aDnf#F5!@[[*%Vm4_F=JKHMpJ(K*T[I;8*a#P=;faSVnj!3A7ER.fI"6r.8Da;A`[/R66Q]Fb-&t#-g>sT(4t1l0MX/6>_?[<&Y"&[<Ol_uXK5ZM\%KC8qk7.=^&a,LKk^,3n]mgMC1Ba,TiY`>)@_Tjk$p8B_K(k^/7eLV:="s92F]6g&AQRp(tR4-A=j1I=k\u%WuYT'^Ld]U@OOKJ?8%A<-A,Ug0hXV$I&5CV^m9-o'5B4m*5;Q6M3T'JfH,a;B:P'!.N9&tD@VE+JJ.f9<7$`o$qU>*FH#<Hq@FYY,3KK9+nnqE.M0J6'n_%^:1D;4mU2P40]ZFd<#R78#S$Le!.O]]DK>F'e_r[XUD/VpK4LJc@3-QfhomFl$JrZ.)Fj64`1s'2(n_Hf2!6dTod"/*KZ1d>FiLK%($\]?l$IqaQS4j#]b>G_h@;Spc[O.7d:D_![S%upO*c&k;d"L5p80k4dJTCWr%4)o<Mq*\fpag#oK=7(5nndGmr8`C3i$<V!!#5e%Y'nam\>Q>Dp8Up7HFgZti8T.cQ;)&_o!fTYc5YgW_RX-V*HG4PoTHu0U3(ZOF#<k;=/E8gde>0:d[JRHD!=.Ur[joB\uYPJjnPkd%4P_E"aUg8^j82Tuj82r/.kROUYhCnbfs)#^Qq1mh&BibeqpGg*?1E?AA2T[qaS7qa/VZ'q&"pcf4MVJ(3'rO*">tiQqS:6Z--#K%%/l^M,9jd%Ri&8r.ED"S96kV?TRmo>^%N+,jbb6E\U63JuluH6].P'@@?O`011pp2Q<1o0Tpou6KfNsO*,N;[AO7,.RO71ghO72*J%`*Her+2>5h5FXgKNu`'umhjp%0oF-_88ATf2p#q[)^lR<iNRk[<S^jKI9q6Em?+6E3)NG/\Wj`dO`m/uq!C^n"o)rm*T2-n%.IbT%U+i-*^]6S7==R1nqrVBp@9Rugj80HVR^5ou(q7Q^9m32dnU4GJXW5T)HV8^1+/%-L&`/ike2Ei?_!jNS$lE&jhhcT&hZhrrI66ZO%IJ*la`%nud+!P?O8,$/cWj-@D_lCJ.pTh6OlMSB(5fi?STj8.cM.LcN7sl1>4M$S0UPM,=p[&W2_0qq9P2:5*^?St#CuT/8QP/rT%!AO[i@WFs*8(Or!?#`X(\A!RY9heMmK:Oc3aBQU@^1=;mEE4[&09Q7DXM:DZnRuurPXk,o4qlaP.C/L"*Ytuf)nKf!07#&+XN1$S%kJ\WG2O,X0i?<KE(u**U=9Nnc*tSC6?#sXp+.uL&*ntm*g9ETRfY7<^4LT0XjbiH[5L!^8X92qU0t>R+R2*h[_0m;^-1i)1a!'d>%0bp6\Bc3p^D,(LcNCUS`j]="EQu%f+N9dTE'=o@k(u30^d@9,,QrP-,W(;L/ke:'@r2URgG:lHVpH>\6[qprRR1`l0;S4%skUK#5%Wma*jq9oi=4F_fmKb.NN%"pR6C0FkN4,nl[1"H[kQ][`U*6U+_,cdB"6Jl'kXKApE\N[j?^k,LFB#Q1Xp1(0*S`*W>YD?f(b#PlM%#_!Nm6`e.hN2#,YK*s3L-*:i&=CNh<S&kLsXHhA6do-'&O^#+5i+-E=k39O<?eDI$>4fH5f?TgZY7,PZQRSR_Mt'@rBe2(G%9FHA%92XLR0h]uH,+MN#:_Lb>Tj0.*m@cH^K1Bh&Q4<eMe`HBG;HSOV4_SV%TQpa-ZW<[W^jC".''?=2)7:Dkc\M*3O;7UMH,mL\aXbT'%$C\>XOt6,XAQER_j`J8gL=Z]2,)YTm.BM8Y>bD:#"CRM@U'#WeJ$L\u5IK\cmnQ\WHioima1TKd_Vd_q#F(.dW-4qEAF-1tFP<FW%Kr5bXA]+$d`_cd,1^p^>Bj\:Vq__p:=I*U52-BgRrTb"W.>*BLiJ*X@ha$CE89Y%2!1(pX$g-S0*KJucIS0<d,ubs_,ahu,((cC6%*TLZ`mHbmE9o6bQ=]jG7%N@Flf+:Be@<Vc"[(*7R@-2]]>T!;$4S>k(lm(S+gm=YdY<!Go+10:\cq(udV.)=o`=0E9D"e2qS93T<%Go-m9%^'5LPDhRcHJ2E*E`0BDO]b#KSf.no[>kl<8)7NE&(sT8H`+.cKTpRnY_%^[*A<^<?&J2$7+T-,+BL-),]nnDFDjUiP<Ob/%Y9KLt=mq!Cat>K=Ip.bcoL9(+HP#bHYSfl'0kDJKn99k#)kpQC_!.+q$M/G_kiM]&1%6_Y]G*!*,B&)Q9AT\'fm+o):EUNRcB`1*%&i97(IEf\adaMipd9Dq$l[J.Q<\<n.h@$:u3$!Tl_?0G%'f'Xl-IZr'>?T:<Z6D/FI5S6`'fM2T$.P-9>V<+E[R%`eLmUH@6/M;A%F^8N>9/#3,7CVFqVIZs8/Eeb9Re8'MD['3pAPJ*(0fbY.R(^4f3Mfgj\pHKBgNAdD4auhh80:qp[BrmTg9nR+pQ0NaiJs"X9.&66%Jp6e"Z$K9%G>)nX51p+8.o9oflj7s?$lU1gprk4eIAPK([&`3E.,%l6df@=ef2oF]\:>9XQ8WF6=($p5i8L\7kfm-JG4R2SBkSQn%.LJYk"3pp4fb$LBoF:q;,M$oq$VGl4n^)0rH>NS:!fQ!=P?OfSJfI*-8=X=-J_G+M]s2G^j-;I`h(FM;+ZRn:LHh4jS-^J`lQa=L%#l\M(IlecA0qffC3,-]l4E\Jt2WCWZ8ek/]7e.(M5(f-nN6n[=7+pn'k;*'E(F'^Gl`D;tE2ueo^&j5W]!@)k"J:05me,X'iiEd;%o,</<'[rAHT-8iEBjRl@>c_UY&_hUAQd5rf=9RmDfISqm*f0QL*T?PX2a858.F`@E_qpp?/lifl\>POsW.T.OTU\)BBpbc4WdjX/%m4]?J:mp&Q5p0rDnCOE7=9OnE#EE$6DAs@OSD6R4D>q6)*K"efqY+lT@'@A!_o26EeILc#du,SF!-n`%+:Q7p,+2$ge]]O1bNJ8*%"co<3G0$7kg$[9m]C&!);*2bRW>oDS#0.dU;]'A?3.i"8\T:,JQFm"H@aJRT/NVdVjt]3TF^LrR8)_CQZK2O)0Yd$4s)KjhWb^^S%IjVko6X\cchn<g+PfHR`<"N%[B3>PtE0!I35\*R348?I@&XghGh>?"1aFsGDVF%Gg`LR8pF+l5MdrQGK<lm!&/0b2:JtQOb/N<bL%/sK;s=:7V'a@*fZpk8n/ZIP04><uj19.TE[j9#cgjtYoQ$?t^lh[jh.%oBOpdh?Pn9EI!$#;-?(0&q[:UEGk<Zq"?EIMJ9glXgnW%<l4=GD1PJuEC9*72!H7;Rmi7D"N75LPb_iT6:*:_)`\f%V:CHLG-cljQ?c/WRe#VRYpXTm:KOmdp2umpn.Dm<W!1nKd'#[&EU-Z`%+c4EnC@Nq'/pTbsbNSo:%GVcTq@nM<&Y(@Vg?_!?VkqisRD9,'A(Y]:@bc_LkEJG'T=59m,,dq;Wb$1oUQrNtZ'-01Ygi.!ld4<@%#G2ORR9&2c+P[UGQM'H_n[<g5]1@XMG;\#EDa'n6#R)Nl:/D@Vq'ITD*O$^0[iWfBdW=$$+_4]N`V!-a=N#d^DnD'ieUnh3T"[FL%QYfE(T4r?K^E_CL$2$TE(@Z*<d<S4"T4]IdA/+qH4rC3q^o=X9./7T#p-Ms#%T/A=P7(lWBtcASA_#AeMduAW]3g'X8cPe^(8Y\I%c1EO0cs[+;2fMtV2i%LtZ%R5gU90g=YB;LfB@CLe.OZOsNl7ou(u43Mn\p"t<#Q9_"pGdbG\@nF5/\;C3$5369,2r_4kPCGAsp'4%E'CG#XqAKs41$T.)iRfLq7?_;(*^ZjY3;#_]ji?\.48Z>BT(rag5W?YAPL:d4KP7a](f.IFR&Y*ZOpAYe,`nZTt-<k,`?;M?pDSb%Ap'(&n7-md([mm:EoC@0"f^,6qZlPmq4XE[CWk*8REfD-IdK1f6`B00-Z2StVtGSE1%g_7oaQf"%m[bK!O=a(OI4ioA"9Kp![t^B%3/7\Q7Z6taLSGfM')KIt'^X4i4XFQ5k/Ck7bu0i0^&'lYcuIj3I+TRWAbpuK"Jka&M6O0PpibMU%phi=*j)AFM]*&V(8-fXO/SMn%f#2O!WVB)ab-f(?"KGN^k6S:3M6A&rj!"dsZRqfUX@Qqt`PF7a3lD)`p7u^5A]-!C1I"*cM1(D^cQ#,UI^!+5b`C.J4%e2J3>/Ef%3Jo`l<RnqS*)o79el;t)_Gj,pZ;<X<CYAZX@mhj8N(B/OhE]'k<&"jR[ZY*'H<R(edni-IF4&`">W,[a22dmVaW<cokG0qfh3,=T%]Q:aMWnsmPq/21Hg0o%;+-o#jHZ[1fN?l[Z1Gca]\:sU#Ofou($VF8VioCjq0^k`9/M?Ji#O.D*EJpZFYlVr^k1KF@7fgSu!KEl`%Ni[]M.^:LT<#]G,71m.s]!FhDQa.UX[<k@(m#5e:m*T"%0P\"2.sGPt/E;^hC;HV3Crq]i>q%.(k1IgT/&CqdF683B7#fG5]g3a(%\l'<%Ll/[aOl)mYNUUpfUWKPiWan1kO[X;l8p74[d360B10>44D3i#-io3a(3_>Y"m?5"3RH4d0OKu7!%cTV&9koGIfBI(o)e9=Y%bidLdlB-P?hb*LsR88tLL>/G;_k(]moHL&rZ6T1Z*,QOn)cLbk,r]A=1sc3$6cr=6!PIQAnPQVmH7rDX5DBgACLmL+DBq_TB:lng%[*me-Gpej+nW8uKTk'(;k7C'R8KN31p?bTh)/TJ1\oOJL]0]m@Q8R6^+dJ/+3LTi*)f$`!I1]@=2kK*m['a-7dLTgYA\S:[S""T+%G1.X9P)kLcj_bffT:KK!6W6.]61@aHDi^\VOY'PiIOj\0FY.s$_.0%ml1NHYIRq49bMOEkg8hXuHHJ.N!((;(!nn2XEhX-Cc9T_3%+>R4U(2INW(B"pU8SUZfE"l>fQWdkg83"#"9ji6V/<;5U%M>$AZcn2:$4/Y+/#5oO^K>$r:+iWrCo(itXh*UU)=d2PSU\i@r\Oq;%@f*D57.fr,X0\X?bMX$aFf2C\E_E3hQ!efmFB4Yg,W^l:$<1+?*C^j!;4'Tj?=S3nkQmH$Pii^2k_^rGGs73_\'+$HY4oCf+/mLA%o%oC\/(u/m#CSn934G=_LH&ofGD.i?3(Fj?VB36,+(PDj?(<,sHBlu=dDb+OI@T::ZOg*"_SeI?YBrSpM0#J0mm0&j(["?5?WU_3%kj;usZTti)3&\aEP;jZRJ`QCK:+=4/c;AI%V[%3*OJ"pY2/s,I"1fc'2s;%?#O#Z\/4nqMc3GRQ=*0MFF*q9?E)N:&$V<'A-I2o)%h<8&0nf1$KiZZVQO,P=/"4NN'CR.()9QM=C2!+P+f5$L1MCm&_Oe5pN,J7[OUE07<b62AH]Rq<T*oqU!Bh,`Xj`uUd6uI>bkSnV:%oE-q4hX:`0-.5X>r_]Cs0C;oAl:dr4DB/E3!;t]=D/Y:'%MGf0Q6t&KXtGi#]OoS8dP4Abl^:/5.&M6HlK`%Bo.K*@C<DEL[WX&^%ckP8K+rq?15#!4AgSQVN*+_1^;H0lra`K)D4P(m'C>1S+)3RZ8aih6P1Au_Kdl1)YS\Gs&-I_cgjnb'4`s/-Xqe\Y??"d-l9W5]c%c/0^h?;EdTTmdB(>H$RI'B;A6SMc1e\%lPN\38#ul.B-5iQ78I_jhj]9P7q+EXHrbo@?Wa8TdE(eb7AX[MT]_PeAWZTVVF'Qc(K*%#@],_>^EWFqp>/J%.6oTJLeH@8S&5$@PtE-LVf&JklK"J;Q>f>V19#_^qMWRp/]%p6"Cb1ai^Z9>h`Nk46&4(\0*<\)8_4DW]7BI%g/#_@8'-K8s1,U+p*.mKF+rE`\_bLS,8A\YRr!JdCZi)[UinOg4eRtG?ERjK)]msDRaHe1c%*e`dkl<hDU<g)*oKG+$pZt4RXQ^?%K2>k*?EZQ=:T:X3J1:OE.9"Ti(.BDj.$/Co0!.G&[EFD[L^oH$;CiOeV[PQ=,]p%4<lFKfYiHN:Ku;)'DK9E[R9O!+#*25)=K%jL%4C<)hQ\1uH7Zk5Q_Nf]pM-37G$m5T;bKn_BpW&^j="Y*Th#fVJ*"8e/E_lm8ot]7\2jIc)Zu-rPOO#a5eXG_<N-fTKrlcu+&=-H^%?Wq(Vh`uKc:Z#/AGsIa?i;L7sKC9u<q6r$hCH*LU=+V]+=T(&08lt'SN;21RF+t<sc':8E(>u=\\"sr7*Qi(.7t$/_O5C"q=FsOf%lcP(IdW(lZI/Z6@cVKe7*.C,D,7#gQboq$:#6p#)+I"#n/!l3kCdXVHY%YgkFV;4iMW,ZZ1?&=L98F"\%(Rscm3n')OGr1lCP<3S%N5[Ab"t:M#6[g5:cfiX=aqY[Tk&)lo?DcatNWj6c,kW^X2N8,RELfg8*`2jHV#]8TK&ln(L6Pa,GD,bF93:\Y\2N_VG"'#rYm5J]%X)rI5&F8LA!q$9!<iieLpl@,9b36"t)pH*TL#G0+e$O!$rn)%u\aV@a8"ihl'ru>&Y)J3"h4Ih9Dcrbu9hqDWHC55!B-d@5^DpMG%W5JCe?o!n95X9dl"?hCM5SbB=c50$Cc<qh<q9&RRXP$'I5bd!HC<cZ6#?VO3D*M'lBokqCBUGk$cbb)Qpc-IG`b`?f]d[!e]=FZE%Xu^*S[^&O%WL[+@_QQ83"#N`D`aN[n4GpL3U8[Yn5KW:s\UUm>%qp*.#?_JXIS@;<,PO6+C2o3epjrPel7ietQ_jo0CUP9roaM;u%oa2nta%OL$3^>Z.,8Id!PXCbm]Rqi01sOd`Fh;kN9slc90Y;T8P8*>.=UYB]%]hb=cZZdW=%iauUTA7;QjAmL9@kmR1)4]-&q*#O%`?"N`^>E!F3?aS]jUGbjK))dg_UHEhT7Yigg'kGjg9TILrK:"5qL8n1D4J%Xj-IaZC\Odb0>/`GIG6o=i9^.No(ddYgA5NNEq/hH%k_Z^k23@o+")AT?m,W@iV?M:[5fBWKA]ZHg=`FNeR$+T6)dKE]4D3>HN4C^+8F[k$1r*GClq/]):f"e6ap[88Wsu'8N5N/X;?Bc/%>.udJPf-#6n/]Gn*K0GDmEqBAeF4O7cqTV35o`[.=a]rD1/>Vkd1cffm]1b.Edh?!cj(=NLcUF8GA"Bc\9,erkAQO>AGt\92Y,eR%W,0WoD^V[C;*gQcZYM=BBKg9sa"VM#2@aCCalrV3P*:TA4`fT'L5E#NGV`_bqk2rYcpn,u/t,qZQ&H)jY*;dYa.#U/Zre!7%g2+b%pfj5rD\R9[D5d=(:oofHgJoA`X:Q,)Cu8BEUZ-!3/X*i3I`s(1[KoKB;I&T#GpW/t]D54$fqW+)D(VSf(M6`P`dun*HZh9LEY-j)%LSSm")=K=U-OfQi"BVFp@R:la_\Hq)+P7"'U("<%g=K'o"(b+I:]fh8*8CY9knBNAGLm:u4r%2NppHh'Hj(tHp`2ZKUI)Mu1$Peh%SNO52@tY@F'8d&HimQQ."3Cbj6b<o(NX'Tt-[(@[s"lZ)Z(-A5(<S:N,o%F)]^<Eqq;--Q^Zq]<aFZS'rop$\p-U;3WAfU:AKlC/%W[@lKW62MU<CM6i$mboT"_'u`)3u(u';Vgb5Lu&6W?=2N?^dIa5'C+9phaHLm#Ia\ZNF'eYlU8ig!RE$P9ljH@;1sM]A&ddILVVo%rE?LC$NU&2Xi"-t1Y;-gjk*tF32+mQ)t^Y_rPtAg=k[5?nLaa9^26RHH8*gc>WkdF>F*I5<n\P72--FbfWRJ%J<tR$YA_3?=4V5C%f)Q^-7*kT4bXDnoXL$f?o4Zk@.++KOOfrQ96HoFB\32GUW0qoC"dRBd`:<4^_$`#iAFb!4ngF@IG(m[(af34*A/unJkNHD:RN[$/%im]IU".=F^X(FIhS$reQZ2B_\ZuS\c67QUUDVI5U$J)Qr\j;Et\I%gagafi8d`qj861I'd.KQV$F_3s\'0n@UE`-j\UCUoNc*GiR%R@0h:J.)-Wn63bY[#QnWc48OSefk(:C,amf^VHbh8Pp[9X0W"$N&U1eaB#mQS"2Mp<MR9dWjf*_;HI6?,3/d44;>aF(D.He>;heP%*ZYS%lnH4qfiHKk-]D%e"I`FGro=MpMS1\3U"$CP>Wl<Ib)9-;e>(P-r#pYJ2mt5N"hDq>4Va*Q1U`&HIX0GE<B#fJ+j`4LN=juM%e],Zo\:'X2DBSgs]GFP0k8]SM!P/SkS>s2+W@_%fLkjP"#Idh]a&cm:WnM#n14YpdD(1\a_c@=Wa&TLDMND\^elLm,CWD'OO^GVN%$?B"e"rDNL#,lA4Ln]g9_!f^F84pE;#`m6ZT=dI%=X2Eb.?$8*eEU<KWb$ZZbUrDbXkh&B7u]R`n\(U?NMnWZM*I@Ok5g>8]%m5&%H=*O[=';Fuo3rFW%HPB<1SppQnYPt4?.BHF%qC<DX'M&s]oLHRP<*grkE^iULQlpf1Y4RYP#o@;/5Rt%W'lcMQaI*o,/DC_]'6.R%iqKfbH-WYLKnu98Ra77+`"e4B*IskRS.T6F'!@T^jI=C)LTOjCb-qrpX3%JJ<9QB`Y/=[k[4=@gFtq%[Un86SD\9C\qs==\?&lGN%Y3PHf<gaVjW(!&@1Gu08BSMP$jEFqj&[_jHGm.SkZC3,-q#H\cdVJEhMg(JbC?_;Z-o6o:/Im2ii/R"'>[[%&'XJu]C,\G<9Tq!_%KIJJb.?Nh8"k@Ba`jC#V4J,&S^@9d9G.[>+^BW$Mb+dj`.'cjVN)lg41,8IE$AubDJ4``I<kfORN87!\ZiWqm>eF<JD?,Zh2*Qn9%NsX@EBHej2;+!];S\DcNWid$'(c`?)A'l=p'n*NWqV`JI]8M*lb(^@#Klpc,,f(\CNn-9&EV"YQ/NgX@%csO#8`n`I\49UQ*DV4X%;U+aLR7\+:]Ys4o\h:TQoD*3XoeH=BA+q_c-JWGAZ:(mGg+6%.-s%Hce8`Q6SjpKGg:As1Y"JbWbH2m1eoAO8/L0.Klqrhh-=*[h%H?a>CE*XQW?LH:OS-#m?gu5n45>)]!6c[!%-&Z==FR9=`g!&7.+GpsO_NRFk?qlL0lf=YK-O%L[SEeki3FpmLXH`*eG'gP&=#UcH%YJQd2RdS#o!@e+*&2jS\'Rj]*E2a!QK.l1Er6a"o[^+p35fhbPfa8IbORK.NRtsqM+"PJ7LEK!3Bm,?i>[cg9W?(FMOT?VS:e$\#%APZAsF>*<E&Q)pH,\aNs;7]lh%K<2PGTAj>`bN!F$G<d8Nu:rsiI0]khX8Ph;D,DUQ`K=%MtH[!@:*p3IFSi4k>d7'm3`3Bm?7a2%%>6km,J&+)S,&!D`?Ir,NVs_&J(akXGamrl>us5RhO/]OO^/YtmX8u74fSe'eW0;^o'pM::6ZjX)U)HpIiT1AeY<X6jF)IVD?l:<%/L:nB%H9j-eP&&tGYqa2(IbH%Ko?[qARn"g!^_FCR2,Z3(mJ;cO&m?^2S20keVa=J#h6Q*?[:st;qu:]YXk[TJ#u`Rf*>S#.Sp&K%!atr<n0G*I@^!-1#bdo,cAZ#b2rp6<hS7g]HeiM2(C:2.PH<scG2^[3m)jIMc&LfB1<Og@??c1qdSNa@/j69S,W8CfEq%:0oIIqE%5DFO7M?)$c)[tEapb^VT('E)JE'sAofg$(^qsFICrJ?pQO0FeQQtU?:n%MBO^+rAR:a=FUgdO>u41F+1qB0^rq9X$9Kk73Ne(?<S%Mj$(UrNNR8N652#/$F2Qb-jYk!CTZ\%ApA,^93n]jEGSY/iHmj[\2ZB(SJ.dI/,79A['+OJB#ao6Co'=9O6=aN4m/H^Zo6P461?X%5Wb_21JK\uB5SlYR0%]Z9D2:V#FCc?ceKt,2./p=f\&5cE[-GE7Kb?i!(bb1-7*e@4iIF8V2qlb:o6CUUn\/C:/rAsMCW[03sn=$%1*s11FbT\M&@01Sibd4[2sW-]CJk3]DN96:=N,lt=h.pP/#n$C<&PUpnu0V:*b720"3@ho[;C$^,u\]#S]AgFWt8f+[IM%"#p+P7%%dR`dI4a\3=duBRS>d,WfdZ;&.533lqTHd-'`.E7^a3LdZ0c5?'P&(6m:b.F9qL,_W)"YDo/Fa:GkPsDMe=!qbL.)E.&El1:JKpR%!\t;fdOsOJ2(6t]jGD]"R&s]h(R$8C-&ZeXZ@[53%O'j_[B/j;[0oE+N%/a\e;m\rm*<QE!*`Ir-ka;*5D$2S6<DIV0.21t@Rdl4%`_+BSUHL"g`0o8M;.ACVCqWI3q-mXqp$+8QV2@hJff5nq((o\i:CaN78FVa(6ARid+]#oEU[@JV45Thqaa)n3'lEHp_[RV("oa8N%BJe7H+S]"]"[*NFDi\N1HId-=i5qA&ZU[JuoOk*p6_%34oV#Ra(TcMGjnLW=qu.$LnN(BYg]\FS/j1mm"Mkg-"X^QA6<L=s0U,h(%V`OX$Zd8U$n]nVfm&TPHrq8ra)7KNTff]F8!>CXPD^*\l8>pu/Rana[*R3O4r[Ya+^@NrTH.AOAh[Z]U&h\F[S`$r%&$cES4oG](%.Yj"(RYmo0fsAVj>ue4I:[UH%A8Q^,fjFS^+4<(:jgY3^%GcK`[[HE<T7s"r6nt;>k!o;F+<Ylo7$9kU+k,%nFG?FgS%8FB<Fi+S%-C?@$.5n6YS18DAg"uc3a`$&;MbVM%g`)gk(;&&B["BU)-@&9edg*4"5Us]uJ,rZ&!El/=#U;(4HtB:>^-R#7&l5+nG.#3sPTHFn%a*).0F9hd)U-_]F0!IlRhR`QTO%rL%jAh5frr@[ao`6@#\=s7REbL&To.OpHN6Zt^::'kKGhD4X\Dk:uL6m/,$sXuA^>aK6l+ugK%4UC'hf"++]!C5K#QhFGLY^503+^_Xdfs)pMAqhJ[&""NkB#`\Q-<Mg6)cY+FD.aRk!<lI$fWh^m(OumdD7*oJ(G+oOR)lY-:72`6%;&hR*Qreq)X:+<b-)^9F"T8E06f^Lu`%[;gRL84HbAZ'!K5i2!Y^Rmk,ee_@(>r'J\G"7<XF=)EUIcoV#)J@kWf`bNGnt7K0l8$V%/)YV<lMpQkYtFY8]:?4*&\Dq\NDSo_E7Vi:HN2:Fq5F&+,7Z?,m`agZrQuRag$$-T8:)I%ReN?>b_$Jg/&i(X;$<q[r6VTMV"st)%41*kUK:OH&NaJ8P/'k[;Z:F;*I5e2Vkf2keeqIL7=od[CK+t@=n(6tF2BjYM;62rPFg4AFYqY#9?<1/NQ++=KL#Hh2p<o()ie14\%;Hep0Y)BO/l3[bFN#i%`UYk]GZc9_'Aj&_Hj<FeB,(E:6#"&=&\e&2W0C)Zb$E]6(cE?.EYj<PIVRGI+0/T&I)T\pWQ(Y\hC.Wc1%Z)Aal"#jeo$dA!q1JoUt1."8jF1f.Sf6]Y:=@MrVjL"YJc);-6IPV6p2Eql?Dde5nBQU9bEe"f^@Y:Nk2(&M;TrBl+bl.@/O/AUK%2cNd,S@)p*r^V$c(BRe7/05nk%/sdI6<c^@@0Loj!sJa8"JYM]H]-Q!%9`@T#5AVYb[5rR.4m\UJcQ3ak@ro=""[:M#qSZ:.Vs"R%Wt*5\8_;lu8a8Z%2;q^EdsnNDIm[mAni0L3@/p03ii%8Ypb"TU+X_#34<J.jW]MrBS*[(4O2\bOcbt]@J`cdK?X'5O&2=IGqlL=2%foDH!OW)&<3YL^E-<gu%N0*7SkJ?7JCBb$dT(9!`_q)hZ<0<#[S*\O#26",u>7\\^XYH-=Xako&7DkiAf%FZ<HFC/jmiKCKMJTUr%d].Ks0*S8\`1n=UE:ApHJ^]!6gWJD>h]_`tX^-&8['utUYBiI<$sYZF'e]&,?;^#[b`p+LiEBV'G3'f^=/\\?TO*]l2nD$bX-+Z,%=:;*bV'-HRMhG,a8VaQ:36ij!l$[JO^oWg!N0L_c0>gSOoN';\NA?He,@ngUo2_^#*=7[g^O?Q9H!>Q>V>9K&-V\T'>R]W3Qi,66%;u<:^T^I\EE![dl=7lZo:P;b#nGjO):OJ?1=N,G8\/]M(=,&C:#;$3q=tYD7fs_>;/_RHWLWKRb7XH7GmuTiXnsiCk6Losa`-'P>%N0`9T>s"FsH?T/MnoEZe:n?rR1Ip;q&%o&6k;05`=?_$_mO5&8R!@Fbg9J$AgX4g<ccH_(gdY!jf8ekoco'^$i$KsD=Kth\Eg=Jd%b+j#O-RD4DbH!Q@0-fG$nT-8kfrn$=o.Lp5:Tqb$:g>7U8Y!%XkTHF2ZO^r%3OBW9q;NfIb:3$mEInUV/J(7s->TpJ491;VbUO;U%]<J4h+QHs+gQCn`ZYt6$QBJQ,Z>^>I`DnKA[mp^N`NC^Q=J^u4+N]RqWp$\2,Q:Wr+O,uaA]QC@+!!t6(g5#O9?_g%(49gWHtd!,%\YLIaQYtPs0"r=+#2hH_mU8@=?se\#EK77_EUZt5oN&G'RN*6jW_S8p%U8jRC)L?5M_3OWj=%Q<ioZ/+bb9kq?sg`=*gR5,[d>_n%_^qKT?%o_,$_*H/\"[P9EVW3n1V-DH6@c/o.]bb5C/7SLq@QSoC,F?p9q.8N9\4Q2)[@?<6.kR(^=srRl1ni2AE-pk,'12/r,pNn%l;h_Qp'l'D^t"A.,Co?Hda5Z]AAO7$`JBo.""/&sMHq\?=m0J#;Aag@0V1Z=^Ys?`-?t@ajTT9Wb-K[6Zo9hRF$/gR2dA%C0A44p%i`[(J_/!trCBeZg4`);WS;%i*.rZN?+d0`kq<m0KP-=c7kS/`AidRpN>PUFkUDZ(ekE##WHKbM"O400G4a>B'2]TW:<tCrYc!9M#%b@Ymg.[#)A_G?7DdLn^1ZT7E7Osem+SL[:M?jQZ.CF#PD6F#AsaB!"q3MUa$CK&M5qm?mEhg0q@lgA,lqs^>`D]-Tf-s9i)eZJ?&%5P(m4s.Ke;O8nLKJ,&g/hnK'@YQ+L/^]4<!=7)/kf000)h9UQ?S,2eBI/ghADuT=tLTeF<pTpLjf5H-<nULK+c*uSYr8HK#s7jig%I!keQqsXRSVf2S,n_^MLoCVo%55t(JJ,&!_di\VY+8u]0H:6#-p9T8DVdI49rtj%+Q2~>%AI9_PrivateDataEnd